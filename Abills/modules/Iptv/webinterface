# Iptv web functions

use Iptv;
use Tariffs;
use Fees;
use Shedule;

my $Tariffs = Tariffs->new($db, \%conf, $admin);
my $Iptv    = Iptv->new($db, $admin, \%conf);
my $Fees    = Fees->new($db, $admin, \%conf);

my $debug          = 0;
my @status         = ($_ENABLE, $_DISABLE);
my @service_status = ("$_ENABLE", "$_DISABLE", "$_NOT_ACTIVE");
my @service_status_colors = ("$_COLORS[9]", "$_COLORS[6]", '#808080', '#0000FF', '#FF8000', '#009999');

my %tp_list = ();

my $Iptv_stalker;
my $Stalker_api;

if ($conf{IPTV_STALKER_DB}) {
  eval { require Iptv_stalker; };
  if (!$@){
    Iptv_stalker->import();
    $Iptv_stalker = Iptv_stalker->new($db, $admin, \%conf);
  }
  else {
    #print $@; 
  }
}



#*******************************************************************
# Delete user from module
# iptv_user_del()
#*******************************************************************
sub iptv_user_del {
  my ($uid, $attr) = @_;

  $Iptv->{UID} = $uid;
  $Iptv->user_del({ UID => $uid });

  return 0;
}

#*******************************************************************
# close period
#*******************************************************************
sub iptv_close_period {

  if ($FORM{CLOSE_PERIOD}) {
    $users->config_del('IPTV_CLOSED_PERIOD');
    $users->config_add(
      {
        PARAM => 'IPTV_CLOSED_PERIOD',
        VALUE => "1"
      }
    );
  }

  $users->config_info({ PARAM => 'IPTV_CLOSED_PERIOD' });
  my $close_period = ($users->{VALUE} eq '1') ? "$_MONTH_FEE" : "$users->{VALUE}";

  my $table = $html->table(
    {
      width      => '300',
      caption    => "$_CLOSE_PERIOD",
      cols_align => [ 'left', 'left' ],
      rows       => [ [ "$_STATUS:", "$close_period" ] ],
      ID         => 'CLOSE_PERIOD'
    }
  );
  my %submit = ();

  if ($users->{VALUE} ne '1') {
    $submit{CLOSE_PERIOD} = "$_CLOSE_PERIOD";
  }

  print $html->form_main(
    {
      CONTENT => $table->show(),
      HIDDEN  => { index => "$index", },
      SUBMIT  => \%submit
    }
  );

}

#*******************************************************************
# Change user variant form
# form_chg_vid()
#*******************************************************************
sub iptv_chg_tp {
  my ($attr) = @_;

  my $user;

  if (defined($attr->{USER_INFO})) {
    $user = $attr->{USER_INFO};
    $Iptv = $Iptv->user_info($user->{UID});
    if ($Iptv->{TOTAL} < 1) {
      $html->message('info', $_INFO, $_NOT_ACTIVE);
      return 0;
    }
  }
  else {
    $html->message('err', $_ERROR, "$_USER_NOT_EXIST");
    return 0;
  }

  my $period = $FORM{period} || 0;

  if (
       $Iptv->{MONTH_ABON} > 0
    && !$Iptv->{STATUS}
    && !$users->{DISABLE}
    && ( $users->{DEPOSIT} + $users->{CREDIT} > 0
      || $Iptv->{POSTPAID_ABON}
      || $Iptv->{PAYMENT_TYPE} == 1)
  ) {

    if ($users->{ACTIVATE} ne '0000-00-00') {
      my ($Y, $M, $D) = split(/-/, $users->{ACTIVATE}, 3);
      $M--;
      $Iptv->{ABON_DATE} = strftime "%Y-%m-%d", localtime((mktime(0, 0, 0, $D, $M, ($Y - 1900), 0, 0, 0) + 31 * 86400 + (($conf{START_PERIOD_DAY}) ? $conf{START_PERIOD_DAY} * 86400 : 0)));
    }
    else {
      my ($Y, $M, $D) = split(/-/, $DATE, 3);
      $M++;
      if ($M == 13) {
        $M = 1;
        $Y++;
      }

      if ($conf{START_PERIOD_DAY}) {
        $D = $conf{START_PERIOD_DAY};
      }
      else {
        $D = '01';
      }
      $Iptv->{ABON_DATE} = sprintf("%d-%02d-%02d", $Y, $M, $D);
    }
  }

  $shedule = Shedule->new($db, $admin, \%conf);

  if ($FORM{set}) {
    if (!$permissions{0}{4}) {
      $html->message('err', $_ERROR, "$ERR_ACCESS_DENY");
      return 0;
    }

    if ($period > 0) {
      my ($year, $month, $day);
      if ($period == 1) {
        ($year, $month, $day) = split(/-/, $Iptv->{ABON_DATE}, 3);
      }
      else {
        ($year, $month, $day) = split(/-/, $FORM{DATE}, 3);
      }

      $shedule->add(
        {
          UID          => $user->{UID},
          TYPE         => 'tp',
          ACTION       => $FORM{TP_ID},
          D            => $day,
          M            => $month,
          Y            => $year,
          COMMENTS     => "$_FROM: $Iptv->{TP_ID}:$Iptv->{TP_NAME}",
          ADMIN_ACTION => 1,
          MODULE       => 'Iptv'
        }
      );

      if ($shedule->{errno}) {
        $html->message('err', $_ERROR, "[$shedule->{errno}] $err_strs{$shedule->{errno}}");
      }
      else {
        $html->message('info', $_CHANGED, "$_CHANGED");
        $Iptv->user_info($Iptv->{UID});
      }
    }
    else {
      $Iptv->user_change({%FORM});

      if ($Iptv->{errno}) {
        $html->message('err', $_ERROR, "[$users->{errno}] $err_strs{$users->{errno}}");
      }
      else {
        #Take Fees
        if (! $Iptv->{STATUS} && $FORM{GET_ABON}) {
          service_get_month_fee($Iptv, { SERVICE_NAME => "$_TV" });
        }

        $html->message('info', $_CHANGED, "$_CHANGED");
        $Iptv->user_info($user->{UID});
        iptv_user_channels({ QUIET => 1, USER_INFO => $Iptv });
        $FORM{change}= 1;
         if (iptv_account_action({ CHANGE_TP => 1 })){
           $html->message('err', $_ERROR, "$Iptv->{errno} $Iptv->{errstr}");
         }
      }
    }
  }
  elsif ($FORM{del}) {
    $shedule->del(
      {
        UID => $user->{UID},
        ID  => $FORM{SHEDULE_ID}
      }
    );

    $html->message('info', $_DELETED, "$_DELETED [$FORM{SHEDULE_ID}]");
  }

  $shedule->info(
    {
      UID    => $user->{UID},
      TYPE   => 'tp',
      MODULE => 'Iptv'
    }
  );

  if ($shedule->{TOTAL} > 0) {
    $table = $html->table(
      {
        width      => '100%',
        caption    => "$_SHEDULE",
        cols_align => [ 'left', 'left' ],
        rows       => [ [ "$_TARIF_PLAN:", "$shedule->{ACTION}" ], [ "$_DATE:", "$shedule->{D}-$shedule->{M}-$shedule->{Y}" ], [ "$_ADMIN:", "$shedule->{ADMIN_NAME}" ], [ "$_ADDED:", "$shedule->{DATE}" ], [ "ID:", "$shedule->{SHEDULE_ID}" ] ],
        ID         => 'SHEDULE_INFO'
      }
    );

    $Tariffs->{TARIF_PLAN_SEL} = $table->show() . $html->form_input('SHEDULE_ID', "$shedule->{SHEDULE_ID}", { TYPE => 'HIDDEN' });
    $Tariffs->{ACTION}         = 'del';
    $Tariffs->{LNG_ACTION}     = $_DEL;
  }
  else {
    $Tariffs->{TARIF_PLAN_SEL} = $html->form_select(
      'TP_ID',
      {
        SELECTED          => $Iptv->{TP_ID},
        SEL_MULTI_ARRAY   => $Tariffs->list({ MODULE => 'Iptv' }),
        MULTI_ARRAY_KEY   => 18,
        MULTI_ARRAY_VALUE => '0,1',
        NO_ID             => 1,
        MAIN_MENU         => ($permissions{0}{10}) ? get_function_index('iptv_tp') : undef,
        MAIN_MENU_AGRV    => "TP_ID=$Iptv->{TP_ID}"
      }
    );

    $Tariffs->{PARAMS}    .= form_period($period, { ABON_DATE => $Iptv->{ABON_DATE} });
    $Tariffs->{ACTION}     = 'set';
    $Tariffs->{LNG_ACTION} = $_CHANGE;
  }

  my $tp_index = get_function_index('iptv_tp');
  $Tariffs->{UID}     = $attr->{USER_INFO}->{UID};
  $Tariffs->{TP_ID}   = $Iptv->{TP_ID};
  $Tariffs->{TP_NAME} = "$Iptv->{TP_NUM}:$Iptv->{TP_NAME}";
  $html->tpl_show(templates('form_chg_tp'), $Tariffs);
}



#**********************************************************
#
#**********************************************************
sub iptv_users_search {
  my ($Iptv) = @_;
  
  $FORM{GROUP_SEL}  = sel_groups();
  $FORM{STATUS_SEL} = $html->form_select(
    'STATUS',
    {
      SELECTED     => $FORM{STATUS},
      SEL_ARRAY    => [ @service_status ],
      SEL_OPTIONS  => { '' => '' },
      ARRAY_NUM_ID => 1
    }
  );

  form_search({ SEARCH_FORM => $html->tpl_show(_include('iptv_users_search', 'Iptv'), 
              { %FORM }, 
              { OUTPUT2RETURN=> 1 }),
              ADDRESS_FORM => 1 });

}


#**********************************************************
# user_iptv
#**********************************************************
sub iptv_users_list {

  if ($FORM{TP_ID}) {
    $LIST_PARAMS{TP_ID} = $FORM{TP_ID};
    $pages_qs .= "&TP_ID=$FORM{TP_ID}";
  }

  if ($FORM{search_form}) {
  	iptv_users_search();
  }

  print $html->letters_list({ pages_qs => $pages_qs });

  if ($FORM{letter}) {
    $LIST_PARAMS{FIRST_LETTER} = $FORM{letter};
    $pages_qs .= "&letter=$FORM{letter}";
  }

  for(my $i=0; $i<=2; $i++) {
  	my $name = $service_status[$i];
    if (defined($FORM{SERVICE_STATUS}) && $FORM{SERVICE_STATUS} == $i && $FORM{SERVICE_STATUS} ne '') {
      $LIST_PARAMS{SERVICE_STATUS} = $FORM{SERVICE_STATUS};
      $pages_qs   .= "&SERVICE_STATUS=$i";
      $status_bar .= ' ' . $html->b($name);
    }
    else {
      my $qs = $pages_qs;
      $qs =~ s/\&SERVICE_STATUS=\d//;
      $status_bar .= ' ' . $html->button($html->color_mark($name, $service_status_colors[$i]), "index=$index&SERVICE_STATUS=$i$qs");
    }
  }

  my ($table, $list) = result_former({
     INPUT_DATA      => $Iptv,
     FUNCTION        => 'user_list',
     BASE_FIELDS     => 1,
     DEFAULT_FIELDS  => 'LOGIN,FIO,DEPOSIT,CREDIT,TP_NAME,SERVICE_STATUS',
     FUNCTION_FIELDS => 'form_payments',
     EXT_TITLES      => {
       'port'        => $_PORT,
       'cid'         => 'CID',
       'filter_id'   => 'Filter ID',
       'tp_name'     => "$_TARIF_PLAN",
       'iptv_status' => "$_STATUS",
       'dvcrypt_id'  => 'Dv Crypt',
     },
     TABLE           => {
       width      => '100%',
       caption    => "$_TV - $_USERS",
       border     => 1,
       qs         => $pages_qs,
       header     => $status_bar,
       ID         => 'IPTV_USERS_LIST',
       SHOW_COLS  => \%SEARCH_TITLES,
       ACTIVE_COLS=> \%ACTIVE_TITLES,
       EXPORT     => 1,
       MENU       => "$_ADD:index=" . get_function_index('form_wizard') . ':add' . ";$_SEARCH:index=$index&search_form=1:search",
     },
     MAKE_ROWS    => 1,
     MODULE       => 'Iptv',
     TOTAL        => 1
    });

  if ($Iptv->{errno}) {
    $html->message('err', $_ERROR, "[$Iptv->{errno}] $err_strs{$Iptv->{errno}}");
    return 0;
  }
  #elsif ($Iptv->{TOTAL} == 1) {
  #  $FORM{MODULE} = 'Iptv';
  #  form_users({ USER => user_info($list->[0]->{uid}) });
  #  return 0;
  #}

  return 0;
}

#**********************************************************
# user_dv
#**********************************************************
sub iptv_user {
  my ($attr) = @_;
  $Iptv->{UID} = $FORM{UID};
  
  $FORM{CID} = $FORM{CID2} || $FORM{CID};
  
  if($FORM{send_message}) {
    if (! $FORM{send}) {
      $user->{IPTV_MODEMS} = $html->tpl_show(_include('iptv_send_message', 'Iptv'), { %$attr, %$user } );
      return 0;
    }
  }
  elsif ($FORM{add}) {
    $Iptv->user_add({%FORM});
    if (!$Iptv->{errno}) {
      $Iptv->{ACCOUNT_ACTIVATE} = $attr->{USER_INFO}->{ACTIVATE};
      service_get_month_fee($Iptv, { SERVICE_NAME => "$_TV" }) if (!$FORM{STATUS});
      $html->message('info', $_INFO, "$_ADDED");
      
      if ($attr->{REGISTRATION}) {
#        $html->tpl_show(_include('iptv_user_info', 'Dv'), $Dv);
        return 0;
      }
    }
  }
  elsif ($FORM{change}) {
    $Iptv->user_change({%FORM});
    if (!$Iptv->{errno}) {
      $Iptv->{ACCOUNT_ACTIVATE} = $attr->{USER_INFO}->{ACTIVATE};
      
      if (! $FORM{STATUS} && ($FORM{GET_ABON} || !$FORM{TP_ID})) {
        service_get_month_fee($Iptv, { SERVICE_NAME => "$_TV" });
      }

      if ($FORM{change_now}) {
        $Iptv->user_channels({ UID => $FORM{UID} });
      }

      $html->message('info', $_INFO, "$_CHANGED");
    }
  }
  elsif ($FORM{del} && $FORM{is_js_confirmed}) {
    $Iptv->user_del();
    if (!$Iptv->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED");
    }
  }
  
  if ($Iptv->{errno}) {
    $html->message('err', $_ERROR, "[$Iptv->{errno}] $err_strs{$Iptv->{errno}}");
  }
  else {
    if (iptv_account_action()) {
      $html->message('err', $_ERROR, "$Iptv->{errno} $Iptv->{errstr}");
    }
  }

  my $user = $Iptv->user_info($FORM{UID});
  if ($user->{TOTAL} < 1) {
    $user               = $Iptv->defaults();

    if ($attr->{ACTION}) {
      $user->{ACTION}     = $attr->{ACTION};
      $user->{LNG_ACTION} = $attr->{LNG_ACTION};
    }
    else {
      $user->{ACTION}     = 'add';
      $user->{LNG_ACTION} = $_ACTIVATE;
      $html->message('info', $_INFO, "$_NOT_ACTIVE");
    }

    $user->{TP_NUM}     = $html->form_select(
      'TP_ID',
      {
        SELECTED          => $Iptv->{TP_ID},
        SEL_MULTI_ARRAY   => $Tariffs->list({ MODULE => 'Iptv' }),
        MULTI_ARRAY_KEY   => 18,
        MULTI_ARRAY_VALUE => '0,1',
        NO_ID             => 1,
      }
    );
  }
  else {
    iptv_user_channels_list({ UID =>  $FORM{UID}, TP_ID => $Iptv->{TP_ID} });
    $user->{TP_IDS}           = $Iptv->{TP_ID};

    if ($attr->{ACTION}) {
      $user->{ACTION}     = $attr->{ACTION};
      $user->{LNG_ACTION} = $attr->{LNG_ACTION};
    }
    else {
      $user->{ACTION}     = 'change';
      $user->{LNG_ACTION} = $_CHANGE;
    }    

    $user->{CHANGE_TP_BUTTON} = $html->button($_CHANGE, 'UID=' . $FORM{UID} . '&index=' . get_function_index('iptv_chg_tp'), { CLASS => 'change rightAlignText' });
  }

  $user->{STATUS_SEL} = $html->form_select(
    'STATUS',
    {
      SELECTED     => $Iptv->{STATUS},
      SEL_ARRAY    => \@service_status,
      ARRAY_NUM_ID => 1
    }
  );

  if ($Iptv_stalker) {
    my $stalker_modems_list = $Iptv_stalker->stalker_users_list({ UNREGISTER => 1 });
    if (! $Iptv_stalker->{errno}) {
      $user->{MODEMS} = $html->form_select(
        'CID2',
        {
          SELECTED          => $Iptv->{CID},
          SEL_MULTI_ARRAY   => $stalker_modems_list,
          MULTI_ARRAY_KEY   => 1,
          MULTI_ARRAY_VALUE => 1,
          SEL_OPTIONS       => { '' => ''},
          NO_ID             => 1
        }
      );
      
     if ($user->{CID}) {
       $user->{SEND_MESSAGE} = $html->button("$_SEND $_MESSAGE", "index=$index&UID=$FORM{UID}&send_message=1", { BUTTON => 1 });
     }

     $user->{IPTV_MODEMS} = $html->tpl_show(_include('iptv_modems', 'Iptv'), { %$attr, %$user }, { OUTPUT2RETURN => 1 });
    }
    else {
      $html->message('err', $_ERROR, "$Iptv_stalker->{errno} $Iptv_stalker->{errstr}");
    }
  }
  else {
    $user->{SEND_MESSAGE} = $html->button("$_SEND $_MESSAGE", "index=$index&UID=$FORM{UID}&send_message=1", { BUTTON => 1 });
  }

  $html->tpl_show(_include('iptv_user', 'Iptv'), { %$attr, %$user });

  if ($user->{UID}) {
    iptv_user_channels({ USER_INFO => $user });
  }
  
  return 0;
}


#**********************************************************
#
#**********************************************************
sub iptv_ext_cmd {
  my ($cmd, $attr)=@_;

  if (in_array('Dhcphosts', \@MODULES)) {
    use Dhcphosts;
    my $Dhcphosts  = Dhcphosts->new($db, $admin, \%conf);
    my $hosts_list = $Dhcphosts->hosts_list({ PORTS             => '!',
                                              UID               => $attr->{UID},
                                              NAS_ID            => '>0',
                                              NAS_IP            => '!0.0.0.0',
                                              SHOW_NAS_MNG_INFO => 1,
                                              COLS_NAME         => 1
                                              });
    my $cmd_tpl = $cmd;
    my @cmd_arr = ();
    foreach my $host (@$hosts_list) {
      $cmd = tpl_parse("$cmd_tpl", { LOGIN        => $host->{login},
                                     NAS_IP       => $host->{mng_host_port} || $host->{nas_ip},
                                     NAS_ID       => $host->{nas},
                                     PORT_ID      => $host->{ports},
                                     IP           => $host->{ip},
                                     NAS_LOGIN    => $host->{mng_user},
                                     NAS_PASSWORD => $host->{mng_password},
                                   });      
      push @cmd_arr, $cmd;
    }
    
    if ($#cmd_arr > -1) {
      $cmd = join(';', @cmd_arr);
    }
  }

  if (! $attr->{ACTION}) {
    $attr->{ACTION}='up';
  }
  
  $cmd = tpl_parse("$cmd", $attr);
  
  print $cmd if ($attr->{debug});
  my $output = `$cmd`;
}


#**********************************************************
#
#**********************************************************
#sub iptv_payments_maked {
#  my ($attr) = @_;
#
#  return '' if ($FORM{DISABLE});
#
#  $Iptv->info($attr->{USER_INFO}->{UID});
#
#  my $deposit = $attr->{USER_INFO}->{DEPOSIT} + (($attr->{USER_INFO}->{CREDIT} > 0) ? $attr->{USER_INFO}->{CREDIT} : $Dv->{TP_CREDIT});
#
#  my $abon_fees = ($attr->{USER_INFO}->{REDUCTION} ) ? $Dv->{MONTH_ABON} + $Dv->{DAY_ABON} : ($Dv->{MONTH_ABON} + $Dv->{DAY_ABON}) * (100 - $attr->{USER_INFO}->{REDUCTION}) / 100;
#
#  if ($Iptv->{STATUS} > 3 && ($deposit > $abon_fees || $Iptv->{ABON_DISTRIBUTION})) {
#    $Iptv->change({ UID     => $attr->{USER_INFO}->{UID},
#                  STATUS  => 0  });
#    $Iptv->{ACCOUNT_ACTIVATE}=$attr->{USER_INFO}->{ACTIVATE} || '0000-00-00';
#    service_get_month_fee($Iptv, $attr);
#   }
#}

#**********************************************************
# Time intervals
# form_intervals()
#**********************************************************
sub iptv_nas {
  $FORM{subf} = 18;
  iptv_tp();
}

#**********************************************************
# Time intervals
# form_intervals()
#**********************************************************
sub iptv_ti_channels {
  my ($attr) = @_;

  if (defined($attr->{TP})) {
    if ($FORM{change}) {

      if (defined($Iptv_stalker)) {
        $Iptv_stalker->stalker_channel_ti_change({%FORM});
        
        if (!$Iptv_stalker->{errno}) {
          stalker_tariff_export();
          $html->message('info', $_INFO, "$_CHANGED");
        } else {
          $html->message('err', $_ERROR, "$Iptv_stalker->{errno} $Iptv_stalker->{errstr}");
        }
      } 
      else {
        $Iptv->channel_ti_change({%FORM});
        if (!$Iptv->{errno}) {
          $html->message('info', $_INFO, "$_CHANGED");
        }  
      }
    } 
  }
  else {
    iptv_tp({ f => 'iptv_ti_channels' });
    return 0;
  }

  if ($Iptv->{errno}) {
    $html->message('err', $_ERROR, "[$Iptv->{errno}] $err_strs{$Iptv->{errno}}");
  }

  my $pages_qs = '';

  my ($delete, $change);

  $pages_qs .= "&channels=$FORM{channels}";
  $list = $Iptv->channel_ti_list(
    {
      %LIST_PARAMS,
      INTERVAL_ID => $FORM{channels},
      STATUS      => 0,
      COLS_NAME   => 1
    }
  );

  my $table = $html->table(
    {
      width      => '100%',
      caption    => $_CHANNELS,
      border     => 1,
      title      => [ "# ", "$_NUM", $_NAME, $_DESCRIBE, "$_MONTH $_PRICE", "$_DAY $_PRICE", "$_MANDATORY " ],
      cols_align => [ 'right', 'right', 'left', 'left', 'right', 'right', 'center' ],
      qs         => $pages_qs . "&TP_ID=$FORM{TP_ID}",
      ID         => 'IPTV_INTERVAL_CHANNELS',
      EXPORT     => 1
    }
  );

  foreach my $line (@$list) {
    $table->addrow(
      $html->form_input('IDS', "$line->{channel_id}", { TYPE => 'checkbox', STATE => $line->{interval_channel_id} || undef }),
      $line->{channel_num}, 
      $line->{name}, 
      $line->{comments},
      $html->form_input("MONTH_PRICE_" . $line->{channel_id}, (($line->{month_price}) ? $line->{month_price} : 0.00), { SIZE => 8 }),
      $html->form_input("DAY_PRICE_" . $line->{channel_id},   (($line->{day_price}) ? $line->{day_price} : 0.00), { SIZE => 8 }),
      $html->form_input("MANDATORY_" . $line->{channel_id}, 1, { TYPE => 'checkbox', STATE => (($line->{mandatory}) ? 1 : undef) })
    );
  }

  form_search(
    {
      SIMPLE => {
        $_NUM      => "NUMBER",
        $_NAME     => "ROUTE_NAME",
        $_DISABLE  => "DISABLE",
        $_DESCRIBE => "DESCRIBE",
        $_PORT     => "PORT"
      },

      HIDDEN_FIELDS => {
        TP_ID    => $FORM{TP_ID},
        channels => $FORM{channels}
      }
    }
  );

  print $html->form_main(
    {
      CONTENT => $table->show(),
      HIDDEN  => {
        TP_ID       => "$FORM{TP_ID}",
        index       => "$index",
        channels    => "$FORM{channels}",
        INTERVAL_ID => "$FORM{channels}"
      },
      SUBMIT => { change => "$_CHANGE" }
    }
  );

  $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right' ],
      rows       => [ [ "$_TOTAL:", $html->b($Iptv->{TOTAL}), "$_ACTIV:", $html->b($Iptv->{ACTIVE}), ] ]
    }
  );

  print $table->show();

}

#**********************************************************
# Time intervals
# form_intervals()
#**********************************************************
sub iptv_intervals {
  my ($attr) = @_;

  my @DAY_NAMES = ("$_ALL", $WEEKDAYS[1], $WEEKDAYS[2], $WEEKDAYS[3], $WEEKDAYS[4], $WEEKDAYS[5], $WEEKDAYS[6], $WEEKDAYS[7], "$_HOLIDAYS");
  my %visual_view = ();
  my $tarif_plan;

  if (defined($attr->{TP})) {
    $tarif_plan               = $attr->{TP};
    $tarif_plan->{ACTION}     = 'add';
    $tarif_plan->{LNG_ACTION} = $_ADD;

    if ($FORM{channels}) {
      iptv_ti_channels({ TP => $attr->{TP} });
    }
    elsif ($FORM{add}) {
      $tarif_plan->ti_add({%FORM});
      if (!$tarif_plan->{errno}) {
        $html->message('info', $_INFO, "$_INTERVALS $_ADDED");
      }
    }
    elsif ($FORM{change}) {
      $tarif_plan->ti_change($FORM{TI_ID}, {%FORM});

      if (!$tarif_plan->{errno}) {
        $html->message('info', $_INFO, "$_INTERVALS $_CHANGED [$tarif_plan->{TI_ID}]");
      }
    }
    elsif (defined($FORM{chg})) {
      $tarif_plan->ti_info($FORM{chg});
      if (!$tarif_plan->{errno}) {
        $html->message('info', $_INFO, "$_INTERVALS $_CHANGE [$FORM{chg}]");
      }

      $tarif_plan->{ACTION}     = 'change';
      $tarif_plan->{LNG_ACTION} = $_CHANGE;
    }
    elsif ($FORM{del} && $FORM{is_js_confirmed}) {
      $tarif_plan->ti_del($FORM{del});
      if (!$tarif_plan->{errno}) {
        $html->message('info', $_DELETED, "$_DELETED $FORM{del}");
      }
    }
    else {
      $tarif_plan->ti_defaults();
    }

    my $list  = $tarif_plan->ti_list({%LIST_PARAMS});
    my $table = $html->table(
      {
        width      => '100%',
        caption    => $_INTERVALS,
        border     => 1,
        title      => [ '#', $_DAYS, $_BEGIN, $_END, '-', '-', '-', '-' ],
        cols_align => [ 'left', 'left', 'right', 'right', 'right', 'center', 'center', 'center', 'center' ],
        qs         => $pages_qs,
        caption    => $_INTERVALS,
        ID         => 'IPTV_INTERVALS'
      }
    );

    my $color = "AAA000";
    foreach my $line (@$list) {

      my $delete = $html->button($_DEL, "index=$index$pages_qs&del=$line->[0]", { MESSAGE => "$_DEL [$line->[0]] ?", CLASS => 'del' });
      $color = sprintf("%06x", hex('0x' . $color) + 7000);

      #day, $hour|$end = color
      my ($h_b, $m_b, $s_b) = split(/:/, $line->[2], 3);
      my ($h_e, $m_e, $s_e) = split(/:/, $line->[3], 3);

      push(@{ $visual_view{ $line->[1] } }, "$h_b|$h_e|$color|$line->[0]");

      if (($FORM{tt} eq $line->[0]) || ($FORM{chg} eq $line->[0])) {
        $table->{rowcolor} = $_COLORS[0];
      }
      else {
        undef($table->{rowcolor});
      }

      $table->addtd(
        $table->td($line->[0], { rowspan => ($line->[5] > 0) ? 2 : 1 }),
        $table->td($html->b($DAY_NAMES[ $line->[1] ])),
        $table->td($line->[2]),
        $table->td($line->[3]),
        $table->td($html->button("$_CHANNELS", "index=$index$pages_qs&channels=$line->[0]", { BUTTON => 1 })),
        $table->td($html->button("$_CHANGE",   "index=$index$pages_qs&chg=$line->[0]",      { CLASS  => 'change' })),
        $table->td($delete), $table->td("&nbsp;", { bgcolor => '#' . $color, rowspan => ($line->[5] > 0) ? 2 : 1 })
      );

    }
    print $table->show();

  }
  elsif (defined($FORM{TP_ID})) {
    $FORM{subf} = $index;
    iptv_tp();
    return 0;
  }

  if ($tarif_plan->{errno}) {
    $html->message('err', $_ERROR, "[$tarif_plan->{errno}] $err_strs{$tarif_plan->{errno}} $tarif_plan->{errstr}");
  }

  $table = $html->table(
    {
      width       => '100%',
      title_plain => [ $_DAYS, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 ],
      caption     => "$_INTERVALS",
      rowcolor    => $_COLORS[1]
    }
  );

  for (my $i = 0 ; $i < 9 ; $i++) {
    my @hours = ();

    my ($h_b, $h_e, $color, $p);
    my $link = "&nbsp;";
    for (my $h = 0 ; $h < 24 ; $h++) {

      if (defined($visual_view{$i})) {
        $day_periods = $visual_view{$i};

        foreach my $line (@$day_periods) {

          #print "$i -- $line    <br>\n";
          ($h_b, $h_e, $color, $p) = split(/\|/, $line, 4);
          if (($h >= $h_b) && ($h < $h_e)) {

            #             print "$i // $h => $h_b && $h <= $h_e // $color <br> \n";
            $tdcolor = '#' . $color;
            $link = $html->button('#', "index=$index&TP_ID=$FORM{TP_ID}&subf=$FORM{subf}&chg=$p", { BUTTON => 1 });
            last;
          }
          else {
            $link    = "&nbsp;";
            $tdcolor = $_COLORS[1];
          }
        }
      }
      else {
        $link    = "&nbsp;";
        $tdcolor = $_COLORS[1];
      }

      push(@hours, $table->td("$link", { align => 'center', bgcolor => $tdcolor }));
    }

    $table->addtd($table->td($DAY_NAMES[$i]), @hours);
  }

  print $table->show();

  $tarif_plan->{SEL_DAYS} = $html->form_select(
    'TI_DAY',
    {
      SELECTED     => $day_id,
      SEL_ARRAY    => \@DAY_NAMES,
      ARRAY_NUM_ID => 1
    }
  );

  $html->tpl_show(_include('iptv_ti', 'Iptv'), $tarif_plan);

}

#**********************************************************
# Tarif plans
# form_tp
#**********************************************************
sub iptv_tp {
  my $tarif_info;

  my @Payment_Types         = ($_PREPAID, $_POSTPAID);
  $tarif_info               = $Tariffs->defaults();
  $tarif_info->{LNG_ACTION} = $_ADD;
  $tarif_info->{ACTION}     = 'ADD_TP';
  
  
  if($FORM{STALKER_TP_EXPORT}) {
    stalker_tariff_export();
  }
  # -- end  Export tarrif plan from stalker -- # 
  if ($FORM{ADD_TP}) {
    if (defined($Iptv_stalker)) {
      $FORM{ID} = $Iptv_stalker->stalker_tp_add({%FORM});
      #stalker_tariff_export({WITHOUT_SUBSCRIPTION => 1});      
    }

    $FORM{ID} = $FORM{CHG_TP_ID};
    $Tariffs->add({ %FORM, MODULE => 'Iptv' });
    if (!$Tariffs->{errno}) {
      $html->message('info', $_ADDED, "$_ADDED $Tariffs->{TP_ID}");
    }
  }

  elsif (defined($FORM{TP_ID})) {
    $tarif_info = $Tariffs->info($FORM{TP_ID});

    if ($Tariffs->{errno}) {
      $html->message('err', $_ERROR, "[$Tariffs->{errno}] $err_strs{$Tariffs->{errno}}");
      return 0;
    }

    $pages_qs .= "&TP_ID=$FORM{TP_ID}&subf=$FORM{subf}";
    $LIST_PARAMS{TP} = $FORM{TP_ID};
    %F_ARGS = (TP => $Tariffs);
    
    $index = get_function_index('iptv_tp');
    $Tariffs->{NAME_SEL} = $html->form_main(
      {
        CONTENT => $html->form_select(
          'TP_ID',
          {
            SELECTED          => $FORM{TP_ID},
            SEL_MULTI_ARRAY   => $Tariffs->list({ %LIST_PARAMS, MODULE => 'Iptv' }),
            MULTI_ARRAY_KEY   => 0,
            MULTI_ARRAY_VALUE => 1,
          }
        ),
        HIDDEN => { index => "$index" },
        SUBMIT => { show  => "$_SHOW" }
      }
    );

    func_menu(
      {
        'ID'   => $Tariffs->{TP_ID},
        $_NAME => $Tariffs->{NAME_SEL}
      },
      { 
        $_INFO     => ":TP_ID=$FORM{TP_ID}",
        $_INTERVALS=> get_function_index('form_intervals').":TP_ID=$FORM{TP_ID}",
        $_NAS      => get_function_index('form_nas_allow').":TP_ID=$FORM{TP_ID}",        
        $_USERS    => get_function_index('iptv_users_list').":TP_ID=$FORM{TP_ID}"
      },
      { f_args => {%F_ARGS} }
    );

    if ($FORM{subf}) {
      return 0;
    }
    elsif ($FORM{change}) {
      $Tariffs->change($FORM{TP_ID}, { %FORM, MODULE => 'Iptv' });

      if (!$Tariffs->{errno}) {
        $html->message('info', $_CHANGED, "$_CHANGED $Tariffs->{TP_ID}");
      }
    }

    $tarif_info->{LNG_ACTION} = $_CHANGE;
    $tarif_info->{ACTION}     = 'change';
    $FORM{add_form}=1;

    if (defined($Iptv_stalker)) {
      $tarif_info->{DISABLED}   = "readonly='readonly'";
    }

  }
  elsif (defined($FORM{del}) && $FORM{is_js_confirmed}) {
    $Tariffs->del($FORM{del});

    if (!$Tariffs->{errno}) {
      $html->message('info', $_DELETE, "$_DELETED $FORM{del}");
    }
    if(defined($FORM{del_stalker_tp}) && $FORM{del_stalker_tp} > 0) {
      
      if (defined($Iptv_stalker)) {
        $Iptv_stalker->stalker_del_tp({ UID => $FORM{del_stalker_tp} });
        $Iptv->user_del({ UID => $uid });
      }      
    }
  }

  if ($Tariffs->{errno}) {
    $html->message('err', $_ERROR, "[$Tariffs->{errno}] $err_strs{$Tariffs->{errno}}");
  }

  if($FORM{add_form}) {
    $tarif_info->{PAYMENT_TYPE_SEL} = $html->form_select(
      'PAYMENT_TYPE',
      {
        SELECTED     => $tarif_info->{PAYMENT_TYPE},
        SEL_ARRAY    => \@Payment_Types,
        ARRAY_NUM_ID => 1
      }
    );

    $tarif_info->{GROUPS_SEL} = $html->form_select(
      'TP_GID',
      {
        SELECTED          => $tarif_info->{TP_GID},
        SEL_MULTI_ARRAY   => [ [ '', '' ], @{ $Tariffs->tp_group_list() } ],
        MULTI_ARRAY_KEY   => 0,
        MULTI_ARRAY_VALUE => 1,
      }
    );

    $tarif_info->{REDUCTION_FEE}    = ($tarif_info->{REDUCTION_FEE})    ? 'checked' : '';
    $tarif_info->{POSTPAID_FEE}     = ($tarif_info->{POSTPAID_FEE})     ? 'checked' : '';
    $tarif_info->{PERIOD_ALIGNMENT} = ($tarif_info->{PERIOD_ALIGNMENT}) ? 'checked' : '';

    my $tp_list = $Tariffs->list({ MODULE => 'Iptv', DOMAIN_ID => $admin->{DOMAIN_ID} });

    $tarif_info->{SMALL_DEPOSIT_ACTION_SEL} = $html->form_select(
      'SMALL_DEPOSIT_ACTION',
      {
        SELECTED          => $tarif_info->{SMALL_DEPOSIT_ACTION},
        SEL_MULTI_ARRAY   => [ [ '', '' ], [ '-1', "$_HOLD_UP" ], @{$tp_list} ],
        MULTI_ARRAY_KEY   => 0,
        MULTI_ARRAY_VALUE => 1,
      }
    );

    $tarif_info->{NEXT_TARIF_PLAN_SEL} = $html->form_select(
      'NEXT_TARIF_PLAN',
      {
        SELECTED          => $tarif_info->{NEXT_TARIF_PLAN},
        SEL_MULTI_ARRAY   => [ [ '', '' ], @{$tp_list} ],
        MULTI_ARRAY_KEY   => 0,
        MULTI_ARRAY_VALUE => 1,
      }
    );

    if ($conf{EXT_BILL_ACCOUNT}) {
      my $checked = ($tarif_info->{EXT_BILL_ACCOUNT}) ? ' checked' : '';
      $tarif_info->{EXT_BILL_ACCOUNT} = "<tr><td>$_EXTRA $_BILL:</td><td><input type='checkbox' name='EXT_BILL_ACCOUNT' value='1' $checked></td></tr>\n";
    }

    $html->tpl_show(_include('iptv_tp', 'Iptv'), { %FORM, %$tarif_info });
  }
 
  my $list = $Tariffs->list({ %LIST_PARAMS, MODULE => 'Iptv' });

  # Time tariff Name Begin END Day fee Month fee Simultaneously - - -
  my $table = $html->table(
    {
      width      => '100%',
      caption    => "$_TARIF_PLANS",
      border     => 1,
      title      => [ '#', $_NAME, $_HOUR_TARIF, $_TRAFIC_TARIFS, $_PAYMENT_TYPE, $_DAY_FEE, $_MONTH_FEE, $_SIMULTANEOUSLY, $_AGE, $_GROUP, '-', '-', '-' ],
      cols_align => [ 'right', 'left', 'center', 'center', 'center', 'right', 'right', 'right', 'right', 'center:noprint', 'center:noprint', 'center:noprint' ],
      ID         => 'IPTV_TARIF_PLANS',
      EXPORT     => 1,
      MENU       => "$_ADD:index=$index&add_from=1:add"
    }
  );

  my ($delete, $change);
  foreach my $line (@$list) {
    if (defined($Iptv_stalker)) {
     my $stalker_tp_id = ($line->[0] - $CONF->{STALKER_TP_ID} > 0 ? $line->[0] - $CONF->{STALKER_TP_ID} : 0);   
     if ($permissions{4}{1}) {
        $delete = $html->button($_DEL, "index=$index&del=$line->[18]&del_stalker_tp=$stalker_tp_id", { MESSAGE => "$_DEL $line->[0]?", CLASS => 'del' });
        $change = $html->button($_CHANGE, "index=$index&TP_ID=$line->[18]", { CLASS => 'change' });
        #$html->button($_CHANGE, "index=$index&TP_ID=$line->[18]", { CLASS => 'change' });
      }      
    }
    else {
     if ($permissions{4}{1}) {
        $delete = $html->button($_DEL, "index=$index&del=$line->[18]", { MESSAGE => "$_DEL $line->[0]?", CLASS => 'del' });
        $change = $html->button($_CHANGE, "index=$index&TP_ID=$line->[18]", { CLASS => 'change' });
      }      
    }

    if ($FORM{TP_ID} eq $line->[18]) {
      $table->{rowcolor} = $_COLORS[0];
    }
    else {
      undef($table->{rowcolor});
    }

    $table->addrow(
      $html->b($line->[0]),
      $html->button($line->[1], "index=$index&TP_ID=$line->[18]"),
      $bool_vals[ $line->[2] ],
      $bool_vals[ $line->[3] ],
      $Payment_Types[ $line->[4] ],
      $line->[5], 
      $line->[6], 
      $line->[7], 
      $line->[8], 
      $line->[9], 
      $html->button($_INTERVALS, "index=" . get_function_index('iptv_intervals') . "&subf=73&TP_ID=$line->[18]", { CLASS => 'interval' }),
      $change, 
      $delete
    );
  }

  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right' ],
      rows       => [ [ ($conf{IPTV_STALKET_DB}) ? $html->button("Stalker $_EXPORT_TARIFFS", "index=$index&STALKER_TP_EXPORT=1", { BUTTON => 1 }) : '', 
      "$_TOTAL:", $html->b($Tariffs->{TOTAL}) ] ]
    }
  );
  print $table->show();

}

#**********************************************************
# Tarif plans
# iptv_routes
#**********************************************************
sub iptv_channels {

  if ($FORM{message}) {        
    $html->message('info', $_INFO, "$FORM{message}");  
  }

  $Iptv->{ACTION}     = 'add';
  $Iptv->{LNG_ACTION} = $_ADD;
  $Iptv->{ACTION_STALKER}='stalker_add';
  $Iptv->{ACTION_LNG_STALKER}=$_ADD;
  
  my @tv_genre_id = (
     '-----------',
     $_INFORMATIVE,
     $_ENTERTAINMENT,
     $_BABY,
     $_MOVIE,
     $_SCIENCE,
     $_SPORT,
     $_MUSIC,
     $_BUSINESS,
     $_CULTURE,
     $_ADULT,
  );
      
  if ($FORM{stalker_add}) {  
    if ($FORM{NAME} ne '' && $FORM{NUMBER} =~ /\d{1,3}/) {
    $Iptv->stalker_channel_add({ %FORM });
    
      if (! $Iptv->{errno}) {
      stalker_export();
        $html->tpl_show(_include('iptv_redirect', 'Iptv'), { 
          SECTION => '',
          MESSAGE => "$_ADDED",
        });    
      }
    }
    else {
      $FORM{TV_GENRE_ID}=$html->form_select("TV_GENRE_ID", 
      {
        SELECTED     => $FORM{TV_GENRE_ID},
        SEL_ARRAY    => \@tv_genre_id,
        ARRAY_NUM_ID => 0,  
      });
      
      $html->message('info', $_INFO, "$_FIELD_ARE_REQUIRED 
        $_NUM,
        $_NAME"
      );
    }
  } 
  elsif ($FORM{stalker_del}) {
    $Iptv->stalker_channel_del( {STALKER_NAME =>$FORM{stalker_del}, ABILLS_ID => $FORM{abills_id}} );
    if (! $Iptv->{errno}){
      stalker_export();
        $html->tpl_show(_include('iptv_redirect', 'Iptv'), { 
          SECTION => '',
          MESSAGE => "$_DELETED",
        });          
    }
  }
  elsif ($FORM{stalker_chg}) {
    $Iptv->{ACTION_STALKER}='stalker_change';
    $Iptv->{ACTION_LNG_STALKER}=$_CHANGE;
    $Iptv->stalker_channel_info({ NAME => $FORM{stalker_chg},});

    
    foreach my $line (%{$Iptv}) {

      if($line eq 'WOWZA_TMP_LINK' ||
         $line eq 'CENSORED' ||
         $line eq 'HD' ||
         $line eq 'BASE_CH' ||
         $line eq 'BONUS_CH' ||
         $line eq 'ENABLE_TV_ARCHIVE' ||
         $line eq 'WOWZA_DVR' ||
         $line eq 'USE_HTTP_TMP_LINK' ||
         $line eq 'ENABLE_WOWZA_LOAD_BALANCING' ||
         $line eq 'ENABLE_MONITORING') {

         if($Iptv->{$line} == 1){
           $Iptv->{$line} = "checked='checked'";
         }
      }
      elsif($line eq 'STATUS') {
         if($Iptv->{$line} == 0){
           $Iptv->{$line} = "checked='checked'";
         }
      }

    }
   
    if (! $Iptv->{errno}) {
      $html->message('info', $_INFO, "$_CHANGING");  
    }
  }
  elsif ($FORM{stalker_change}) {
    my $change_errors = 0;
    
    if ($FORM{NAME} ne '' && $FORM{NUMBER} =~ /\d{1,3}/) {
      if($FORM{NUMBER} != $FORM{OLD_NUMBER}) {
        $list = $Iptv->stalker_channel_list( { NUMBER => $FORM{NUMBER} });
        if(defined($list->[0]->[0])){
          $change_errors = 2          
        }
      }      
      if($change_errors == 0) {
        $Iptv->stalker_change_channels({ %FORM });
        if (!$Iptv->{errno}) {   
          stalker_export();
          $html->tpl_show(_include('iptv_redirect', 'Iptv'), { 
            SECTION => '',
            MESSAGE => "$_CHANGED",
          });      
        }
      }
    }
    else {
      $change_errors = 1
    }
  if($change_errors > 0) {
    $Iptv->{ACTION_STALKER}='stalker_change';
    $Iptv->{ACTION_LNG_STALKER}=$_CHANGE;

    foreach my $line (keys %FORM) {

      if($line eq 'WOWZA_TMP_LINK' ||
         $line eq 'CENSORED' ||
         $line eq 'HD' ||
         $line eq 'BASE_CH' ||
         $line eq 'BONUS_CH' ||
         $line eq 'ENABLE_TV_ARCHIVE' ||
         $line eq 'WOWZA_DVR' ||
         $line eq 'USE_HTTP_TMP_LINK' ||
         $line eq 'ENABLE_WOWZA_LOAD_BALANCING' ||
         $line eq 'ENABLE_MONITORING') {

         if($FORM{$line} == 1 || $FORM{$line} eq 'on'){
           $FORM{$line} = "checked='checked'";
         }
      }
      elsif($line eq 'STATUS') {
         if($FORM{$line} == 0 || $FORM{$line} eq 'on' ){
           $FORM{$line} = "checked='checked'";
         }
      }
    }

    $FORM{TV_GENRE_ID}=$html->form_select("TV_GENRE_ID", 
    {
      SELECTED     => $FORM{TV_GENRE_ID},
      SEL_ARRAY    => \@tv_genre_id,
      ARRAY_NUM_ID => 0,  
    });

    if($change_errors == 1) {
      $html->message('info', $_INFO, "$_FIELD_ARE_REQUIRED 
        $_NUM,
        $_NAME"
      );        
    }
    elsif($change_errors == 2) {
      $html->message('info', $_INFO, $_THIS_NUMBER_ALREADY_EXISTS);           
    }
  }  
}

  if ($FORM{add}) {
    $Iptv->channel_add({%FORM});
    if (!$Iptv->{errno}) {
      $html->message('info', $_ADDED, "$_ADDED '$FORM{NAME}' ");
    }    
  }
  elsif($FORM{stalker_export}) {        
    stalker_export();
  }
  elsif ($FORM{change}) {
    $Iptv->channel_change({%FORM});
    if (!$Iptv->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED");
    }
  }
  elsif ($FORM{chg}) {
    $Iptv->channel_info({ %FORM, ID => $FORM{chg} });
    if (!$Iptv->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED");

      $Iptv->{ACTION}     = 'change';
      $Iptv->{LNG_ACTION} = $_CHANGE;
    }
  }
  elsif (defined($FORM{del}) && $FORM{is_js_confirmed}) {
    $Iptv->channel_del($FORM{del});
    if (!$Iptv->{errno}) {
      $html->message('info', $_DELETE, "$_DELETED $FORM{del}");
    }
  }

  if ($Iptv->{errno}) {
    $html->message('err', $_ERROR, "[$Iptv->{errno}] $err_strs{$Iptv->{errno}}");
    return 0;
  }

  $Iptv->{DISABLE} = ' checked' if ($Iptv->{DISABLE} == 1);

  $Iptv->{CHANGE_PARAM} = defined($Iptv->{CHANGE_PARAM}) ? $Iptv->{CHANGE_PARAM} : $FORM{CHANGE_PARAM};
  $Iptv->{OLD_NUMBER} = defined($Iptv->{OLD_NUMBER}) ? $Iptv->{OLD_NUMBER} : $FORM{OLD_NUMBER};
  $Iptv->{TV_GENRE_ID}=$html->form_select("TV_GENRE_ID", 
  {
    SELECTED     => (defined($Iptv->{TV_GENRE_ID_SELECT}) ? $Iptv->{TV_GENRE_ID_SELECT} : (defined($FORM{TV_GENRE_ID}) ? $FORM{TV_GENRE_ID} : 0)),
    SEL_ARRAY    => \@tv_genre_id,
    ARRAY_NUM_ID => 0,  
  });

    if (defined($Iptv_stalker)) {
      $html->tpl_show(_include('iptv_stalker_ch_add', 'Iptv'), {%$Iptv, %FORM});
    }
    else {
      $html->tpl_show(_include('iptv_channel', 'Iptv'), $Iptv);
    }

  my %SEARCH_FIELDS = (
    $_NUM      => "NUMBER",
    $_NAME     => "ROUTE_NAME",
    $_DISABLE  => "DISABLE",
    $_DESCRIBE => "DESCRIBE",
    $_PORT     => "PORT"
  );

  $output .= form_search({ SIMPLE => \%SEARCH_FIELDS, });

  my $list  = $Iptv->channel_list({%LIST_PARAMS, COLS_NAME => 1 });
  my $table = $html->table(
    {
      width      => '100%',
      caption    => "$_CHANNELS",
      border     => 1,
      title      => [ $_NUM, $_NAME, $_DESCRIBE, "$_PORT", $_STATUS, '-', '-' ],
      cols_align => [ 'right', 'left', 'left', 'right', 'center', 'center' ],
      qs         => $pages_qs,
      pages      => $Iptv->{TOTAL},
      ID         => 'IPTV_CHANNELS',
      header     => ''
    }
  );

  my ($delete, $change);
  foreach my $line (@$list) {
    if ($permissions{4}{1}) {

      if (defined($Iptv_stalker)) {
        $delete = $html->button($_DEL, "index=$index&stalker_del=$line->{name}&abills_id=$line->{id}", { MESSAGE => "$_DEL $line->{num} / $line->{name}?", CLASS => 'del' });
        $change = $html->button($_CHANGE, "index=$index&stalker_chg=$line->{name}&abills_id=$line->{id}", { CLASS => 'change' });        
      }
      else {
        $delete = $html->button($_DEL, "index=$index&del=$line->{id}", { MESSAGE => "$_DEL $line->{num} / $line->{name}?", CLASS => 'del' });
        $change = $html->button($_CHANGE, "index=$index&chg=$line->{id}", { CLASS => 'change' });
      }
    }

    $table->addrow($line->{num}, 
      $line->{name}, 
      $line->{comments}, 
      $line->{port}, 
      $html->color_mark($status[ $line->{disable} ], $service_status_colors[ $line->{disable} ]),
      $change, 
      $delete);
  }
  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right' ],
      rows       => [ [ ($conf{IPTV_STALKET_DB}) ? $html->button("Stalker $_EXPORT", "index=$index&stalker_export=1", { BUTTON => 1 }) : '', 
      "$_TOTAL:", $html->b($Iptv->{TOTAL}) ] ]
      
    }
  );
  print $table->show();
}

#*******************************************************************
# online users
#*******************************************************************
sub iptv_online {
  
  use Nas;
  my $nas      = Nas->new($db, \%conf);
  my $sessions = $Iptv;
  my $message;

  if ($FORM{ping}) {
    if ($FORM{ping} =~ /^(\d){1,3}\.(\d){1,3}\.(\d){1,3}\.(\d){1,3}$/) {
      my $res = `$PING -c 5 $FORM{ping}`;
      $html->message('info', $_INFO, "Ping  $FORM{ping}<br>Result:<br><pre>$res</pre>");
    }
    else {
      $html->message('err', $_ERROR, "$ERR_WRONG_DATA");
    }
  }
  elsif ($FORM{hangup}) {
    my ($nas_id, $acct_session_id, $user_name) = split(/ /, $FORM{hangup}, 4);
    $nas->info({ NAS_ID => $nas_id, SECRETKEY => $conf{secretkey} });

    if ($nas->{errno}) {
      $html->message('err', $_NAS, "$nas->{errstr}");
      return 0;
    }

    $nas_port_id = 0;
    require "Abills/nas.pl";
    my $ret = hangup($nas, "$nas_port_id", "", "$acct_session_id");

    if ($ret == 0) {
      my $table = $html->table(
        {
          width   => '100%',
          caption => $_HANGUPED,
          rows    => [ [ "$_NAS ID", $nas_id ], [ "$_NAS IP", $nas->{NAS_IP} ], [ "$_PORT", $nas_port_id ], [ "SESSION_ID", $acct_session_id ], [ "", $ret ] ]
        }
      );

      $message = $table->show();
      sleep 3;

    }
    elsif ($ret == 1) {
      $message = 'NAS NOT supported yet';
    }

    $html->message('info', $_INFO, "$message");
  }
  elsif ($FORM{zap}) {
    my ($nas_id, $acct_session_id) = split(/ /, $FORM{zap}, 3);
    $sessions->zap($nas_id, $acct_session_id);

    if ($sessions->{errno}) {
      $html->message('err', $_ERROR, "[$sessions->{errno}] $err_strs{$sessions->{errno}}");
      return 0;
    }

    $nas->info({ NAS_ID => $nas_id, SECRETKEY => $conf{secretkey} });
    $message = "<table width=100%>
     <tr><th colspan=2 align=left>$_CLOSED</th></tr>
     <tr><td>$_NAS:</td><td>$nas->{NAS_IP} / $nas->{NAS_INDENTIFIER}</td></tr>
     <tr><td>$_PORT:</td><td>$nas_port_id</td></tr>
     <tr><td>SESSION_ID:</td><td>$acct_session_id</td></tr>
     </table>\n";

    $sessions->list(
      {
        ACCT_SESSION_ID => $acct_session_id,
        NAS_ID          => $nas->{NAS_ID}
      }
    );

    if ($sessions->{TOTAL} < 1) {
      $message .= $html->button('add to log', "index=$index&tolog=$acct_session_id&nas_id=$nas_id", { BUTTON => 1 }) . "
         " . $html->button("$_DEL", "index=$index&del=$acct_session_id&nas_id=$nas_id&nas_port_id=$nas_port_id", { BUTTON => 1 });
    }
    else {
      $message = "$_EXIST";
      $sessions->online_del(
        {
          NAS_ID          => $nas_id,
          ACCT_SESSION_ID => $acct_session_id
        }
      );

    }

    $html->message('info', $_INFO, $message);
  }
  elsif ($FORM{tolog}) {
    my $ACCT_INFO = $sessions->online_info(
      {
        NAS_ID          => $FORM{nas_id},
        ACCT_SESSION_ID => $FORM{tolog}
      }
    );

    if ($ACCT_INFO->{TOTAL} < 1) {
      $html->message('err', $_ERROR, "$_NOT_EXIST");
      return 0;
    }

    require Iptv_aaa;
    $ACCT_INFO->{ACCT_STATUS_TYPE} = 'Stop';

    $nas->info(
      {
        NAS_ID    => $ACCT_INFO->{NAS_ID},
        SECRETKEY => $conf{secretkey}
      }
    );

    Iptv_aaa->import();
    my $Acct = Iptv_aaa->new($db, \%conf);
    my $r = $Acct->accounting($ACCT_INFO, $nas, \%conf);

    if ($Acct->{errno}) {
      $html->message('err', $_ERROR, "[$Acct->{errno}] $Acct->{errstr}");
    }
    else {
      my $table = $html->table({ width => '100%' });
      while (my ($k, $v) = each %$ACCT_INFO) {
        $table->addrow($k, $v);
      }
      while (my ($k, $v) = each %$Acct) {
        $table->addrow($k, $v);
      }
      $html->message('info', $_ADDED, $table->show());
    }

    $sessions->online_del(
      {
        NAS_ID          => $ACCT_INFO->{NAS_ID},
        ACCT_SESSION_ID => $ACCT_INFO->{ACCT_SESSION_ID}
      }
    );
  }
  elsif ($FORM{del} || $FORM{dellist}) {
    if ($FORM{dellist}) {
      my @sessions_list = split(/, /, $FORM{dellist});
      $sessions->online_del({ SESSIONS_LIST => \@sessions_list });
      $FORM{del} = $FORM{dellist};
    }
    else {
      $sessions->online_del(
        {
          NAS_ID          => $FORM{nas_id},
          ACCT_SESSION_ID => $FORM{del}
        }
      );
    }

    if (!$sessions->{errno}) {
      my $table = $html->table(
        {
          width => '100%',
          rows  => [ [ "NAS_ID", $FORM{nas_id} ], [ "ACCT_SESSION_ID", $FORM{del} ] ]
        }
      );

      $html->message('info', $_DELETED, $table->show());
    }

  }

  $form_link = '';
  my $cure = '';

  if ($FORM{ZAPED}) {
    $LIST_PARAMS{ZAPED} = '1';
    $form_link = $html->button('On line', "index=$index", { BUTTON => 1 });
    $cure = 'Zap';
  }
  else {
    #$sessions->online({ ZAPED => 1 });
    #$form_link = $html->button($_ZAPED, "index=$index&ZAPED=1", { BUTTON => 1 }) . " ($sessions->{TOTAL})";
    $cure = 'Online';
  }
  %LIST_PARAMS =  ( %LIST_PARAMS,
  	                   LOGIN         => '_SHOW',
  	                   FIO           => '_SHOW',
  	                   STARTED       => '_SHOW',
  	                   DURATION      => '_SHOW',
  	                   CLIENT_IP     => '_SHOW',
  	                   TP_NAME       => '_SHOW',
  	                   ONLINE_BASE   => '_SHOW',
                   );

  my $dub_ports  = $sessions->{dub_ports};
  my $dub_logins = $sessions->{dub_logins};

  my ($table, $list) = result_former({
     INPUT_DATA      => $sessions,
     FUNCTION        => 'online',
     BASE_FIELDS     => 1,
     FUNCTION_FIELDS => 'iptv_ping, iptv_zap, iptv_hangup',
     EXT_TITLES      => {
       'ip'          => 'IP',
       'netmask'     => 'NETMASK',
       'speed'       => $_SPEED,
       'port'        => $_PORT,
       'CID'         => 'CID',
       'filter_id'   => 'Filter ID',
       'tp_name'     => "$_TARIF_PLAN",
       'dv_status'   => "$_STATUS",
       'started',    => $_START,
       'duration'       => $_DURATION, 
       'acct_session_id'=> "ACCT_SESSION_ID",
       'last_alive'     => "Last alive",
         },
     TABLE           => {
       width      => '100%',
       caption    => "$cure",
       border     => 1,
       qs         => $pages_qs,
       ID         => 'IPTV_ONLINE',
       EXPORT     => 1,
     },
#     MAKE_ROWS    => 1,
#     TOTAL        => 1
    });

  my $bg;
  my $online = $sessions->{nas_sorted};
  my $nas_list = $nas->list({ COLS_NAME => 1 });

  foreach my $nas_row (( 0 )) {
    $nas_row->{nas_id} = 0;
    next if (!defined($online->{ $nas_row->{nas_id} }));

    $table->{rowcolor} = $_COLORS[0];
    $table->{extra}    = "colspan=". (1+$sessions->{SEARCH_FIELDS_COUNT}) ." class=\"small\"";
    $table->addrow("$nas_row->{nas_id}:". $html->b($nas_row->{nas_name}). ":$nas_row->{nas_type}");

    my $online_users = $online->{ $nas_row->{nas_id} };
    foreach my $line (@$online_users) {
      my @fields_array = ();
      for (my $i = 0; $i < 1+$sessions->{SEARCH_FIELDS_COUNT}; $i++) {
        if ($conf{EXT_BILL_ACCOUNT} && $sessions->{COL_NAMES_ARR}->[$i] eq 'ext_bill_deposit') {
          $line->{ext_bill_deposit} = ($line->{ext_bill_deposit} < 0) ? $html->color_mark($line->{ext_bill_deposit}, $_COLORS[6]) : $line->{ext_bill_deposit};
        }
        elsif ($sessions->{COL_NAMES_ARR}->[$i] eq 'deleted') {
          $line->{deleted} = $html->color_mark($bool_vals[ $line->{deleted} ], ($line->{deleted} == 1) ? $state_colors[ $line->{deleted} ] : '');
        }
        elsif ($sessions->{COL_NAMES_ARR}->[$i] eq 'login') {
          $line->{login} = user_ext_menu($line->{uid}, $line->{login});
        }

        if ($FORM{UNIVERSAL_SEARCH}) {
          $line->{$users->{COL_NAMES_ARR}->[$i]} =~ s/(.*)$FORM{UNIVERSAL_SEARCH}(.*)/$1$search_color_mark$2/;
        }

        push @fields_array, $line->{$sessions->{COL_NAMES_ARR}->[$i]};
      }

      undef($table->{rowcolor});
      undef($table->{extra});
      if (defined($dub_logins->{ $line->{login} })) { 
      	$bg = '#FFFF00'; 
      }
      elsif ($line->{status} == 3) { 
      	$bg = '#FF0000'; 
      }
      else { 
      	$bg = ($bg eq $_COLORS[1]) ? $_COLORS[2] : $_COLORS[1]; 
      }

      $table->addrow(@fields_array,
        $html->button('P', "index=$index&ping=$line->{client_ip}", { TITLE => 'Ping', BUTTON => 1 }), 
        $html->button('Z', "index=$index&zap=$nas_row->[0]+$line->{acct_session_id}", { TITLE => 'Zap', BUTTON => 1 }),
        ($FORM{ZAPED}) ? $html->form_input('dellist', "$line->{acct_session_id}", { TYPE => 'checkbox', { BUTTON => 1 } }) : $html->button('H', "index=$index&hangup=$nas_row->[0]+$line->{acct_session_id}", { TITLE => 'Hangup', BUTTON => 1 })
        );
    }
  }

  my $table2 = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right', 'right' ],
      rows       => [ [ "$_TOTAL:", $html->b($sessions->{TOTAL}), "$form_link" ] ]
    }
  );

  my $total  = $table2->show();
  my $output = $total . $table->show();

  $table = $html->table(
    {
      width       => '100%',
      title_plain => [ "$_REFRESH (sec): " . $html->form_input('REFRESH', int(($FORM{REFRESH}) ? $FORM{REFRESH} : 0), { SIZE => 4 }), $html->form_input('SHOW', $_SHOW, { TYPE => 'SUBMIT' }) ],
      cols_align => [ 'center:noprint', 'center:noprint' ],
    }
  );

  if ($FORM{ZAPED}) {
    $output = $html->form_main(
      {
        CONTENT => $output,
        HIDDEN  => {
          index => "$index",
          ZAPED => 1
        },
        SUBMIT => { go => "$_DEL" },
        METHOD => 'GET'
      }
    );
  }
  else {
    $output .= $html->form_main(
      {
        CONTENT => $table->show(),
        HIDDEN  => { index => "$index" },
        METHOD  => 'GET'
      }
    );

    $output .= $html->button('Zap All', "index=$index&zapall=1", { MESSAGE => "Do you realy want zap all sessions ?", BUTTON => 1 });
  }

  print $output;

}

#**********************************************************
# iptv_use_all_monthes();
#**********************************************************
sub iptv_use_allmonthes {

  $FORM{allmonthes} = 1;
  iptv_use();
}

#**********************************************************
# iptv_use();
#**********************************************************
sub iptv_use {
  reports(
    {
      DATE   => $FORM{DATE},
      REPORT => ''
    }
  );

  my ($tables_sessions, $table_Fees);

  #Day reposrt
  if (defined($FORM{DATE})) {

    #Used Fraffic
    $table_sessions = $html->table(
      {
        width      => '100%',
        caption    => "$_SESSIONS",
        title      => [ "$_DATE", "$_USERS", "$_SESSIONS", $_DURATION, $_SUM ],
        cols_align => [ 'right', 'left', 'right', 'right', 'right' ],
        qs         => $pages_qs
      }
    );

    my $list = $sessions->reports({%LIST_PARAMS});
    foreach my $line (@$list) {
      $table_sessions->addrow($html->b($line->[0]), $html->button("$line->[1]", "index=11&subf=22&UID=$line->[5]&DATE=$line->[0]"), $line->[2], $line->[3], $html->b($line->[4]));
    }

  }
  else {

    #Used Traffic
    $table_sessions = $html->table(
      {
        width      => '100%',
        caption    => "$_SESSIONS",
        title      => [ "$_DATE", "$_USERS", "$_SESSIONS", $_DURATION, $_SUM ],
        cols_align => [ 'right', 'right', 'right', 'right', 'right' ],
        qs         => $pages_qs
      }
    );

    my $list = $sessions->reports({%LIST_PARAMS});
    foreach my $line (@$list) {
      $table_sessions->addrow($html->button($line->[0], "index=$index&$type=$line->[0]$pages_qs"), $line->[1], $line->[2], $line->[3], $html->b($line->[4]));
    }

  }

  $table = $html->table(
    {
      width      => '100%',
      caption    => $_SESSIONS,
      cols_align => [ 'right', 'right', 'right', 'right', 'right', 'right' ],
      rows => [ [ "$_USERS: " . $html->b($sessions->{USERS}), "$_SESSIONS: " . $html->b($sessions->{SESSIONS}), "$_DURATION: " . $html->b($sessions->{DURATION}), "$_SUM: " . $html->b($sessions->{SUM}) ] ],
      rowcolor => $_COLORS[2]
    }
  );

  print $table_sessions->show() . $table->show();

}

#**********************************************************
# dv_error
#**********************************************************
sub iptv_error {
  my ($attr) = @_;
  my $PAGE_ROWS = 100;
  $conf{LOGFILE} = "/usr/abills/var/log/abills.iptv";
  my $login = '';

  if ($attr->{USER_INFO}) {
    my $user = $attr->{USER_INFO};
    $login = $user->{LOGIN};
  }
  elsif ($FORM{LOGIN_EXPR}) {
    $login = $FORM{LOGIN_EXPR};
    $pages_qs .= "&LOGIN_EXPR=$FORM{LOGIN_EXPR}";
  }
  elsif ($FORM{UID}) {
    iptv_users();
    return 0;
  }

  if (!-f $conf{LOGFILE}) {
    $html->message('info', $_INFO, "'$conf{LOGFILE}' $_NOT_EXIST");
    return 0;
  }

  if (defined($FORM{LOG_TYPE})) {
    $pages_qs .= "&LOG_TYPE=$FORM{LOG_TYPE}";
  }

  my ($list, $types, $totals) = show_log(
    "$login",
    "$conf{LOGFILE}",
    {
      DATE      => $FORM{DATE},
      LOG_TYPE  => $FORM{LOG_TYPE},
      PG        => $PG,
      PAGE_ROWS => $PAGE_ROWS
    }
  );

  print $html->form_main(
    {
      CONTENT => "$_LOGIN: " . $html->form_input('LOGIN_EXPR', "$FORM{LOGIN_EXPR}"),
      HIDDEN  => {
        sid   => "$sid",
        index => "$index",
        UID   => "$UID"
      },
      SUBMIT => { show => "$_SHOW" }

    }
  );

  my $table = $html->table(
    {
      caption => "$_LOG",
      width   => '100%',
      pages   => $totals,
      qs      => $pages_qs
    }
  );

  foreach my $line (@$list) {
    if ($line =~ m/LOG_WARNING/i) {
      $line = "<font color='#FF0000'>$line</font>";
    }

    #  if ($line =~ m/LOG_WARNING/i) {
    #    $table->{rowcolor}='#FF0000';
    #   }
    #  else {
    #    $table->{rowcolor}=undef;
    #   }

    $table->addrow($line);
  }
  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right' ]
    }
  );

  $table->addrow($html->button("$_TOTAL", "index=$index&$pages_qs"), $totals);
  while (my ($k, $v) = each %$types) {
    $table->addrow($html->button($k, "index=$index&LOG_TYPE=$k$pages_qs"), $v);
  }
  print $table->show();

}

#**********************************************************
# iptv_user_info
#**********************************************************
sub iptv_user_info {
  if ($conf{IPTV_ALLOW_GIDS}) {
    $conf{IPTV_ALLOW_GIDS} =~ s/ //g;
    my @allow_arr = split(/,/, $conf{IPTV_ALLOW_GIDS});

    if (!in_array($user->{GID}, \@allow_arr)) {
      $html->message('info', $_INFO, "$_NOT_ALLOW_GROUP");
      return 0;
    }
  }

  my $user = $Iptv->user_info($LIST_PARAMS{UID});

  if ($user->{TOTAL} < 1) {
    $html->message('info', $_INFO, "$_NOT_ACTIVE");
    return 0;
  }

  if ($conf{IPTV_USER_CHG_TP}) {
    $Iptv->{TP_CHANGE} = $html->button("$_CHANGE", 'index=' . get_function_index('iptv_user_chg_tp') . '&sid=' . $sid, { BUTTON => 1 });
  }

  $Iptv->{DISABLE} = $html->color_mark($service_status[ $Iptv->{STATUS} ], $service_status_colors[ $Iptv->{STATUS} ]),
  $html->tpl_show(_include('iptv_user_info', 'Iptv'), $Iptv);

  iptv_user_channels({ USER_INFO => $user });
}

#**********************************************************
# dv_user_info
#**********************************************************
sub iptv_user_chg_tp {
  my ($attr) = @_;

  # my $user;
  my $shedule = Shedule->new($db, $admin, \%conf);
  my $period = $FORM{period} || 0;

  if (!$conf{IPTV_USER_CHG_TP}) {
    $html->message('err', $_ERROR, "$_NOT_ALLOW");
    return 0;
  }

  if ($LIST_PARAMS{UID}) {
    $Iptv = $Iptv->user_info($LIST_PARAMS{UID});
    if ($Iptv->{TOTAL} < 1) {
      $html->message('info', $_INFO, "$_NOT_ACTIVE /");
      return 0;
    }
  }
  else {
    $html->message('err', $_ERROR, "$_USER_NOT_EXIST");
    return 0;
  }

  #Get TP groups
  $Tariffs->tp_group_info($Iptv->{TP_GID});

  if (!$Tariffs->{USER_CHG_TP}) {
    $html->message('err', $_ERROR, "$_NOT_ALLOW");
    return 0;
  }

  if ($Iptv->{TP_ID} == $FORM{TP_ID}) {

  }
  elsif ($FORM{change}) {
    if ($period == 1 && $conf{IPTV_USER_CHG_TP_SHEDULE}) {

      my $seltime = mktime(0, 0, 0, $FORM{date_D}, $FORM{date_M}, ($FORM{date_Y} - 1900));

      if ($seltime <= time()) {
        $html->message('info', $_INFO, "$ERR_WRONG_DATA");
        return 0;
      }

      $FORM{date_M}++;
      $shedule->add(
        {
          UID      => $LIST_PARAMS{UID},
          TYPE     => 'tp',
          ACTION   => $FORM{TP_ID},
          D        => sprintf("%02.d", $FORM{date_D}),
          M        => sprintf("%02.d", $FORM{date_M}),
          Y        => $FORM{date_Y},
          DESCRIBE => "$message<br>
                   $_FROM: '$FORM{date_Y}-$FORM{date_M}-$FORM{date_D}'",
          MODULE => 'Iptv'
        }
      );

      if ($shedule->{errno}) {
        $html->message('err', $_ERROR, "[$shedule->{errno}] $err_strs{$shedule->{errno}}");
      }
      else {
        $html->message('info', $_CHANGED, "$_CHANGED");
        $Iptv->user_info($user->{UID});
        iptv_user_channels({ QUIET => 1, USER_INFO => $Iptv });
      }
    }
    else {

      # Get next month
      my $Y;
      my $M;
      my $D;

      if ($user->{ACTIVATE} eq '0000-00-00') {

        # Get next month
        ($Y, $M, $D) = split(/-/, $DATE, 3);
        $D = '01';
      }
      else {
        ($Y, $M, $D) = split(/-/, $user->{ACTIVATE}, 3);
      }

      $M++;
      if ($M == 13) {
        $M = 1;
        $Y++;
      }
      $M = sprintf("%02.d", $M);

      my $seltime = mktime(0, 0, 0, $D, $M, ($Y - 1900));

      if ($seltime > time()) {
        $shedule->add(
          {
            UID      => $LIST_PARAMS{UID},
            TYPE     => 'tp',
            ACTION   => $FORM{TP_ID},
            D        => $D,
            M        => $M,
            Y        => $Y,
            DESCRIBE => "$message<br>
                   $_FROM: '$Y-$M-$D'",
            MODULE => 'Iptv'
          }
        );
      }
      else {
        $FORM{UID} = $LIST_PARAMS{UID};
        $Iptv->change({%FORM});

        if ($user->{errno}) {
          $html->message('err', $_ERROR, "[$Iptv->{errno}] $err_strs{$Iptv->{errno}}");
        }
        else {
          if ($Iptv->{TP_INFO}->{MONTH_FEE} > 0 && !$Iptv->{STATUS}) {
            service_get_month_fee($Iptv, { SERVICE_NAME => "$_TV" });
          }

          $html->message('info', $_CHANGED, "$_CHANGED");
          $Iptv->user_info($user->{UID});
        }
      }
    }

  }
  elsif ($FORM{del}) {
    $shedule->del(
      {
        UID => $LIST_PARAMS{UID},
        ID  => $FORM{SHEDULE_ID}
      }
    );

    $html->message('info', $_DELETED, "$_DELETED [$FORM{SHEDULE_ID}]");
  }

  $shedule->info(
    {
      UID      => $user->{UID},
      TYPE     => 'tp',
      DESCRIBE => "$message\n$_FROM: '$FORM{date_y}-$FORM{date_m}-$FORM{date_d}'",
      MODULE   => 'Iptv'
    }
  );

  if ($shedule->{TOTAL} > 0) {
    $Tariffs->info($shedule->{ACTION});

    $table = $html->table(
      {
        width      => '100%',
        caption    => "$_SHEDULE",
        cols_align => [ 'left', 'left' ],
        rows       => [ [ "$_TARIF_PLAN:", "$shedule->{ACTION} : $Tariffs->{NAME}" ], [ "$_DATE:", "$shedule->{Y}-$shedule->{M}-$shedule->{D}" ], [ "$_ADDED:", "$shedule->{DATE}" ], [ "ID:", "$shedule->{SHEDULE_ID}" ] ]
      }
    );
    $Tariffs->{TARIF_PLAN_SEL} = $table->show({ OUTPUT2RETURN => 1 }) . $html->form_input('SHEDULE_ID', "$shedule->{SHEDULE_ID}", { TYPE => 'HIDDEN', OUTPUT2RETURN => 1 });
    $Tariffs->{ACTION}         = 'del';
    $Tariffs->{LNG_ACTION}     = $_DEL;
  }
  else {
    $Tariffs->{TARIF_PLAN_SEL} = $html->form_select(
      'TP_ID',
      {
        SELECTED          => $Iptv->{TP_ID},
        SEL_MULTI_ARRAY   => $Tariffs->list({ TP_GID => $Iptv->{TP_GID}, MODULE => 'Iptv' }),
        MULTI_ARRAY_KEY   => 0,
        MULTI_ARRAY_VALUE => 1,
      }
    );

    $Tariffs->{PARAMS} .= form_period($period) if ($conf{IPTV_USER_CHG_TP_SHEDULE} && !$conf{IPTV_USER_CHG_TP_NPERIOD});
    $Tariffs->{ACTION}     = 'set';
    $Tariffs->{LNG_ACTION} = $_CHANGE;
  }

  $Tariffs->{UID}     = $attr->{USER_INFO}->{UID};
  $Tariffs->{m}       = $m;
  $Tariffs->{TP_ID}   = $Iptv->{TP_ID};
  $Tariffs->{TP_NAME} = "$Iptv->{TP_ID}:$Iptv->{TP_NAME}";

  $html->tpl_show(templates('form_chg_tp'), $Tariffs);
}

#**********************************************************
# iptv_user_routes
#**********************************************************
sub iptv_user_channels {
  my ($attr) = @_;

  my $Iptv;

  if ($attr->{USER_INFO}) {
    $Iptv = $attr->{USER_INFO};
  }
  else {
    $Iptv->user_info($LIST_PARAMS{UID});
  }

  my $list = $Tariffs->ti_list({ TP_ID => $Iptv->{TP_ID}, COLS_NAME => 1 });
  my @interval_ids = ();

  if ($Tariffs->{TOTAL} < 1) {
    #$html->message('info', $_INFO, "$_INTERVALS $_NOT_EXIST", { ID => '404' }) if (!$attr->{QUIET});
    return 0;
  }

  my $intervals             = $Tariffs->{TOTAL};
  $LIST_PARAMS{INTERVAL_ID} = $list->[0]->{id};
  $LIST_PARAMS{DISABLE}     = 0;

  #Active channels
  my %select_channels       = ();

  $list = $Iptv->user_channels_list(
    {
      TP_ID     => $Iptv->{TP_ID},
      UID       => $Iptv->{UID},
      PAGE_ROWS => 10000,
      COLS_NAME => 1
    }
  );
  foreach my $line (@$list) {
    $select_channels{ $line->{channel_id} } = $line->{changed};
  }

  my @mandatory_arr = ();

  #LIst channels
  $list = $Iptv->channel_ti_list({ %LIST_PARAMS, MANDATORY => 1, COLS_NAME => 1 });

  foreach my $line (@$list) {
    if (($FORM{add} || $FORM{change}) && $FORM{change_now}) {
      if (($users->{CREDIT} + $users->{DEPOSIT}) > $line->{month_price} || $Iptv->{PEYMENT_TYPE}) {
        $Iptv->{TP_INFO}->{PERIOD_ALIGNMENT} = $Iptv->{PERIOD_ALIGNMENT} || 0;
        $Iptv->{TP_INFO}->{MONTH_FEE}        = $line->{month_price};
        $Iptv->{TP_INFO}->{DAY_FEE}          = $line->{day_price};
        $Iptv->{TP_INFO}->{TP_ID}            = $Iptv->{TP_ID};

        my %PARAMS = (
          DESCRIBE => "$_TV: $_DAY_FEE",
          METHOD   => 1
        );

        if ($Iptv->{TP_INFO}->{MONTH_FEE} > 0) {
          $Iptv->{ACCOUNT_ACTIVATE} = $users->{ACTIVATE};
          service_get_month_fee($Iptv, { EXT_DESCRIBE => " $_CHANNEL: $line->{channel_num}", 
          	                             SERVICE_NAME => "$_TV",
          	                             QUIET        => 1 
          	                           });
        }
        else {
          $Fees->take($users, $Iptv->{TP_INFO}->{DAY_FEE}, {%PARAMS});
        }

        push @mandatory_arr, $line->{channel_id};
      }
      else {
        $html->message('err', $_ERROR, "$ERR_SMALL_DEPOSIT") if (!$attr->{QUIET});
      }
    }
    else {
      push @mandatory_arr, $line->{channel_id};
    }
  }
    
  my $Shedule = Shedule->new($db, $admin, \%conf);
  if ($FORM{change}) {
    $FORM{IDS} =~ s/, /;/g;

    #Add to shedule
    my ($Y, $M, $D) = split(/-/, $DATE);
    $D = '01';
    $M = $M + 1;
    if ($M > 12) {
      $M = '01';
      $Y = $Y + 1;
    }
    $M = sprintf("%.2d", $M);

    $Shedule->add(
      {
        UID      => $Iptv->{UID},
        TYPE     => 'channels',
        ACTION   => "$FORM{IDS}",
        D        => $D,
        M        => $M,
        Y        => $Y,
        DESCRIBE => "
                   $_FROM: '$Y-$M-$D'",
        MODULE => 'Iptv'
      }
    );

    if ($Shedule->{errno}) {
      if ($Shedule->{errno} == 7) {
        $html->message('err', "$_ERROR : $_SHEDULE", "$_EXIST");
      }
      else {
        $html->message('err', $_ERROR, "[$Shedule->{errno}] $err_strs{$Shedule->{errno}}") if (!$attr->{QUIET});
      }
    }
    else {
      $html->message('info', $_INFO, "$_CHANGED") if (!$attr->{QUIET});
    }
  }
  elsif ($FORM{change_now}) {
    #===============
    my @new_arr  = ();
    my @ids_arr  = split(/, /, $FORM{IDS});
    my %ids_hash = ();
    my @add_arr  = ();

    foreach my $k (@ids_arr) {
      $ids_hash{$k} = 1;
    }

    $users = $user if ($user->{UID});

    foreach my $channel (keys %select_channels) {
      #Tarif exists
      if ($ids_hash{$channel}) {
        delete $ids_hash{$channel};
        #Add new tarif
        push @add_arr, $channel;
      }
    }

    @new_arr = keys %ids_hash;
    if ($#new_arr > -1) {
      my $list = $Iptv->channel_ti_list({ %LIST_PARAMS, COLS_NAME => 1, IDS => join('; ', @new_arr) });
      foreach my $line (@$list) {
        if (($users->{CREDIT} + $users->{DEPOSIT}) > $line->{month_price} || $Iptv->{PEYMENT_TYPE}) {
          $Iptv->{TP_INFO}->{PERIOD_ALIGNMENT} = $Iptv->{PERIOD_ALIGNMENT} || 0;
          $Iptv->{TP_INFO}->{MONTH_FEE}        = $line->{month_price};
          $Iptv->{TP_INFO}->{DAY_FEE}          = $line->{day_price};
          $Iptv->{TP_INFO}->{TP_ID}            = $Iptv->{TP_ID};

          my %PARAMS = (
            DESCRIBE => "$_TV: $_DAY_FEE",
            METHOD   => 1
          );

          if ($Iptv->{TP_INFO}->{MONTH_FEE} > 0) {
            $Iptv->{ACCOUNT_ACTIVATE} = $users->{ACTIVATE};
            service_get_month_fee($Iptv, { EXT_DESCRIBE => " $_CHANNEL: $line->[1]",
            	                             SERVICE_NAME => "$_TV" });
          }
          else {
            $Fees->take($users, $Iptv->{TP_INFO}->{DAY_FEE}, {%PARAMS});
          }

          $select_channels{ $line->{channel_id} } = '1';
          push @add_arr, $line->{channel_id};
        }
        else {
          $html->message('err', $_ERROR, "$ERR_SMALL_DEPOSIT") if (!$attr->{QUIET});
        }
      }
    }

    delete $FORM{IDS};
    push @add_arr, @mandatory_arr;
    $Iptv->user_channels(
      {
        UID   => $Iptv->{UID},
        TP_ID => $Iptv->{TP_ID},
        IDS   => join(', ', @add_arr)
      }
    );

    if (!$Iptv->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED") if (!$attr->{QUIET});
      if ($conf{IPTV_DVCRYPT_FILENAME}) {
        iptv_crypt();
      }
    }
    else {
      $html->message('err', $_ERROR, "[$Iptv->{errno}] $err_strs{$Iptv->{errno}}") if (!$attr->{QUIET});
    }
  }
  elsif ($FORM{del_shedule}) {
    $Shedule->del({ ID => $FORM{SHEDULE_ID} });

    if (!$Shedule->{errno}) {
      $html->message('info', "$_INFO : $_SHEDULE", "$_SHEDULE $_DELETED") if (!$attr->{QUIET});
      $Shedule->{Y} = undef;
    }

  }

  if ($attr->{QUIET}) {
    return 0;
  }

  if ($Iptv->{errno}) {
    $html->message('err', $_ERROR, "[$Iptv->{errno}] $err_strs{$Iptv->{errno}}") if (!$attr->{QUIET});
  }

  $Shedule->info(
    {
      UID    => $Iptv->{UID},
      TYPE   => 'channels',
      MODULE => 'Iptv'
    }
  );

  my %shedule = ();

  if ($Shedule->{TOTAL} > 0) {
    $Shedule->{EXEC_DATE} = "$Shedule->{Y}-$Shedule->{M}-$Shedule->{D}";
    my @shedule_channels_arr = split(/;/, $Shedule->{ACTION});
    foreach my $channel_id (@shedule_channels_arr) {
      $shedule{$channel_id} = "$Shedule->{Y}-$Shedule->{M}-$Shedule->{D}";
    }
  }

  %select_channels = ();
  $list            = $Iptv->user_channels_list(
    {
      TP_ID     => $Iptv->{TP_ID},
      UID       => $Iptv->{UID},
      COLS_NAME => 1
    }
  );
  foreach my $line (@$list) {
    $select_channels{ $line->{channel_id} } = $line->{changed};
  }

  $list = $Iptv->channel_ti_list({%LIST_PARAMS, COLS_NAME => 1});

  my $table = $html->table(
    {
      width      => '100%',
      caption    => $_CHANNELS,
      border     => 1,
      title      => [ '#', $_NUM, $_NAME, $_DESCRIBE, "$_MONTH $_PRICE", "$_DAY $_PRICE", "$_MANDATORY", "$_PORT" ],
      cols_align => [ 'right', 'left', 'left', 'right' ],
      qs         => $pages_qs,
      pages      => $Iptv->{TOTAL},
      ID         => 'IPTV_CHANNELS',
      EXPORT     => 1
    }
  );

  foreach my $line (@$list) {
    my $status = '';

    if ($conf{IPTV_USER_CHG_CHANNELS}) {

      $status = ($select_channels{ $line->{channel_id} }) ? $html->b($status[0]) . ' ' : $html->b($status[1]) . ' ';

      if ($Shedule->{Y} && !$line->{mandatory}) {
        if ($shedule{ $line->{channel_id} }) {
          $status .= "/ $_ENABLE $_FROM: $shedule{$line->{channel_id}}";
        }
        else {
          $status .= "/ $_DISABLE $_FROM: $Shedule->{EXEC_DATE}";
        }
      }
      else {
        if (!$line->{mandatory}) {
          $status .= $html->form_input(
            'IDS',
            "$line->{channel_id}",
            {
              TYPE          => 'checkbox',
              STATE         => (($select_channels{ $line->{channel_id} }) ? 1 : undef),
              OUTPUT2RETURN => 1
            }
          );
        }
      }
    }
    else {
      $status = $status[ $line->{mandatory} ];
    }

    $table->addrow(
      $status,
      $line->{channel_num},
      $line->{name},
      $line->{comments},
      $line->{month_price} || '0.00',
      $line->{day_price} || '0.00',
      ($line->{mandatory}) ? $_MANDATORY : '',
      $line->{port}
    );
  }

  if ($conf{IPTV_USER_CHG_CHANNELS}) {
    my %submit_h = (change => "$_ADD $_SHEDULE");
    if ($Shedule->{Y}) {
      %submit_h = (del_shedule => "$_DEL $_SHEDULE");
    }

    #elsif($users->{UID}) {
    $submit_h{change_now} = "$_CHANGE $_NOW";

    # }

    print $html->form_main(
      {
        CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
        HIDDEN  => {
          UID        => "$users->{UID}",
          TP_ID      => "$users->{TP_ID}",
          index      => "$index",
          SHEDULE_ID => $Shedule->{SHEDULE_ID}
        },
        SUBMIT => \%submit_h
      }
    );

  }
  else {
    print $table->show();
  }

}

#**********************************************************
# daily_Fees
#**********************************************************
sub iptv_daily_fees {
  my ($attr) = @_;

  my $debug        = $attr->{DEBUG} || 0;
  my $debug_output = '';
  my $DOMAIN_ID    = $attr->{DOMAIN_ID} || 0;

  if ($attr->{USERS_WARNINGS_TEST}) {
    return $debug_output;
  }
  require Tariffs;
  Tariffs->import();
  my $Tariffs = Tariffs->new($db, $conf, $admin);
  my $list = $Tariffs->list({ %LIST_PARAMS, 
  	                          TP_NAME => '_SHOW',
  	                          MODULE  => 'Iptv' 
  	                        });

  foreach my $tp (@$list) {
    if ($tp->{daily_fee} > 0) {

      my $ulist = $Iptv->user_list(
        {
          ACTIVATE     => "<=$ADMIN_REPORT{DATE}",
          EXPIRE       => "0000-00-00,>$ADMIN_REPORT{DATE}",
          DISABLE      => '0',
          DEPOSIT      => '_SHOW',
          DEPOSIT      => '_CREDIT',
          BILL_ID      => '_SHOW',
          TP           => $tp->{tp_id},
          COLS_NAME    => 1
        }
      );

      foreach my $u (@$ulist) {
        my %user = (
          UID        => $u->{uid},
          BILL_ID    => $u->{bill_id}
        );

        my %PARAMS = (
              DESCRIBE => "Tv: $_DAY_FEE_SHORT $tp->{name} ($tp->{tp_id})",
              DATE     => "$ADMIN_REPORT{DATE} $TIME",
              METHOD   => ($tp->{fees_method}) ? $tp->{fees_method} : 1
        );

        if ($tp->{payments_type} || $u->{deposit} + $u->{credit} > 0) {
          $Fees->take(\%user, $tp->{daily_fee}, \%PARAMS );
        }
      }
    }
  }
}

#**********************************************************
# monthly_Fees
#**********************************************************
sub iptv_monthly_fees {
  my ($attr) = @_;

  my $debug         = $attr->{DEBUG} || 0;
  my $debug_output  = '';
  $debug_output    .= "Iptv - Monthly periodic payments\n" if ($debug > 1);
  my $START_PERIOD_DAY = ($conf{START_PERIOD_DAY}) ? $conf{START_PERIOD_DAY} : 1;

  use Users;

  $LIST_PARAMS{TP_ID}       = $attr->{TP_ID} if ($attr->{TP_ID});
  my %USERS_LIST_PARAMS     = ();
  $USERS_LIST_PARAMS{LOGIN} = $attr->{LOGIN} if ($attr->{LOGIN});
  $USERS_LIST_PARAMS{EXT_BILL} = 1 if ($conf{BONUS_EXT_FUNCTIONS});

  my $users = Users->new($db, $admin, \%conf);

  #close period Fees
  if ($conf{IPTV_CLOSE_PERIOD}) {
    $users->config_info({ PARAM => 'IPTV_CLOSED_PERIOD' });
    if ($users->{VALUE} ne '1') {
      $debug_output .= "Period not closed\n" if ($debug > 1);
      $DEBUG .= $debug_output;
      return $debug_output;
    }
  }

  $Tariffs->{debug} = 1 if ($debug > 6);
  my $list = $Tariffs->list({ %LIST_PARAMS, MODULE => 'Iptv', COLS_NAME => 1 });
  $ADMIN_REPORT{DATE} = $DATE if (!$ADMIN_REPORT{DATE});
  my ($y, $m, $d) = split(/-/, $ADMIN_REPORT{DATE}, 3);
  $m--;

  if ($d != 1) {
    $debug_output .= "Period not closed\n" if ($debug > 1);
    $DEBUG .= $debug_output;
    return $debug_output;
  }

  my $date_unixtime = mktime(0, 0, 0, $d, $m, $y - 1900, 0, 0, 0);

  #Get Preview month begin end
  if ($m == 0) {
    $m = 12;
    $y--;
  }
  $m = sprintf("%02.d", $m);
  my $days_in_month = ($m != 2 ? (($m % 2) ^ ($m > 7)) + 30 : (!($y % 400) || !($y % 4) && ($y % 25) ? 29 : 28));

  my $pre_month_begin = "$y-$m-01";
  my $pre_month_end   = "$y-$m-$days_in_month";

  foreach my $tp (@$list) {
    my $TP_ID       = $tp->{tp_id};
    my $min_use     = $tp->{min_use};
    my $postpaid    = $tp->{payment_type};
    my $tp_postpaid = $tp->{postpaid_monthly_fee};
    my $month_fee   = $tp->{month_fee};
    my $TP_NUM      = $tp->{id};

    my %used_traffic = ();

    #Monthfee & min use
    if ($month_fee > 0 || $min_use > 0) {
      $debug_output .= "TP ID: $TP_NUM MF: $month_fee POSTPAID: $postpaid REDUCTION: $tp->{reduction_fee} EXT_BILL_ID: $tp->{ext_bill_account} CREDIT: $tp->{credit} MIN_USE: $min_use\n" if ($debug > 1);

      $Iptv->{debug} = 1 if ($debug > 6);
      my $ulist = $Iptv->user_list(
        {
          ACTIVATE     => "<=$ADMIN_REPORT{DATE}",
          EXPIRE       => "0000-00-00,>$ADMIN_REPORT{DATE}",
          STATUS       => 0,
          LOGIN_STATUS => 0,
          SERVICE_STATUS=> '_SHOW',
          DEPOSIT      => '_SHOW',
          CREDIT       => '_SHOW',
          BILL_ID      => '_SHOW',
          REDUCTION    => '_SHOW',
          TP_ID        => $TP_ID,
          SORT         => 1,
          PAGE_ROWS    => 1000000,
          COLS_NAME    => 1,
          %USERS_LIST_PARAMS
        }
      );

      foreach my $u (@$ulist) {
        $debug_output .= " Login: $u->{login} ($u->{uid})  TP_ID: $u->{tp_id} Fees: $tp->{month_fee} REDUCTION: $u->{reduction}  $u->{deposit} $u->{credit}\n" if ($debug > 3);
        my %user = (
          LOGIN     => $u->{login},
          UID       => $u->{uid},
          BILL_ID   => ($tp->{ext_bill_account} > 0) ? $u->{ext_bill_id} : $u->{bill_id},
          REDUCTION => $u->{reduction},
          ACTIVATE  => $u->{activate},
          DEPOSIT   => $u->{deposit},
          CREDIT    => ($u->{credit} > 0) ? $u->{credit} : $tp->{credit}
        );

        #Check bill ID and deposit
        if (($user{BILL_ID} && $user{BILL_ID} > 0) &&  defined($user{DEPOSIT})) {
          my %FEES_PARAMS = (
            DATE   => $ADMIN_REPORT{DATE},
            METHOD => 1
          );

          my $sum = 0;
          #Min use
          if ($min_use > 0 && $d == $START_PERIOD_DAY) {

          }
          #Month Fee
          else {
            #Make sum
            $sum = $month_fee;

            if ($tp->{reduction_fee} == 1 && $user{REDUCTION} > 0) {
              $sum = $sum * (100 - $user{REDUCTION}) / 100;
            }

            #If deposit is above-zero or TARIF PALIN is POST PAID or PERIODIC PAYMENTS is POSTPAID
            if ($postpaid == 1 || $user{DEPOSIT} + $user{CREDIT} > 0 || $tp_postpaid == 1) {

              #take Fees in first day of month
              $FEES_PARAMS{DESCRIBE} = "$_MONTH_FEE ($_TV/$TP_ID)";

              if (($user{ACTIVATE} eq '0000-00-00' and $d == $START_PERIOD_DAY) || $conf{IPTV_CLOSE_PERIOD}) {
                if ($debug > 4) {
                  $debug_output .= " UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
                }
                else {
                  $Fees->take(\%user, $sum, {%FEES_PARAMS});
                  $debug_output .= " $user{LOGIN}  UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n" if ($debug > 0);
                }
              }

              # If activation set to monthly Fees taken throught 30 days
              elsif ($user{ACTIVATE} ne '0000-00-00') {
                my ($activate_y, $activate_m, $activate_d) = split(/-/, $user{ACTIVATE}, 3);
                $activate_m--;
                my $active_unixtime = mktime(0, 0, 0, $activate_d, $activate_m, $activate_y - 1900, 0, 0, 0);
                if ($date_unixtime - $active_unixtime > 30 * 86400) {
                  if ($debug > 4) {
                    $debug_output .= " $user{LOGIN} UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
                  }
                  else {
                    $Fees->take(\%user, $sum, {%FEES_PARAMS});
                    $debug_output .= " $user{LOGIN} UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION} CHANGE ACTIVATE\n" if ($debug > 0);
                    if ($Fees->{errno}) {
                      print "Error: [$Fees->{errno}] $Fees->{errstr} ";
                      if ($Fees->{errno} == 14) {
                        print "[ $user{UID} ] $user{LOGIN} - Don't have money account";
                      }
                      print "\n";
                    }
                    else {
                      $users->change(
                        $user{UID},
                        {
                          UID      => $user{UID},
                          ACTIVATE => $ADMIN_REPORT{DATE}
                        }
                      );
                    }
                  }
                }
              }
            }

          }
        }
        else {
          print "[ $user{UID} ] $user{LOGIN} - Don't have money account\n";
        }
      }
    }

    #Channels Fees
    $ulist = $Iptv->user_list(
      {
        ACTIVATE      => "<=$ADMIN_REPORT{DATE}",
        EXPIRE        => "0000-00-00,>$ADMIN_REPORT{DATE}",
        SERVICE_STATUS=> 0,
        LOGIN_STATUS  => 0,
        TP_ID         => $TP_ID,
        SORT          => 1,
        PAGE_ROWS     => 1000000,
        SHOW_CHANNELS => 1,
        DEPOSIT       => '_SHOW',
        CREDIT        => '_SHOW',
        BILL_ID       => '_SHOW',
        REDUCTION     => '_SHOW',
        EXT_BILL_ID   => '_SHOW',
        MONTH_PRICE   => '>0',
        COLS_NAME     => 1,
        %USERS_LIST_PARAMS
      }
    );

    foreach my $u (@$ulist) {
      my $channel_num = $u->{channel_id};
      my $sum         = $u->{month_price};
      $debug_output .= " Login: $u->{login} ($u->{uid})  TP_ID: $u->{tp_id} Channel: $channel_num Month Price: $sum REDUCTION: $u->{reduction}  $u->{credit} $u->{credit}\n" if ($debug > 3);

      #Check bill id and deposit
      my %user = (
        LOGIN     => $u->{login},
        UID       => $u->{uid},
        BILL_ID   => ($tp->{ext_bill_account} > 0) ? $u->{ext_bill_id} : $u->{bill_id},
        REDUCTION => $u->{reduction},
        ACTIVATE  => '0000-00-00',
        DEPOSIT   => $u->{deposit},
        CREDIT    => ($u->{credit} > 0) ? $u->{credit} : $tp->{credit}
      );

      if ($postpaid == 1 || $user{DEPOSIT} + $user{CREDIT} > 0 || $tp_postpaid == 1) {
        #take Fees in first day of month
        $FEES_PARAMS{DESCRIBE} = "$_MONTH_FEE ($_TV $_CHANNELS:$channel_num)";

        if (($user{ACTIVATE} eq '0000-00-00' and $d == $START_PERIOD_DAY) || $conf{IPTV_CLOSE_PERIOD}) {
          if ($debug > 4) {
            $debug_output .= " UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
          }
          else {
            $Fees->take(\%user, $sum, {%FEES_PARAMS});

            if ($Fees->{errno}) {
              print "Error: [ $user{UID} ] $user{LOGIN} SUM: $sum [$Fees->{errno}] $Fees->{errstr} ";
              if ($Fees->{errno} == 14) {
                print "UID: $user{UID} LOGIN: $user{LOGIN} - Don't have money account";
              }
              print "\n";
            }
            else {
              $debug_output .= " $user{LOGIN}  UID: $user{UID} SUM: $sum CHANNEL: $channel_num REDUCTION: $user{REDUCTION}\n" if ($debug > 0);
            }
          }
        }
      }
    }
  }

  if ($conf{IPTV_CLOSE_PERIOD}) {
    $users->config_del('IPTV_CLOSED_PERIOD');
    $users->config_add(
      {
        PARAM => 'IPTV_CLOSED_PERIOD',
        VALUE => "$DATE $TIME"
      }
    );
  }

  $DEBUG .= $debug_output;
  return $debug_output;
}

#**********************************************************
# user_warnings
#
#**********************************************************
sub iptv_users_warning_messages {

  my %LIST_PARAMS = (USERS_WARNINGS => 'y');
  my $list = $Iptv->list({%LIST_PARAMS});

  $ADMIN_REPORT{USERS_WARNINGS} = sprintf("%-14s| %4s|%-20s| %9s| %8s|\n", $_LOGIN, 'TP', $_TARIF_PLAN, $_DEPOSIT, $_CREDIT) . "---------------------------------------------------------------\n";
  return 0 if ($Iptv->{TOTAL} < 1);
  my %USER_INFO = ();

  foreach my $line (@$list) {

    #u.id, u.email, u.tp_id, u.credit, u.deposit, tp.name, tp.uplimit

    $USER_INFO{LOGIN}   = $line->[0];
    $USER_INFO{TP_NAME} = $line->[5];
    $USER_INFO{TP_ID}   = $line->[2];
    $USER_INFO{DEPOSIT} = $line->[4];
    $USER_INFO{CREDIT}  = $line->[3];

    my $email = ((!defined($line->[1])) || $line->[1] eq '') ? "$line->[0]\@$conf{USERS_MAIL_DOMAIN}" : "$line->[1]";

    $ADMIN_REPORT{USERS_WARNINGS} .= sprintf("%-14s| %4d|%-20s| %9.4f| %8.2f|\n", $USER_INFO{LOGIN}, $USER_INFO{TP_ID}, $USER_INFO{TP_NAME}, $USER_INFO{DEPOSIT}, $USER_INFO{CREDIT});

    my $message = $html->tpl_show(_include('iptv_users_warning_messages', 'Iptv'), \%USER_INFO, { notprint => 'yes' });

    sendmail("$conf{ADMIN_MAIL}", "$email", "???????????? ??????? ??????????.", "$message", "$conf{MAIL_CHARSET}", "2 (High)");
  }

  $ADMIN_REPORT{USERS_WARNINGS} .= "---------------------------------------------------------------
$_TOTAL: $Iptv->{TOTAL}\n";
}

#***********************************************************
# iptv_sheduler
#***********************************************************
sub iptv_sheduler {
  my ($type, $action, $uid) = @_;

  my $user = $Iptv->user_info($uid);

  if ($type eq 'tp') {
    $Iptv->user_change(
      {
        UID   => $uid,
        TP_ID => $action
      }
    );

    $FORM{change}= 1;
    $FORM{UID}   = $uid;
    $FORM{TP_ID} = $action;
     if (iptv_account_action({ CHANGE_TP => 1 })) {
      $html->message('err', $_ERROR, "$Iptv->{errno} $Iptv->{errstr}");
    }
  }

  #Set channel
  elsif ($type eq 'channels') {
    return 0 if ($action eq '');
    
    $action =~ s/;/, /g;
    $FORM{IDS}        = $action;
    $LIST_PARAMS{UID} = $uid;
    $FORM{change_now} = 1;
    
    $Iptv->user_info($uid);
    if (!$Iptv->{errno}) {
      iptv_user_channels({ QUIET => 1, USER_INFO => $Iptv });
    }
    else {
      print "!! UID: $uid / $Iptv->{errno}\n";
    }
    iptv_user_channels({ QUIET => 1, USER_INFO => $users });
  }
}

#***********************************************************
# Add asterisk user
#***********************************************************
sub iptv_mk_users_conf {
  my ($attr) = @_;

  my $content = "#ABILLS users config\n#DATE: $DATE $TIME\n\n";

  my $list = $Iptv->user_list(
    {
      PAGE_ROWS => 100000,
      CID       => '*',
      PASSWORD  => 1
    }
  );

  foreach my $line (@$list) {
    my %info = (
      LOGIN     => $line->[0],
      FIO       => $line->[1],
      NUMBER    => $line->[6],
      CALLER_ID => $line->[7],
      PASSWORD  => $line->[8],
    );

    $content .= $html->tpl_show(_include('iptv_users_conf', 'Iptv'), \%info, { OUTPUT2RETURN => 1 });
  }

  open(FILE, ">$conf{VOIP_ASTERISK_USERS}") || $html->message('err', $_ERROR, "Can't open file '$conf{VOIP_ASTERISK_USERS}' $!");
  print FILE "$content\n";
  close(FILE);

}

#***********************************************************
# iptv_report
#***********************************************************
sub iptv_report {
  my ($type, $attr) = @_;
  my $REPORT = "Module: Iptv\n";
  %LIST_PARAMS = %{ $attr->{LIST_PARAMS} } if (defined($attr->{LIST_PARAMS}));
  return $REPORT;
}

#**********************************************************
#
#Make month feee
#**********************************************************
#sub iptv_get_month_fee {
#  my ($Iptv, $attr) = @_;
#
#  my $info_message = '';
#
#  #Get active price
#  if ($Iptv->{TP_INFO}->{ACTIV_PRICE}) {
#    my $users = Users->new($db, $admin, \%conf);
#    my $user  = $users->info($Iptv->{UID});
#    my $date  = ($user->{ACTIVATE} ne '0000-00-00') ? $user->{ACTIVATE} : $DATE;
#    my $time  = ($user->{ACTIVATE} ne '0000-00-00') ? '00:00:00' : $TIME;
#
#    $Fees->take(
#      $user,
#      $Iptv->{TP_INFO}->{ACTIV_PRICE},
#      {
#        DESCRIBE => "$_ACTIVATE $_TARIF_PLAN",
#        DATE     => "$date $time"
#      }
#    );
#
#    $info_message .= "$_ACTIVATE $_TARIF_PLAN\n";
#  }
#
#  #Get month fee
#  if ($Iptv->{TP_INFO}->{MONTH_FEE} > 0) {
#    my $sum   = $Iptv->{TP_INFO}->{MONTH_FEE};
#    my $users = Users->new($db, $admin, \%conf);
#    my $user  = $users->info($Iptv->{UID});
#
#    if ($Iptv->{TP_INFO}->{EXT_BILL_ACCOUNT}) {
#      $user->{BILL_ID} = $user->{EXT_BILL_ID} if ($user->{EXT_BILL_ID});
#    }
#
#    my $message = '';
#
#    #Current Month
#    my ($y, $m, $d) = split(/-/, $DATE, 3);
#    my ($active_y, $active_m, $active_d) = split(/-/, $Iptv->{ACCOUNT_ACTIVATE}, 3);
#    if (int("$y$m$d") < int("$active_y$active_m$active_d")) {
#      return;
#    }
#
#    if ($Iptv->{TP_INFO}->{PERIOD_ALIGNMENT} && !$Iptv->{TP_INFO}->{ABON_DISTRIBUTION}) {
#      $message = "$_MONTH_ALIGNMENT\n";
#      my $days_in_month = ($m != 2 ? (($m % 2) ^ ($m > 7)) + 30 : (!($y % 400) || !($y % 4) && ($y % 25) ? 29 : 28));
#
#      if ($Iptv->{ACCOUNT_ACTIVATE} && $Iptv->{ACCOUNT_ACTIVATE} ne '0000-00-00') {
#        $days_in_month = ($active_m != 2 ? (($active_m % 2) ^ ($active_m > 7)) + 30 : (!($active_y % 400) || !($active_y % 4) && ($active_y % 25) ? 29 : 28));
#        $d = $active_d;
#      }
#
#      $conf{START_PERIOD_DAY} = 1 if (!$conf{START_PERIOD_DAY});
#      $sum = sprintf("%.2f", $sum / $days_in_month * ($days_in_month - $d + $conf{START_PERIOD_DAY}));
#    }
#
#    return 0 if ($sum == 0);
#
#    my $periods = 0;
#    if ($active_m > 0 && $active_m < $m) {
#      $periods = $m - $active_m;
#    }
#    elsif ($active_m > 0 && ($active_m >= $m && $active_y < $y)) {
#      $periods = 12 - $active_m + $m;
#    }
#
#    $message .= "$_MONTH_FEE: $sum ($Iptv->{TP_INFO}->{TP_ID})";
#    $message .= $attr->{EXT_DESCRIBE} if ($attr->{EXT_DESCRIBE});
#
#    if ($Iptv->{TP_INFO}->{ABON_DISTRIBUTION}) {
#      $sum = $sum / (($m != 2 ? (($m % 2) ^ ($m > 7)) + 30 : (!($y % 400) || !($y % 4) && ($y % 25) ? 29 : 28)));
#      $message .= " - $_ABON_DISTRIBUTION";
#    }
#
#    $m = $active_m if ($active_m > 0);
#    for (my $i = 0 ; $i <= $periods ; $i++) {
#      if ($m > 12) {
#        $m        = 1;
#        $active_y = $active_y + 1;
#      }
#
#      $m = sprintf("%.2d", $m);
#
#      if ($i > 0) {
#        $sum     = $Iptv->{TP_INFO}->{MONTH_FEE};
#        $message = "$_MONTH_FEE: $sum ($Iptv->{TP_INFO}->{TP_ID})";
#
#        $message .= $attr->{EXT_DESCRIBE} if ($attr->{EXT_DESCRIBE});
#        $DATE = "$active_y-$m-01";
#        $TIME = "00:00:00";
#      }
#      elsif ($Iptv->{ACCOUNT_ACTIVATE} && $Iptv->{ACCOUNT_ACTIVATE} ne '0000-00-00') {
#        $DATE = "$active_y-$m-$active_d";
#        $TIME = "00:00:00";
#
#        if ($Iptv->{TP_INFO}->{PERIOD_ALIGNMENT}) {
#          $users->change(
#            $Iptv->{UID},
#            {
#              ACTIVATE => '0000-00-00',
#              UID      => $Iptv->{UID}
#            }
#          );
#        }
#      }
#
#      $Fees->take(
#        $users, $sum,
#        {
#          DESCRIBE => "$_TV: $message",
#          METHOD   => 1,
#          DATE     => "$DATE $TIME"
#        }
#      );
#
#      if ($Fees->{errno}) {
#        $html->message('err', $_ERROR, "[$Fees->{errno}] $Fees->{errstr}") if (!$attr->{QUIET});
#        return 0;
#      }
#      $info_message .= "$_DATE: $DATE $message\n";
#      $m++;
#    }
#  }
#
#  $html->message('info', $_INFO, $info_message) if ($info_message && !$attr->{QUIET});
#}

#**********************************************************
#
#**********************************************************
sub iptv_crypt {
  my ($attr) = @_;
  my @channels = (
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  );

  my $filename = $conf{IPTV_DVCRYPT_FILENAME} || $conf{TPL_DIR} . '/dvcrypt.conf';
  my $content = '';

  my %users_channels   = ();
  my $tp_list          = $Tariffs->list({ %LIST_PARAMS, MODULE => 'Iptv', COLS_NAME => 1 });
  foreach my $tp (@$tp_list) {
    my $TP_ID       = $tp->{tp_id};
    my $min_use     = $tp->{min_use};
    my $postpaid    = $tp->{payment_type};
    my $tp_postpaid = $tp->{postpaid_monthly_fee};
    my $month_fee   = $tp->{month_fee};
    my %tp_channels_list = ();

    $Tariffs->ti_list({ TP_ID => $TP_ID, COLS_NAME => 1 });

    if ($Tariffs->{TOTAL} == 0) {
      next;
    }

    my $channels_list = $Iptv->channel_ti_list(
      {
        INTERVAL_ID => $Tariffs->{list}->[0]->{id},
        MANDATORY   => 1,
        COLS_NAME   => 1
      }
    );

    foreach my $line (@$channels_list) {
      $tp_channels_list{ $line->{channel_num} } = $line->{channel_id};
    }

    #Main users list
    my $ulist = $Iptv->user_list(
      {
        ACTIVATE     => "<=$DATE",
        EXPIRE       => "0000-00-00,>$DATE",
        DVCRYPT_ID   => '>0',
        SERVICE_STATUS=> '_SHOW',
        LOGIN_STATUS => '_SHOW',
        DEPOSIT      => '_SHOW',
        CREDIT       => '_SHOW',
        TP_ID        => $TP_ID,
        SORT         => 1,
        PAGE_ROWS    => 1000000,
        COLS_NAME    => 1
      }
    );

    foreach my $u (@$ulist) {
        
      if ($u->{deposit} + $u->{credit} > 0 && $u->{iptv_status} == 0) {
        %{ $users_channels{ $u->{dvcrypt_id} } } = %tp_channels_list;
      }
      else {
        %{ $users_channels{ $u->{dvcrypt_id} } } = ();
      }
    }

    # Custom channels users list
    my $list = $Iptv->user_list(
      {
        PAGE_ROWS     => 1000000,
        DVCRYPT_ID    => '>0',
        ACTIVATE      => "<=$DATE",
        EXPIRE        => "0000-00-00,>$DATE",
        SERVICE_STATUS=> '_SHOW',
        LOGIN_STATUS  => '_SHOW',
        DEPOSIT       => '_SHOW',
        CREDIT        => '_SHOW',
        TP_ID         => $TP_ID,
        SORT          => 1,
        SHOW_CHANNELS => 1,
        COLS_NAME     => 1,        
      }
    );

    foreach my $u (@$list) {
      if ($u->{deposit} + $u->{credit} > 0 && $u->{login_status} + $u->{iptv_status} == 0) {
        $users_channels{ $u->{dvcrypt_id} }{ $u->{channel_num} } = "$u->{deposit}";
      }
      else {
        $users_channels{ $u->{dvcrypt_id} }{ $u->{channel_num} } = 0;
      }
    }
  }

  foreach my $dv_crypt_id (sort { $a <=> $b } keys %users_channels) {
    my @arr = ();
    for (my $channel_id = 1 ; $channel_id <= 127 ; $channel_id++) {
      $arr[ $channel_id - 1 ] = ($users_channels{$dv_crypt_id}->{$channel_id}) ? 1 : 0;
    }
    $content .= "$dv_crypt_id;" . (join('', @arr)) . "\n";
  }

  print $html->pre($content) if ($debug > 1);

  if (open(FILE, ">$filename")) {
    print FILE $content;
    close(FILE);
  }
  else {
    print "Can't create Dv_crypt file '$filename' $!\n";
  }

  print "Generated '$filename'\n" if ($debug > 1);
  
  return "Generated '$filename'\n";
}

#**********************************************************
#
#**********************************************************
sub iptv_reports_channels {
  my ($attr) = @_;

  my $list  = $Iptv->reports_channels_use({%LIST_PARAMS});
  my $table = $html->table(
    {
      width      => '100%',
      caption    => $_CHANNELS,
      border     => 1,
      title      => [ $_NUM, $_NAME, $_USERS, $_DEBETORS ],
      cols_align => [ 'right', 'left', 'right', 'right' ],
      qs         => $pages_qs,
      pages      => $Iptv->{TOTAL},
      ID         => 'IPTV_CHANNELS',
    }
  );

  foreach my $line (@$list) {
    $table->addrow($html->b($line->[0]), $line->[1], $line->[2], $line->[3],);
  }
  print $table->show();

  #$table = $html->table( { width      => '100%',
  #                         cols_align => ['right', 'right'],
  #                         rows       => [ [ "$_TOTAL:", $html->b($Iptv->{TOTAL}) ] ]
  #                     } );
  #print $table->show();

}



#**********************************************************
#
#**********************************************************
sub iptv_user_channels_list {
  my ($attr) = @_;

  my %tp_channels_list = ();
  my %users_channels   = ();
  my $tp_list          = $Tariffs->list({ %LIST_PARAMS, 
                                          MODULE => 'Iptv', 
                                          COLS_NAME => 1 
                                        });
  
  foreach my $tp (@$tp_list) {
    my $TP_ID       = $tp->{tp_id};
    $Tariffs->ti_list({ TP_ID => $TP_ID, COLS_NAME => 1 });

    if ($Tariffs->{TOTAL} == 0) {
      next;
    }

    my $channels_list = $Iptv->channel_ti_list(
      {
        INTERVAL_ID => $Tariffs->{list}->[0]->{id},
        MANDATORY   => 1,
        COLS_NAME   => 1
      }
    );
    foreach my $line (@$channels_list) {
      $tp_channels_list{ $line->{channel_num} } = $line->{channel_id};
    }

    #Main users list
    my $ulist = $Iptv->user_list(
      {
        ACTIVATE     => "<=$DATE",
        EXPIRE       => "0000-00-00,>$DATE",
        SERVICE_STATUS=> '_SHOW',
        LOGIN_STATUS => '_SHOW',
        DEPOSIT      => '_SHOW',
        CREDIT       => '_SHOW',
        TP_ID        => $TP_ID,
        SORT         => 1,
        PAGE_ROWS    => 1000000,
        COLS_NAME    => 1,
        UID           => $attr->{UID} || $LIST_PARAMS{UID}
      }
    );

    foreach my $u (@$ulist) {
      if ($u->{deposit} + $u->{credit} > 0 && $u->{iptv_status} == 0) {
        %{ $users_channels{ $u->{uid} } } = %tp_channels_list;
      }
    }

 
    # Custom channels users list
    my $list = $Iptv->user_list(
      {
        PAGE_ROWS     => 1000000,
        DVCRYPT_ID    => '>0',
        ACTIVATE      => "<=$DATE",
        EXPIRE        => "0000-00-00,>$DATE",
        SERVICE_STATUS=> '_SHOW',
        LOGIN_STATUS => '_SHOW',
        DEPOSIT      => '_SHOW',
        CREDIT       => '_SHOW',
        TP_ID         => $TP_ID,
        SORT          => 1,
        SHOW_CHANNELS => 1,
        COLS_NAME     => 1,
        UID           => $attr->{UID} || $LIST_PARAMS{UID}
      }
    );

    foreach my $u (@$list) {
      if ($u->{deposit} + $u->{credit} > 0 && $u->{login_status} + $u->{iptv_status} == 0) {
        $users_channels{ $u->{uid} }{ $u->{channel_num} } = $u->{channel_id} ;
      }
      #else {
      #  $users_channels{ $u->{uid} }{ $u->{channel_id} } = 0;
      #}
    }
  }

  return join(',', keys %{ $users_channels{$attr->{UID}} });
}

sub stalker_export {
  my ($attr) = @_;
  
    if (defined($Iptv_stalker)) {
      $Iptv_stalker->stalker_channel_export();
      if (!$Iptv_stalker->{errno}) {
        if(!defined($FORM{stalker_del} && !defined($FORM{stalker_change}))) {
          $html->message('info', $_INFO, "$_ADDED");
        }
      }
      else {
        $html->message('err', $_ERROR, "$Iptv_stalker->{errno} $Iptv_stalker->{errstr}");
      }
    }

}

#**********************************************************
# stalker export tariff plan
#**********************************************************
sub stalker_tariff_export {
  my ($attr) = @_;
  my @stalker_tp_id;
    
    if (defined($Iptv_stalker)) {
      
      #debug
      if (!$Iptv_stalker->{errno}) {
        #Export from DB stalker - table tariff_plan
        $list_tariffs = $Iptv_stalker->stalker_db_list_tariffs();
        
        foreach my $stalker_tp_id ( @$list_tariffs ) {
          $Iptv_stalker->stalker_tp_export($stalker_tp_id->[0]); 
        }
        
        #return 0;
        #Export id columns of tariff_plan(table) from stalker DB

          #print $stalker_id2num{197} . 'zo';
          #print $abills_num2id{101} . 'zo';
          #print $package_tp_id{3} . 'zo';
          #print $tariffs_id_intervals{10402} . 'zo';
          
          
        #return 0;

        foreach my $line ( @$list_tariffs ) {
          #print $line->[0] . 'oz';
          
          $Iptv_stalker->replace_interval_id($line->[0]);
          #push(@stalker_tp_id, $line->[0]);
        }
        
        if(!defined($attr->{WITHOUT_SUBSCRIPTION})) {
          $Iptv_stalker->stalker_subscribe_export();
        }
        
        
        return 0;
        #Add intervals to abills with stalkers tariff ids
        #$Iptv_stalker->intervals_stalker_tp(\@stalker_tp_id);
 
      } 
      else {
        $html->message('err', $_ERROR, "$Iptv_stalker->{errno} $Iptv_stalker->{errstr}");
      }
    } 
    #$Iptv_stalker->stalker_tp_export()
}



#**********************************************************
#
#**********************************************************
sub iptv_stalker {
  eval { require "modules/Iptv/Stalker_api.pm"; };

  if (!$@) {
    eval { require "modules/Iptv/Stalker_api.pm"; };
    Stalker_api->import();
    $Stalker_api = Stalker_api->new($db, $admin, \%conf);
  }
  else {
    print $@;
    $html->message('err', $_ERROR, "Can't load 'Stalker_api'. Purchase this module http://abills.net.ua");
    exit;
  }

 if ($FORM{send_message}) {
 	 $Stalker_api->send_message({ %FORM });

 	 return $Stalker_api->{error};
 }
 elsif ($FORM{add} || $FORM{change}) {
   $users->info($users->{UID} || $FORM{UID},
                { 
                  SHOW_PASSWORD => 1,
                 });
   $users->pi({ UID => $users->{UID} || $FORM{UID} });

   $Stalker_api->user_action({ %$users, %$Iptv, %FORM });
   
   if ($Stalker_api->{errstr} eq 'Account not found') {
     $Stalker_api->user_action({ %$users, 
                                 %$Iptv, 
                                 %FORM,
                                 add   => 1,
                                 change=> undef });
   }   
   
   return $Stalker_api->{error};
 }

 print $html->button("$_ACCOUNTS", "index=$index", { BUTTON => 1 }).
  $html->button("STB", "index=$index&list=STB", { BUTTON => 1 }).
  $html->button("$_CHANNELS", "index=$index&list=ITV", { BUTTON => 1 }).
  $html->button("TV_SUBSCRIPTION", "index=$index&list=ITV_SUBSCRIPTION", { BUTTON => 1 }).
  $html->button("$_TARIF_PLANS", "index=$index&list=tariffs", { BUTTON => 1 }).
  $html->br();

  # Get tps
  my $list = $Tariffs->list({ MODULE    => 'Iptv',
                              COLS_NAME => 1 
                           });
  foreach my $tp (@$list) {
    $tp_list{$tp->{id}}=$tp->{tp_id};
  }

 
 if ($FORM{register}) {
   if (! $tp_list{$FORM{TP_ID}}) {
     $html->message('err', $_ERROR, "$_TARF_PLAN $_NOT_EXIST");
   }
   else {
     $users->add({ %FORM });
     $FORM{TP_ID} = $tp_list{$FORM{TP_ID}};
     if (! $users->{errno} ) {
       $Iptv->user_add({ %FORM, UID => $users->{UID} });
     }
     else {
       $html->message('err', $_ERROR, "$users->{error}/$users->{errstr} ");
     }
   }
 }
 elsif ($FORM{tp_add}) {
   $Tariffs->add({ %FORM, MODULE => 'Iptv' });
   if (!$Tariffs->{errno}) {
     $html->message('info', $_ADDED, "$_ADDED $Tariffs->{TP_ID}");
   }
   else {
     $html->message('err', $_ERROR, "$users->{error}/$users->{errstr} ");
   }
 }
 elsif ($FORM{list}) {
   iptv_stalker_show_list($FORM{list});
   return 0;   
 }
 elsif ($FORM{del}) {

   return 0;
 }

  $Stalker_api->get_users();
  
  if ($Stalker_api->{error} ) {
    $html->message('err', $_ERROR, "$Stalker_api->{error}/ ");
  }

 # Get abills users 
 my %register_stb = ();
 $list = $Iptv->user_list({ PAGE_ROWS => 1000000, 
                            CID       => '_SHOW',
                            COLS_NAME => 1 });
 
 foreach my $line (@$list) {
   $register_stb{$line->{cid}} = $line->{uid};
 }


 my @TITLE = ();
 if ($Stalker_api->{RESULT}->{results}) {
   @TITLE = keys %{ $Stalker_api->{RESULT}->{results}->[0] }; 
 }

  my $table = $html->table(
    {
      width      => '100%',
      title      => [ @TITLE, '-' ],
      caption    => "$_ACCOUNTS",
      ID         => 'CLOSE_PERIOD'
    }
  );
  
  
  foreach my $account_hash ( @{ $Stalker_api->{RESULT}->{results} } ) {
    my @row = ();
    while( ($key, $val)=each %{ $account_hash } ) {
      if ($key eq 'tariff_plan') {
        if (! $tp_list{$val}){ 
          $val = "$val ". $html->br(). $html->color_mark($_NOT_EXIST, 'red') . $html->button($_ADD, "ID=$val&index=". get_function_index('iptv_tp'), { CLASS => 'add' }) ;
        }
        push @row, $val;
      }
      elsif ( ref $val eq 'ARRAY') {
        push @row, join($html->br(), @$val);
      }
      elsif ($key eq 'stb_mac') {
        $val = $html->button("$val", "index=$index&list=STB_MODULES&MAC=$val");
        push @row, "$val";
      }
      else {
        push @row, "$val";
      }
    }
    
    if ($account_hash->{stb_mac} && $register_stb{$account_hash->{stb_mac}}) {
      push @row, $html->button($_SHOW, "index=15&UID=$register_stb{$account_hash->{stb_mac}}", { CLASS => 'show', TITLE => $account_hash->{stb_mac} });
    }
    else {
      push @row, $html->button($_ADD, "index=$index&register=1&LOGIN=".
       (( $account_hash->{login}) ? $account_hash->{login} : $account_hash->{stb_mac}). "&PASSWORD=&TP_ID=$account_hash->{tariff_plan}&STATUS=$account_hash->{status}&CREATE_BILL=1&CID=$account_hash->{stb_mac}", { CLASS => 'add' });
    }

    $table->addrow(@row);
  }

  print $table->show();
}

#**********************************************************
#
#**********************************************************
sub iptv_stalker_show_list {
  my ($list_name) = @_;

  use Encode;

  my %channel_list = ();
  if ($list_name eq 'ITV') {
    print $html->button("$_IMPORT $_CHANNELS", "index=$index&list=ITV&import_channels=1", { BUTTON => 1 });
    my $list = $Iptv->channel_list({ COLS_NAME => 1,  PAGE_ROWS => 10000 });
    foreach my $line (@$list) {
      $channel_list{$line->{num}}=$line->{name};
    }
  }

  $Stalker_api->send_request({ ACTION => "$list_name/$FORM{MAC}",
                             });

  if ($Stalker_api->{error}) {
    $html->message('err', $_ERROR, "$Stalker_api->{error}/$Stalker_api->{errstr} ");
  }

  if (ref $Stalker_api->{RESULT}->{results} ne 'ARRAY') {
    my $table = $html->table(
    {
      width      => '100%',
      title      => [ $_PARAMS, $_VALUE ],
      caption    => "$_ACCOUNTS",
      ID         => 'CLOSE_PERIOD'
    }
    );

    while( ($key, $val)=each %{ $Stalker_api->{RESULT}->{results} } ) {
      my @row = ();
      if ( ref $val eq 'ARRAY') {
        push @row, $key, join($html->br(), @$val);
      }
      else {
        if ($key eq 'mac') {
          $val = $html->button($val, "index=$index&list=STB_MODULES&MAC=$val");
        }
        push @row, "$key", "$val";
      }

      $table->addrow(@row);
    }
    
    print $table->show();
    return 0;
  }

  my @TITLE = keys %{ $Stalker_api->{RESULT}->{results}->[0] }; 

  my $table = $html->table(
    {
      width      => '100%',
      title      => [ @TITLE, '-' ],
      caption    => "$_ACCOUNTS",
      ID         => ''
    }
    );

  foreach my $account_hash ( @{ $Stalker_api->{RESULT}->{results} } ) {
    my @row = ();
    while( ($key, $val)=each %{ $account_hash } ) {
      Encode::_utf8_off($account_hash->{name}) if ($account_hash->{name});

      if ( ref $val eq 'ARRAY') {
        my $col_values = '';
        foreach my $v (@$val) {
          if (ref $v eq 'HASH') {
            while(my($k, $v) = each %$v) {
              $col_values .= " $k - $v". $html->br();
            }
          }
          else {
            $col_values .= $v . $html->br();
          }
        }
        
        push @row, $col_values;
      }
      elsif ( ref $val eq 'HASH') {
        my $col_values = '';
        while(my($k, $v) = each %$val) {
          $col_values .= " $k - $v". $html->br();
        }
        push @row, $col_values;
      }
      else {
        if ($key eq 'mac') {
          $val = $html->button($val, "index=$index&list=STB_MODULES&MAC=$val");
        }
        push @row, "$val";
      }
    }
    
    if ($list_name eq 'ITV') {
      if ($FORM{import_channels}) {
        $Iptv->channel_add({
               ID        => $account_hash->{id}, 
               NAME      => $account_hash->{name}, 
               NUMBER    => $account_hash->{number}, 
               PORT      => $account_hash->{number}, 
               DESCRIBE  => $account_hash->{name}, 
               DISABLE   => 
               });

        if (! $Iptv->{errno}) {
          push @row, "$_ADDED";
        }
        else {
          push @row, $html->color_mark("$Iptv->{errno} $Iptv->{errstr}", 'red');
        }
      }
      elsif ($channel_list{$account_hash->{number}}) {
        push @row, "+";
      }
    }
    elsif ($register_stb{$account_hash->{stb_mac}}) {
      push @row, $html->button($_SHOW, "index=15&UID=$register_stb{$account_hash->{stb_mac}}", { CLASS => 'show' });
    }
    elsif ($account_hash->{external_id}) {
      push @row, (! $tp_list{$account_hash->{external_id}}) ? $html->button($_ADD, "list=tariffs&index=$index&tp_add=1&ID=$account_hash->{external_id}&NAME=$account_hash->{name}", { CLASS => 'add' }) :
        $html->button($_ADD, "index=". get_function_index('iptv_tp') ."&TP_ID=$tp_list{$account_hash->{external_id}}", { CLASS => 'show' }) ;
    }    
    elsif(defined($account_hash->{login})) {
      push @row, $html->button($_ADD, "index=$index&register=1&LOGIN=".
       (( $account_hash->{login}) ? $account_hash->{login} : $account_hash->{stb_mac}). "&PASSWORD=&TP_ID=$account_hash->{tariff_plan}&STATUS=$account_hash->{status}&CREATE_BILL=1&CID=$account_hash->{stb_mac}", { CLASS => 'add' });
    }
    else {
      push @row, '';
    }

    $table->addrow(@row);
  }

  print $table->show();
}

#**********************************************************
#
#**********************************************************
sub iptv_account_action {
  my ($attr) = @_;
  
  my $result = 0;
  
  if ($FORM{add}) {
    if ($conf{IPTV_DVCRYPT_FILENAME}) {
      iptv_crypt();
    }

    #Api function
    if ($conf{IPTV_STALKER_API_HOST}) {
      iptv_stalker();
      if ($Stalker_api->{error}) {
        $Iptv->{errno}  = $Stalker_api->{errno}; 
        $Iptv->{errstr} = $Stalker_api->{errstr};
        $result = 1;
      }
    }
    #DB functions
    elsif ($Iptv_stalker) {
      $Iptv_stalker->stalker_user_chg_tp(($FORM{TP_IDS} eq '') ? $FORM{TP_ID} : $FORM{TP_IDS}, ($FORM{CID2} ne '') ? $FORM{CID2} : $FORM{CID});
      if ($Iptv_stalker->{errno}) {
        $result = 1;
      }
    }

    if ($conf{IPTV_USER_EXT_CMD}) {
      $Iptv->{ACTION}='down' if ($FORM{STATUS});
      iptv_ext_cmd($conf{IPTV_USER_EXT_CMD}, { %$users, %$Iptv })
    }
  }
  elsif ($FORM{change}) {

    if ($conf{IPTV_DVCRYPT_FILENAME}) {
      iptv_crypt();
    }

    if ($conf{IPTV_STALKER_API_HOST}) {
      iptv_stalker();
      if ($Stalker_api->{error}) {
        $Iptv->{errno}  = $Stalker_api->{errno}; 
        $Iptv->{errstr} = $Stalker_api->{errstr};
        $result = 1;
      }      
    }
    elsif ($Iptv_stalker) {
      #$Iptv_stalker->stalker_user_chg_tp($FORM{TP_ID}, $Iptv_stalker->a2s_uid($FORM{UID}, 1));
      $Iptv_stalker->stalker_user_chg_tp(($FORM{TP_IDS} eq '') ? $FORM{TP_ID} : $FORM{TP_IDS}, ($FORM{CID2} ne '') ? $FORM{CID2} : $FORM{CID});
      if ($Iptv_stalker->{errno}) {
        $result = 1;
      }
    }

    if ($conf{IPTV_USER_EXT_CMD}) {
      $Iptv->{ACTION}='down' if ($FORM{STATUS});
      iptv_ext_cmd($conf{IPTV_USER_EXT_CMD}, { %$users, %$Iptv })
    }
  }
  elsif ($FORM{chg}) {
    
  }
  elsif ($FORM{send_message}) {
    if ($conf{IPTV_STALKER_API_HOST}) {
      iptv_stalker();
      if ($Stalker_api->{error}) {
        $Iptv->{errno}  = $Stalker_api->{errno}; 
        $Iptv->{errstr} = $Stalker_api->{errstr};
        $result = 1;
      }      
    }
    elsif ($Iptv_stalker) {
      $Iptv_stalker->send_msg({ %FORM });
      
      if ($Iptv_stalker->{errno}) {
         $html->message('err', $_ERROR, "$Iptv_stalker->{errno} $Iptv_stalker->{errstr}");
      }
      else {
        $html->message('info', $_INFO, "$_SENDED");
      }
    }
  }
  elsif ($FORM{del}) {
    
  }

  return $result;
}





1

