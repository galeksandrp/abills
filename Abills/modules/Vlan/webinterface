# Vlans

use Nas;
use Vlan;
my $Vlan = Vlan->new($db, $admin, \%conf);
my $Nas = Nas->new($db, \%conf);

my $SUDO = '/usr/local/bin/sudo';
my $debug = 0;




#my $subnets = qq{
##Subnets %DESCRIBE%
#subnet %NET_IP% netmask %NETMASK% {
#  range %FIRST_IP% %LAST_IP%;
#  %ROUTERS%
#  #Comments
#  # %COMMENTS%
#  host %LOGIN% {	
#    %FIXED_MAC%
#    #fixed-address %USER_IP%;
#    #next-server %IF_IP%;
#  }
#}
#};


#**********************************************************
# user_vlan
#**********************************************************
sub vlan_users_list {
 my ($attr)=@_;

 #my $group_sel = sel_groups();
 form_search({ 
   SIMPLE => { IP      => 'IP',
   	           NETMASK => 'NETMASK',
   	           VLAN_ID => 'VLAN_ID',
   	           NAS     => 'NAS_ID'
   	            }
  });


 print $html->letters_list({ pages_qs => $pages_qs  }); 

 if ($FORM{letter}) {
   $LIST_PARAMS{FIRST_LETTER} = $FORM{letter};
   $pages_qs .= "&letter=$FORM{letter}";
  } 


my $list = $Vlan->list( { %LIST_PARAMS } );

my @TITLE = ($_LOGIN, $_FIO, $_DEPOSIT, $_CREDIT, 'VLAN ID', 
"$_INTERFACE IP",
"IP $_RANGE",
"DHCP",
$_STATUS);


for(my $i=0; $i<$Vlan->{SEARCH_FIELDS_COUNT}; $i++){
	push @TITLE, '-';
	$TITLE[6+$i] = "$_SEARCH";
}

if ($Vlan->{errno}) {
  $html->message('err', $_ERROR, "[$Vlan->{errno}] $err_strs{$Vlan->{errno}}");	
  return 0;
 }
elsif ($Vlan->{TOTAL} == 1) {
	form_users({  USER => user_info($list->[0]->[10+$Vlan->{SEARCH_FIELDS_COUNT}]) });
	return 0;
}



my $table = $html->table( { width      => '100%',
                            caption    => "Vlans",
                            border     => 1,
                            title      => \@TITLE,
                            cols_align => ['left', 'left', 'right', 'right', 'left', 'center'],
                            qs         => $pages_qs,
                            pages      => $Vlan->{TOTAL}
                           });

foreach my $line (@$list) {
  
  my @fields_array  = ();
  for(my $i=0; $i<$Vlan->{SEARCH_FIELDS_COUNT}; $i++){
     push @fields_array, $line->[7+$i];
   }
  
  $table->addrow(
   $html->button("$line->[0]", "index=15&UID=$line->[10+$Vlan->{SEARCH_FIELDS_COUNT}]"), 
   "$line->[1]",
   "$line->[2]", 
   "$line->[3]", 
   "$line->[4]", 
   "$line->[5]",
   "$line->[6]", 
   $bool_vals[$line->[8]],
   $status[$line->[7]]
   
   );
}
print $table->show();

$table = $html->table( { width      => '100%',
                         cols_align => ['right', 'right'],
                         rows       => [ [ "$_TOTAL:", "<b>$Vlan->{TOTAL}</b>" ] ]
                        } );
print $table->show();

  return 0;
}


#**********************************************************
# user_vlan
#**********************************************************
sub vlan_user {
 	$Vlan->{UID}=$FORM{UID};	  
  
  if ($FORM{add}) {
    if ($FORM{IP} ne '0.0.0.0') {
      my $INFO = vlan_get_net($FORM{IP}, "$FORM{NETMASK}");
      if ($FORM{IP} ne $INFO->{IF_IP}) {
        print $html->message('info', $_CHANGE, "IP $FORM{IP} -> $INFO->{IF_IP}");
        $FORM{IP} = $INFO->{IF_IP};
       }
     }
    
    $Vlan->add({ %FORM });
    if (! $Vlan->{errno}) {
      $html->message('info', $_INFO, "$_ADDED");	
     }
   }
	elsif($FORM{set}) {
    if ($FORM{IP} ne '0.0.0.0') {
      my $INFO = vlan_get_net($FORM{IP}, "$FORM{NETMASK}");
      if ($FORM{IP} ne $INFO->{IF_IP}) {
        print $html->message('info', $_CHANGE, "IP $FORM{IP} -> $INFO->{IF_IP}");
        $FORM{IP} = $INFO->{IF_IP};
       }
     }

    $Vlan->change({ %FORM });
    if (! $Vlan->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED");	
     }
   }
	elsif($FORM{del}) {
    $Vlan->del();
    if (! $Vlan->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED");	
     }
	 }

  if ($Vlan->{errno}) {
    $html->message('err', $_ERROR, "[$Vlan->{errno}] $err_strs{$Vlan->{errno}}");
   }

  my $user = $Vlan->info($FORM{UID});

  if ($Vlan->{IP} ne '0.0.0.0') {
    my $INFO = vlan_get_net($Vlan->{IP}, "$Vlan->{NETMASK}");
    $Vlan->{IP_RANGE} = "$INFO->{FIRST_IP} - $INFO->{LAST_IP}";
   }

  if($user->{TOTAL} < 1) {
	  $html->message('info', $_INFO, $_NOT_ACTIVE);
	  $Vlan = $Vlan->defaults();

	  $Vlan->{ACTION}='add';
	  $Vlan->{LNG_ACTION}=$_ACTIVATE;
	 }
	else {
	  $Vlan->{ACTION}='set';
	  $Vlan->{LNG_ACTION}=$_CHANGE;
	} 



  $user->{DISABLE}=($user->{DISABLE} == 1) ? ' checked' : '';
  $user->{DHCP}=($user->{DHCP} == 1) ? ' checked' : '';

  my $Nas = Nas->new($db, \%conf);
  $user->{NAS_LIST} = $html->form_select('NAS_ID', 
                                         { 
 	                                          SELECTED          => $FORM{NAS_ID},
 	                                          SEL_MULTI_ARRAY   => $Nas->list({ TYPE      => 'vlan', 
 	                                          	                                PAGE_ROWS => 1000 }),
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });
  

  $html->tpl_show(_include('vlan_user', 'Vlan'), $Vlan);
}


#**********************************************************
# vlan_get_net
#**********************************************************
sub vlan_get_net {
  my ($ip, $netmask) = @_;
  my %INFO = ();

  if ($ip eq '0.0.0.0')  {
  	print "IP not specify\n" if ($debug > 0);
  	return -1;
   }
  #Set minimal mask to 255.255.255.252
  elsif ($netmask eq '255.255.255.255') {
  	$netmask = '255.255.255.252';
   } 

  my @ip_decs = split(/\./, $ip, 4);
  #Make subnetworks

  my $netip_num = ip2int("$ip_decs[0]\.$ip_decs[1]\.$ip_decs[2]\.0"); 
  my $addr_count = ip2int('255.255.255.255') - ip2int($netmask) - 1;
  my $user_ip_int = ip2int($ip);

  while($user_ip_int + $addr_count + 2 > $netip_num ) {
  	if ($user_ip_int > $netip_num && $user_ip_int < $netip_num + $addr_count + 2) {
 	    $INFO{NET_IP}   = int2ip($netip_num);
      $INFO{IF_IP}    = int2ip($netip_num + 1);
      $INFO{USER_IP}  = int2ip($netip_num + 2);
      $INFO{FIRST_IP} = int2ip($netip_num + 2);
      $INFO{LAST_IP}  = int2ip($netip_num + $addr_count);

  	  print "> This net $INFO{NET_IP} / $netmask\n" if ($debug > 3);
  	  last;
     }
 	  $netip_num += $addr_count+2;
   }

  return \%INFO;
}




#**********************************************************
# dv_user_info
#**********************************************************
sub vlan_user_info {
  my $user = $Vlan->info($LIST_PARAMS{UID});
  
  if ($user->{TOTAL} < 1) {
  	$html->message('info', $_INFO, "$_NOT_ACTIVE");
    return 0;	
  }
  
  $Vlan->{STATUS} = $status[$Vlan->{DISABLE}];
  $html->tpl_show(_include('dv_user_info', 'Vlan'), $Vlan);
}




#**********************************************************
#
#**********************************************************
sub vlan_create {
  my ($attr) = @_;	


$debug = $attr->{DEBUG} || 0;
my $debug_output = '';
  
#Get nas servers TYPE: dlink_pb
my $list = $Nas->list({ PAGE_ROWS => 100000, 
 	                      TYPE      => 'vlan', 
 	                      DISABLE   => 0,
 	                      NAS_IDS   => ($attr->{NAS_IDS}) ? $attr->{NAS_IDS} : undef 
	                    });


foreach my $line (@$list) {
  my @commands = ();
  my $parent_interface = '';
  my %INFO = (SUBNETS => undef );
  
  $debug_output .= "NAS ID: $line->[0] MNG_INFO: $line->[10]\@$line->[9] $line->[12]\n" if ($debug > 2);
  
  if ( $line->[12]=~/IP-Interface-Name=\"(.+)\"/)  {
    $parent_interface = $1;
   }
  else {
  	$debug_output .= "!!! No Interface name. Push 'IP-Interface-Name=\"fxp0\"' to NAS RADIUS pairs\n";
  	next;
   }
  
  my $nas_mng_ip_port = $line->[9];
  my $nas_mng_user    = $line->[10];

  my $vlan_list = $Vlan->list({ DISABLE   => 0,
	                              PAGE_ROWS => 100000,
	                              NAS_ID    => $line->[0] });

  my $sudo = ($nas_mng_ip_port ne '') ? $SUDO : '';
  my $vlans_info = vlan_info({ NAS_MNG_IP_PORT => $nas_mng_ip_port,
  	                           NAS_MNG_USER    => $nas_mng_user,
  	                           DEBUG           => $debug
  	                          });

  foreach my $line (@$vlan_list) {
  #Port
     $debug_output .= "$line->[0]: VLAN ID: $line->[4] IP: $line->[5] NETMASK: $line->[9]".
       " USER IPs: $line->[6] DHCP: $line->[8]\n" if ($debug > 2); 
    $INFO{LOGIN}      = $line->[0];
    $INFO{VLAN_ID}    = $line->[4];
    $INFO{VLAN_IF_IP} = $line->[5];
    $INFO{DHCP}       = $line->[8];
    $INFO{VLAN_IF_NETMASK} = $line->[9];
    
    
    if ($INFO{VLAN_IF_IP} eq '0.0.0.0') {
    	$debug_output .= "!!! No IP for user '$line->[0]' Vlan [$INFO{VLAN_ID}] ";
    	next;
     }


    if ($INFO{DHCP} == 1) {
      my ($first_ip, $last_ip)=split(/ - /, $line->[6]);
      $INFO{NETWORK}  = int2ip(ip2int($INFO{VLAN_IF_IP}) - 1);
      $INFO{NETWORK_MASK}  = $INFO{VLAN_IF_NETMASK};
      $INFO{RANGE}    = "range $first_ip $last_ip";
      $INFO{ROUTERS}  = "option routers $INFO{VLAN_IF_IP};";
      $INFO{DESCRIBE} = "Vlan ID: $INFO{VLAN_ID} LOGIN: $INFO{LOGIN}";

      $INFO{SUBNETS} .= $html->tpl_show(
                               _include('dhcphosts_dhcp_conf_subnet', 'Dhcphosts'), 
                               \%INFO,
                               { notprint => 'yes' }
                               );

      #$INFO{SUBNETS} .= $html->tpl_show($subnets, \%INFO, { notprint => 'yes' });
     }

    if (! $vlans_info->{$INFO{VLAN_ID}}) {
      #push @commands, "$sudo $IFCONFIG vlan$INFO{VLAN_ID} destroy;";
    #  if ($NAS_ID > 0) {
    #    mk_acct({ ACCT_STATUS_TYPE => 1
    #  	        LOGIN    => "$line->[0]",
    #  	        IP       => $INFO{USER_IP},
    #  	        NAS_PORT => $INFO{VLAN_ID},
    #  	        NAS_ID   => $NAS_ID
    #  	      });
    #   }
    # 
      push @commands, "$IFCONFIG vlan$INFO{VLAN_ID} create vlan $INFO{VLAN_ID} vlandev $parent_interface";
      push @commands, "$IFCONFIG vlan$INFO{VLAN_ID} inet $INFO{VLAN_IF_IP} netmask $INFO{VLAN_IF_NETMASK}";
      $debug_output .= "Vlan ID: $INFO{VLAN_ID} IP: $INFO{VLAN_IF_IP} Created\n" if ($debug > 0);
     }
    elsif ($vlans_info->{$INFO{VLAN_ID}} && $vlans_info->{$INFO{VLAN_ID}} ne $INFO{VLAN_IF_IP}) {
      push @commands, "$IFCONFIG vlan$INFO{VLAN_ID} destroy ";
      push @commands, "$IFCONFIG vlan$INFO{VLAN_ID} create vlan $INFO{VLAN_ID} vlandev $parent_interface";
      push @commands, "$IFCONFIG vlan$INFO{VLAN_ID} inet $INFO{VLAN_IF_IP} netmask $INFO{VLAN_IF_NETMASK}";
      $debug_output .= "Vlan ID: $INFO{VLAN_ID} IP: $INFO{VLAN_IF_IP} Change\n" if ($debug > 0);
     }
    else {
	    delete $vlans_info->{$INFO{VLAN_ID}};
    }

   }


  # Delete not allow vlans
  while(my($vlan_id, $ip) = each %$vlans_info) {
	  $debug_output .= "DELETED VLAN $vlan_id, $ip\n" if ($debug > 3);
    if ($NAS_ID > 0) {
      my $ACCT_TERMINATE_CAUSE = $attr->{ACCT_TERMINATE_CAUSE} || 6;
      $Ipn->acct_stop({ SESSION_ID => '', 
  	                ACCT_TERMINATE_CAUSE => $ACCT_TERMINATE_CAUSE });
    }
	  push @commands, "$IFCONFIG vlan$vlan_id destroy;";
  }

  #Make commands
  if ($#commands > -1 ) {
    my $cmds = '';
    foreach my $cmd ( @commands ) {
      $cmds .= ($sudo ne '') ? "$sudo $cmd; " : "$cmd; ";
     }

    if ($nas_mng_ip_port ne '') {
      $cmds = "/usr/bin/ssh -i $base_dir/Certs/id_dsa.$nas_mng_user $nas_mng_user\@$nas_mng_ip_port \"$cmds\" ";
     }

   system($cmds) if ($debug < 5);
   $debug_output .= "$cmds\n" if ($debug > 2);
  }
  
  if ($attr->{SUBNETS}) {
    vlan_dhcp({ NAS_MNG_IP_PORT => $nas_mng_ip_port,
  	            NAS_MNG_USER    => $nas_mng_user,
  	            INFO => \%INFO  });
   }


}

  $DEBUG = $debug_output;	
	return $debug_output;
}


#**********************************************************
#
#**********************************************************
sub vlan_info {
  my ($attr) = @_;
	
	my %VLANS = ();
	my $ifconfig = '';
  my $IFCONFIG_CMD =  $IFCONFIG;

  if ($attr->{NAS_MNG_IP_PORT}) {
  	$IFCONFIG_CMD = "/usr/bin/ssh -i $base_dir/Certs/id_dsa.$attr->{NAS_MNG_USER} $attr->{NAS_MNG_USER}\@$attr->{NAS_MNG_IP_PORT} \"$IFCONFIG\"";
   }
	
	print $IFCONFIG_CMD."\n" if ($attr->{DEBUG} && $attr->{DEBUG} > 4);
	open(IFCONFIG, "$IFCONFIG_CMD |") || die "Can't open '$IFCONFIG_CMD' $!";
    while (my $l = <IFCONFIG>) {
      $ifconfig .= $l;
     }  
  close(IFCONFIG)	;


 while($ifconfig =~ /vlan(\d+): .+\n\s+inet (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}).+\n(\s.*[\n\sa-zA-Z0-9]+\n\s.*\n\s.*\n\s.*\n)/gi) {
   my $if_num = $1;
   my $ip    =  $2;
   my $res    = $3;

   $VLANS{$if_num}=$ip;
   print "$if_num IP: $ip $res\n" if ($attr->{DEBUG} && $attr->{DEBUG} > 4);
  }

  return \%VLANS;
}


#**********************************************************
#
#**********************************************************
sub vlan_dhcp {
  my ($attr) = @_;

my $main_tpl = $html->tpl_show(
                               _include('dhcphosts_dhcp_conf_main', 'Dhcphosts'), 
                               $attr->{INFO},
                               { notprint => 'yes' }
                               );



  # DHCP Section
  my $DHCPCONF  = '/usr/local/etc/dhcpd.conf';
  $attr->{INFO}{DATETIME}="DATE: $DATE $TIME";
  my $dhcp_conf = $html->tpl_show($main_tpl, $attr->{INFO}, { notprint => 'yes' });
  #Make dhcp conf and relaod DHCP
  
  $debug_output .= $dhcp_conf if ($debug > 4);
  
  open(FILE, ">$DHCPCONF") || die "Can't open file '$DHCP_CONF' $!\n";
    if ($debug < 5) {
      print FILE $dhcp_conf;
     }
  close(FILE);



 if ($attr->{NAS_MNG_IP_PORT}) {
   my $cmd = "/usr/bin/scp  -i $base_dir/Certs/id_dsa.$attr->{NAS_MNG_USER} $DHCPCONF ".
      "$attr->{NAS_MNG_USER}\@$attr->{NAS_MNG_IP_PORT}:$DHCPCONF; ".
             "/usr/bin/ssh -i $base_dir/Certs/id_dsa.$attr->{NAS_MNG_USER} ".
      "$attr->{NAS_MNG_USER}\@$attr->{NAS_MNG_IP_PORT} \"sudo /usr/local/etc/rc.d/isc-dhcpd restart\"";   

   system($cmd);
   
   if ($debug > 2) {
  	 print $cmd."\n";
    }  
  }

  $DEBUG = $debug_output;	
	return $debug_output;
}

1

