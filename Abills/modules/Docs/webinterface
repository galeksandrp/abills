#/usr/bin/perl
# Dialup vpn web functions


require "Docs.pm";
Docs->import();
my $Docs = Docs->new($db, $admin, $conf);




#**********************************************************
# user_dv
#**********************************************************
sub docs_accounts {


my $list = $Docs->accounts_list( { %LIST_PARAMS } );

if ($Dv->{errno}) {
  message('err', $_ERROR, "[$Docs->{errno}] $err_strs{$Docs->{errno}}");	
  return 0;
 }

#  Date  Customer  Sum  User  Administrators  Time  

my $table = Abills::HTML->table( { width => '100%',
                                   border => 1,
                                   title => ['#', $_DATE, $_CUSTOMER, $_SUM, $_USER, $_ADMIN, $_TIME, '-', '-'],
                                   cols_align => ['right', 'right', 'left', 'right', 'left', 'left', 'right', 'center', 'center'],
                                   qs => $pages_qs,
                                   pages => $Docs->{TOTAL}
                                  } );

foreach my $line (@$list) {
  my $delete = ($permissions{1}{2}) ?  $html->button($_DEL, "index=$index&del=$line->[0]&UID=$line->[10]$pages_qs", "$_DEL ?") : ''; 
  $table->addrow("$line->[0]", "$line->[1]",
   "$line->[2]", "$line->[3]", "$line->[4]", "$line->[5]", 
   "$line->[6]", "$line->[7]", 
   $delete);
}
print $table->show();

#$table = Abills::HTML->table( { width => '100%',
#                                cols_align => ['right', 'right'],
#                                rows => [ [ "$_TOTAL:", "<b>$Dv->{TOTAL}</b>" ] ]
#                               } );
#print $table->show();

  return 0;
}

#**********************************************************
# user_dv
#**********************************************************
sub docs_account_add {
	
 if ($FORM{create}) {
   if ($FORM{sum} < 0.01) {
     message('err', "$_ERROR", "Вкажіть суму");
    }
   elsif(! $FORM{uid}) {
     message('err', "$_ERROR", "$_SELECT_USER");
    }
   elsif(! $FORM{customer}) {
     message('err', "$_ERROR", "Подайте назву організації");
    }
   else {
     mk_acct();
    }
  }
 elsif($FORM{del}) {
   $Docs->del($FORM{del});
   message('info', "$_INFO", "$_DELETED N: [$FORM{del}]");
  }
	
	
  Abills::HTML->tpl_show(_include('docs_account_add', 'Docs'), $Docs);
	
	
}

#**********************************************************
# user_dv
#**********************************************************
sub dv_user {
 	$Dv->{UID}=$FORM{UID};	  
  
  if ($FORM{add}) {
    $Dv->add({ %FORM });
    if (! $Dv->{errno}) {
      message('info', $_INFO, "$_ADDED");	
     }
   }
	elsif($FORM{set}) {
    $Dv->change({ %FORM });
    if (! $Dv->{errno}) {
      message('info', $_INFO, "$_CHANGED");	
     }
   }
	elsif($FORM{del}) {
    $Dv->del();
    if (! $Dv->{errno}) {
      message('info', $_INFO, "$_CHANGED");	
     }
	 }

  my $user = $Dv->info($FORM{UID});

  if($user->{TOTAL} < 1) {
	  print "<p><font color=red>$_NOT_ACTIVE</font></p>";
	  $Dv = $Dv->defaults();
	  $Dv->{ACTION}='add';
	  $Dv->{LNG_ACTION}=$_ADD;
	 }
	else {
	  $Dv->{ACTION}='set';
	  $Dv->{LNG_ACTION}=$_CHANGE;
	} 

  $user->{DISABLE}=' checked' if($user->{DISABLE} == 1);
  Abills::HTML->tpl_show(_include('dv_user', 'Dv'), $Dv);
  #Abills::HTML->tpl_show(_include('dv_tp', 'Dv'), $tarif_info);
}



#**********************************************************
# Tarif plans
# form_tp
#**********************************************************
sub dv_tp {
 
 use Tariffs;
 
 my $tariffs = Tariffs->new($db);
 my $tarif_info;

 my @Octets_Direction = ("$_RECV + $_SEND", $_RECV, $_SEND);
 my @Payment_Types    = ($_PREPAID, $_POSTPAID); 

 $tarif_info = $tariffs->defaults();
 $tarif_info->{LNG_ACTION}=$_ADD;
 $tarif_info->{ACTION}='ADD_TP';


if($FORM{ADD_TP}) {
  $tariffs->add( { %FORM });
  if (! $tariffs->{errno}) {
    message('info', $_ADDED, "$_ADDED $tariffs->{TP_ID}");
   }
 }
elsif (defined($FORM{TP_ID})) {
  $tarif_info = $tariffs->info( $FORM{TP_ID} );

  if ($tariffs->{errno}) {
    message('err', $_ERROR, "[$tariffs->{errno}] $err_strs{$tariffs->{errno}}");	
    return 0;
   }

  $pages_qs .= "&TP_ID=$FORM{TP_ID}&subf=$FORM{subf}";
  $LIST_PARAMS{TP} = $FORM{TP_ID};
  %F_ARGS = ( TP => $tariffs );
  
  func_menu({ 
  	         'ID' =>   $tariffs->{TP_ID}, 
  	         $_NAME => $tariffs->{NAME}
  	       }, 
  	{ 
#  	 $_INFO          => ":TP_ID=$tariffs->{TP_ID}",
#     $_USERS         => "11:TP_ID=$tariffs->{TP_ID}",
#     $_INTERVALS     => "73:TP_ID=$tariffs->{TP_ID}",
#     $_NAS           => "72:TP_ID=$tariffs->{TP_ID}"
  	 },
  	{
  		f_args => { %F_ARGS }
  	 });

  if ($FORM{subf}) {

  	return 0;
   }
  elsif($FORM{change}) {
    $tariffs->change( $FORM{chg}, { %FORM  } );  
     
    if (! $tariffs->{errno}) {
       message('info', $_CHANGED, "$_CHANGED $tariffs->{TP_ID}");
     }
   }

  $tarif_info->{LNG_ACTION}=$_CHANGE;
  $tarif_info->{ACTION}='change';

 }
elsif(defined($FORM{del}) && $FORM{is_js_confirmed}) {
  $tariffs->del($FORM{del});

  if (! $tariffs->{errno}) {
    message('info', $_DELETE, "$_DELETED $FORM{del}");
   }
}


if ($tariffs->{errno}) {
    message('err', $_ERROR, "[$tariffs->{errno}] $err_strs{$tariffs->{errno}}");	
 }

my $i=0;
$tarif_info->{SEL_OCTETS_DIRECTION} = "<select name=OCTETS_DIRECTION>\n";
foreach my $line (@Octets_Direction) {
  $tarif_info->{SEL_OCTETS_DIRECTION} .= "<option value=$i";
  $tarif_info->{SEL_OCTETS_DIRECTION} .= ' selected' if ($tarif_info->{OCTETS_DIRECTION} eq $i);
  $tarif_info->{SEL_OCTETS_DIRECTION} .= ">$Octets_Direction[$i]\n";
  $i++;
}
$tarif_info->{SEL_OCTETS_DIRECTION} .= "</select>\n";




$i=0;

$tarif_info->{PAYMENT_TYPE_SEL} = "<select name=PAYMENT_TYPE>\n";
foreach my $line (@Payment_Types) {
  $tarif_info->{PAYMENT_TYPE_SEL} .= "<option value=$i";
  $tarif_info->{PAYMENT_TYPE_SEL} .= ' selected' if ($tarif_info->{PAYMENT_TYPE} eq $i);
  $tarif_info->{PAYMENT_TYPE_SEL} .= ">$Payment_Types[$i]\n";
  $i++;
}
$tarif_info->{SEL_OCTETS_DIRECTION} .= "</select>\n";



Abills::HTML->tpl_show(_include('dv_tp', 'Dv'), $tarif_info);



my $list = $tariffs->list({ %LIST_PARAMS });	
# Time tariff Name Begin END Day fee Month fee Simultaneously - - - 
my $table = Abills::HTML->table( { width      => '100%',
                                   border     => 1,
                                   title      => ['#', $_NAME,  $_HOUR_TARIF, $_TRAFIC_TARIFS, $_PAYMENT_TYPE, $_DAY_FEE, $_MONTH_FEE, $_SIMULTANEOUSLY, $_AGE,
                                     '-', '-', '-'],
                                   cols_align => ['right', 'left', 'center', 'center', 'center', 'right', 'right', 'right', 'right', 'right', 'right', 'center', 'center', 'center'],
                                   
                                   
                                  } );

my ($delete, $change);
foreach my $line (@$list) {
  if ($permissions{4}{1}) {
    $delete = $html->button($_DEL, "index=$index&del=$line->[0]", "$_DEL ?"); 
    $change = "<a href='$SELF_URL?index=$index&TP_ID=$line->[0]'>$_INFO</a>";
   }
  
  if($FORM{TP_ID} eq $line->[0]) {
  	$table->{rowcolor}=$_COLORS[4];
   }
  else {
  	undef($table->{rowcolor});
   }
  
  $table->addrow("<b>$line->[0]</b>", "<a href='$SELF_URL?index=$index&TP_ID=$line->[0]'>$line->[1]</a>", 
   $bool_vals[$line->[2]], $bool_vals[$line->[3]], $Payment_Types[$line->[4]], $line->[5], $line->[6], $line->[7], $line->[8],
   "<a href='$SELF_URL?index=". ($index+2) ."&subf=73&TP_ID=$line->[0]'>$_INTERVALS</a>",
   $change,
   $delete);
}

print $table->show();

$table = Abills::HTML->table( { width => '100%',
                                cols_align => ['right', 'right'],
                                rows => [ [ "$_TOTAL:", "<b>$tariffs->{TOTAL}</b>" ] ]
                               } );
print $table->show();

	
}

#*******************************************************************
# online users
#*******************************************************************
sub dv_online {

my $nas = Nas->new($db);
use Dv_Sessions;
$sessions = Dv_Sessions->new($db);


my $message;
if ($FORM{ping}) {
  my $res = `/sbin/ping -c 5 $FORM{ping}`;
  message('info', $_INFO,  "Ping  $FORM{ping}<br>Result:<br><pre>$res</pre>");
 }
elsif ($FORM{hangup}) {
  my ($nas_ip_address, $nas_port_id, $acct_session_id, $user_name) = split(/ /, $FORM{hangup}, 4);
  $nas->info( { IP => $nas_ip_address, SECRETKEY => $conf{secretkey} });
  
  if ($nas->{errno}) {
    message('err', $_NAS, "$nas->{errstr}");
  	return 0;
   }

  require "Abills/nas.pl";
  my $ret = hangup($nas, "$nas_port_id", "", "$acct_session_id");
  
  
  if ($ret == 0) {
     $message = "<table width=100%>\n".
         "<tr><th colspan=2 align=left>$_HANGUPED</th></tr>".
         "<tr><td>$_NAS:</td><td>$nas_ip_address</td></tr>".
         "<tr><td>$_PORT:</td><td>$nas_port_id</td></tr>".
         "<tr><td>SESSION_ID:</td><td>$acct_session_id</td></tr>".
         "<tr><td colspan=2>$ret</td></tr>".
         "</table>\n";
         sleep 3;
     
     weblog('hangup', "$user_name");
   }
  elsif ($ret == 1) {
   	$message = 'NAS NOT supported yet';
   }

  message('info', $_INFO, "$message");
 }
elsif($FORM{zap}) {
  my  ($nas_ip_address, $nas_port_id, $acct_session_id)=split(/ /, $FORM{zap}, 3);
  $sessions->zap($nas_ip_address, $nas_port_id, $acct_session_id);

  if ($sessions->{errno}) {
  	 message('err', $_ERROR, "[$sessions->{errno}] $err_strs{$sessions->{errno}}");
  	 return 0;
   }

  $message = "<table width=100%>\n".
     "<tr><th colspan=2 align=left>$_CLOSED</th></tr>".
     "<tr><td>$_NAS:</td><td>$nas_ip_address</td></tr>".
     "<tr><td>$_PORT:</td><td>$nas_port_id</td></tr>".
     "<tr><td>SESSION_ID:</td><td>$acct_session_id</td></tr>".
     "</table>\n";

  $nas->info({IP => $nas_ip_address, SECRETKEY => $conf{secretkey} });
 
  $sessions->list({ ACCT_SESSION_ID => $acct_session_id, 
  	                NAS_PORT => $nas_port_id,
  	                NAS_ID => $nas->{NID} });  
  
  if ($sessions->{TOTAL} > 0) {
    $message .= "<p align=center>[<a href='$SELF?index=$index&tolog=$acct_session_id&nas_ip_address=$nas_ip_address&nas_port_id=$nas_port_id'>add to log</a>]
        [<a href='$SELF?index=$index&del=$acct_session_id&nas_ip_address=$nas_ip_address&nas_port_id=$nas_port_id'>$_DEL</a>]</p>";
   }
  else {
  	$message = "$_EXIST";
  	$sessions->online_del({ NAS_IP_ADDRESS  => $nas_ip_address,,
                          NAS_PORT        => $nas_port_id,
                          ACCT_SESSION_ID => $acct_session_id
                            });

    #my ($sum, $variant, $time_t, $traf_t) = session_sum("$RAD{USER_NAME}", $ACCT_INFO{LOGIN}, $ACCT_INFO{ACCT_SESSION_TIME}, \%ACCT_INFO);
   }

  message('info', $_INFO, $message);
}
elsif($FORM{tolog}) {
  my $ACCT_INFO = $sessions->online_info({ NAS_IP_ADDRESS => $FORM{nas_ip_address},
                NAS_PORT        => $FORM{nas_port_id},
                ACCT_SESSION_ID => $FORM{tolog}
               });

  if ($ACCT_INFO->{TOTAL} < 1) {
    message('err', $_ERROR, "$_NOT_EXIST");	
    return 0;
   }


  require Acct;
  $ACCT_INFO->{INBYTE} =   $ACCT_INFO->{ACCT_INPUT_OCTETS};
  $ACCT_INFO->{OUTBYTE} =  $ACCT_INFO->{ACCT_OUTPUT_OCTETS},;
  $ACCT_INFO->{INBYTE2} =  $ACCT_INFO->{ACCT_EX_INPUT_OCTETS} ;
  $ACCT_INFO->{OUTBYTE2} = $ACCT_INFO->{ACCT_EX_INPUT_OCTETS};
  $ACCT_INFO->{ACCT_STATUS_TYPE} = 'Stop';
  
  my $nas = Nas->new($db);	
  $nas->info({IP        => $ACCT_INFO->{NAS_IP_ADDRESS},
              SECRETKEY => $conf{secretkey}});

  # Exppp VENDOR params           
  Acct->import();
  my $Acct = Acct->new($db);
  my $r = $Acct->accounting($ACCT_INFO, $nas, \%conf);
  

  if ($Acct->{errno}) {
    message('err', $_ERRNO, "$Acct->{errno} $Acct->{errstr}");	
   }
  else {
  	my $table = Abills::HTML->table( { width => '100%'} );
  	while(my($k, $v)=each %$ACCT_INFO) {
 		    $table->addrow($k, $v);
  	  }
  	while(my($k, $v)=each %$Acct) {
 		    $table->addrow($k, $v);
  	  }
  	message('info', $_ADDED, $table->show());	
   }
  
  $sessions->online_del({ NAS_IP_ADDRESS  => $ACCT_INFO->{NAS_IP_ADDRESS},
                          NAS_PORT        => $ACCT_INFO->{NAS_PORT},
                          ACCT_SESSION_ID => $ACCT_INFO->{ACCT_SESSION_ID}
                        });
 }
elsif($FORM{del}) {
  $sessions->online_del({ 
   	            NAS_IP_ADDRESS  => $FORM{nas_ip_address},
                NAS_PORT        => $FORM{nas_port_id},
                ACCT_SESSION_ID => $FORM{del}
                           });

  if (! $sessions->{errno}) {
    my $table = Abills::HTML->table( { width => '100%',
                                rows => [ [ "NAS_IP_ADDRESS",  $FORM{nas_ip_address}],
                                          [ "NAS_PORT",        $FORM{nas_port_id}   ],
                                          [ "ACCT_SESSION_ID", $FORM{del} ] ]
                               } );
    
    message('info', $_DELETED, $table->show());	
   }

}





$form_link = '';
if($FORM{ZAPED}) {
	$LIST_PARAMS{ZAPED}='yes';
	#$qs_params = "&WRONG_ENDED=yes";
	$form_link = "<a href='$SELF_URL?index=$index'>On line</a>";
 } 
else {
 	$sessions->online( { ZAPED => 'yes' } );	
 	$form_link = "<a href='$SELF_URL?index=$index&ZAPED=yes'>$_ZAPED</a> ($sessions->{TOTAL})";
}


$sessions->online( { %LIST_PARAMS } );	
my $dub_ports = $sessions->{dub_ports};
my $dub_logins = $sessions->{dub_logins};
 
my $table = Abills::HTML->table( { width => '100%',
                                border => 1,
                                title => ["$_USER", "$_FIO", "$_PORT", "IP", "$_DURATION", "$_RECV", "$_SENT",
                                "Ex_IN", "Ex_OUT",  "-", "-", "-"],
                                cols_align => ['left', 'left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'center'],
                                qs => $pages_qs,
                               } );


 
  my $bg;
  my $online = $sessions->{nas_sorted};

my $nas_list = $nas->list();

foreach my $nas_row (@$nas_list) {

  $table->{rowcolor}=$_COLORS[0];
  $table->{extra}="colspan=9 class=small";
  $table->addrow("$nas_row->[0]:<b>$nas_row->[1]</b>:$nas_row->[4]" );
  
  my $l = $online->{$nas_row->[4]};
  foreach my $line (@$l) {
    undef($table->{rowcolor});
    undef($table->{extra});
    #print "$line->[0]<br>";
    if (defined($dub_logins->{$line->[0]}))                  { $bg='#FFFF00';    }
    elsif (defined($dub_ports->{$nas_row->[4]}{$line->[2]})) { $bg='#00FF40';    }
    elsif ($line->[9] == 3)                                  { $bg='#FF0000';    }
    else {  $bg = ($bg eq $_COLORS[1]) ? $_COLORS[2] : $_COLORS[1];    }

    my $zap = "(<a href='$SELF_URL?index=$index&zap=$nas_row->[4]+$line->[2]+$line->[11]' title='Hangup'>Z</A>)";
    my $hangup = "(<a href='$SELF_URL?index=$index&hangup=$nas_row->[4]+$line->[2]+$line->[11]+$line->[0]' title='Hangup'>H</A>)";
    my $user_info =  "$_FIO: $line->[1]\n$_PHONE: $line->[12]\n$_VARIANT: $line->[13]\n$_DEPOSIT: $line->[14]\n".
     "$_CREDIT: $line->[15]\n$_SPEED: $line->[16]\nSESSION_ID: $line->[11]\nCID: $line->[17]\nCONNECT_INFO: $line->[18]'";

    $table->addrow("<a href='$SELF_URL?index=11&UID=$line->[10]' title='$user_info'>$line->[0]</a>", 
      $line->[1], $line->[2],  $line->[3],  $line->[4], int2byte($line->[5]), int2byte($line->[6]), 
      int2byte($line->[7]), int2byte($line->[8]),
     "(<a href='$SELF_URL?index=$index&ping=$line->[3]'>P</a>)",
     "$zap",
     "$hangup");
  }
}

my $table2 = Abills::HTML->table( { width => '100%',
                                cols_align => ['right', 'right', 'right'],
                                rows => [ [ "$_TOTAL:", "<b>$sessions->{TOTAL}</b>", "$form_link" ] ]
                               } );
my $total = $table2->show();

print $total . $table->show();
	
}



#**********************************************************
# Whow sessions from log
# dv_sessions()
#**********************************************************
sub dv_sessions {
  my ($list, $sessions) = @_;
#Session List

if (! $list) {
  if (! defined($FORM{sort})) {
	  $LIST_PARAMS{SORT} = 2;
	  $LIST_PARAMS{DESC} = 'DESC';
  }

  use Dv_Sessions;
  $sessions = Dv_Sessions->new($db);
  $list = $sessions->list({ %LIST_PARAMS });	
}



return 0 if ($sessions->{TOTAL} < 1);



my $table = Abills::HTML->table( { width => '100%',
                                border => 1,
                                title => ["$_USER", "$_START", "$_DURATION", "$_TARIF_PLAN", "$_SENT", "$_RECV", 
                                "CID", "NAS", "IP", "$_SUM", "-", "-"],
                                cols_align => ['left', 'right', 'right', 'RIGHT', 'right', 'right', 'right', 'right', 'right', 'right', 'center'],
                                qs => $pages_qs,
                                pages => $sessions->{TOTAL},
                                recs_on_page => $LIST_PARAMS{PAGE_ROWS}
                               } );

my $delete = '';

use Billing;
my $Billing = Billing->new($db);	



foreach my $line (@$list) {
  if ($permissions{3}{1}) {
    $delete = $html->button($_DEL, "index=22$pages_qs&del=$line->[12]+$line->[11]+$line->[7]+$line->[1]+$line->[9]+$line->[0]", "$_DEL Session SESSION_ID $line->[11]?");
   }

  my ($UID, 
      $SUM, 
      $COMPANY_ID, 
      $TARIF_PLAN, 
      $TIME_TARIF, 
      $TRAF_TARIF) = $Billing->session_sum("$line->[0]", 
                                            $line->[13], 
                                            $line->[14], 
                                            {  OUTBYTE  =>  $line->[4],
                                               INBYTE   =>  $line->[5],
                                               OUTBYTE2 =>  0,
                                               INBYTE2  =>  0
                                             }, 
                                            \%conf,
                                            { TP_ID => $line->[3] });
  
  my $test = "$UID, 
      <b>$SUM</b>, 
      $COMPANY_ID, 
      $TARIF_PLAN, 
      $TIME_TARIF, 
      $TRAF_TARIF";

  $table->addrow("<a href='$SELF_URL?index=11&UID=$line->[12]'>$line->[0]</a>", 
     $line->[1], $line->[2],  $line->[3],  
     int2byte($line->[4]), 
     int2byte($line->[5]), $line->[6],
     $line->[7], $line->[10], 
     "$line->[9] $test", 
     "(<a href='$SELF_URL?index=$index&UID=$line->[12]&SESSION_ID=$line->[11]' title='Session Detail'>D</a>)", 
     $delete);
}

print $table->show();
}


#**********************************************************
# dv_use_all_monthes();
#**********************************************************
sub dv_use_allmonthes {

  $FORM{allmonthes}='y';
  dv_use();
}


#**********************************************************
# dv_use();
#**********************************************************
sub dv_use {
	use Dv_Sessions;
  my $sessions = Dv_Sessions->new($db);
  use Fees;
  my $fees = Fees->new($db);


my ($y, $m, $d);

my $type='DATE';

if ($FORM{MONTH}) {
  $LIST_PARAMS{MONTH}=$FORM{MONTH};
	$pages_qs="&MONTH=$LIST_PARAMS{MONTH}";
 }
elsif($FORM{allmonthes}) {
	$type='MONTH';
	$pages_qs="&allmonthes=y";
 }
else {
	($y, $m, $d)=split(/-/, $DATE, 3);
	$LIST_PARAMS{MONTH}="$y-$m";
	$pages_qs="&MONTH=$LIST_PARAMS{MONTH}";
}


if ($FORM{GID}) {
	$LIST_PARAMS{GID}=$FORM{GID};
  $pages_qs.="&GID=$FORM{GID}";
}




$sessions->{GROUPS_SEL} = sel_groups();
Abills::HTML->tpl_show(templates('groups_sel'), $sessions);



my ($tables_sessions, $table_fees);

#Day reposrt
if (defined($FORM{DATE})) {
  ($y, $m, $d)=split(/-/, $FORM{DATE}, 3);	
  my $days = '';
  for ($i=1; $i<=31; $i++) {
     $days .= ($d == $i) ? "<b>$i </b>" : sprintf("<a href='$SELF_URL?index=$index&DATE=%d-%02.f-%02.f$pages_qs'>%d</a> ", $y, $m, $i, $i);
   }

  $table = Abills::HTML->table( { width => '100%',
                                rowcolor => $_COLORS[1],
                                cols_align => ['right', 'left'],
                                rows => [ [ "$_YEAR:",  $y ],
                                          [ "$_MONTH:", $MONTHES[$m] ], 
                                          [ "$_DAY:",   $days ] ]
                               } );

  print $table->show();
  $LIST_PARAMS{DATE}="$FORM{DATE}";
  $pages_qs.="&DATE=$LIST_PARAMS{DATE}";

  #Used Fraffic
  $table_sessions = Abills::HTML->table( { width => '100%',
	                              caption => "$_SESSIONS", 
                                title =>["$_DATE", "$_USERS", "$_SESSIONS", "$_TRAFFIC ", "$_TRAFFIC 2", $_DURATION, $_SUM],
                                cols_align => ['right', 'left', 'right', 'right', 'right', 'right', 'right'],
                                qs => $pages_qs             
                               } );

  my $list = $sessions->reports({ %LIST_PARAMS });
  foreach my $line (@$list) {
    $table_sessions->addrow("<b>$line->[0]</b>", 
      "<a href='$SELF_URL?index=11&subf=22&UID=$line->[7]&DATE=$line->[0]'>$line->[1]</a>", $line->[2], int2byte($line->[3]),  int2byte($line->[4]),  $line->[5], "<b>$line->[6]</b>" );
   }

  $list = $fees->list( { %LIST_PARAMS } );
  $table_fees = Abills::HTML->table( { width      => '100%',
  	                                   caption    => "$_FEES", 
                                       title      => ['ID', $_LOGIN, $_SUM, $_DESCRIBE, $_ADMINS, 'IP', $_DEPOSIT],
                                       cols_align => ['right', 'left', 'right', 'right', 'left', 'left', 'right', 'right'],
                                  } );

  foreach my $line (@$list) {
   $table_fees->addrow("<b>$line->[0]</b>", "<a href='$SELF_URL?index=11&subf=3&DATE=$line->[0]&UID=$line->[8]'>$line->[1]</a>",  
      $line->[3], $line->[4],  "$line->[5]", "$line->[6]", "$line->[7]");
    }

 }
else {
  #Used Traffic
  $table_sessions = Abills::HTML->table( { width => '100%',
	                              caption => "$_SESSIONS", 
                                title =>["$_DATE", "$_USERS", "$_SESSIONS", "$_TRAFFIC ", "$_TRAFFIC 2", $_DURATION, $_SUM],
                                cols_align => ['right', 'right', 'right', 'right', 'right', 'right', 'right'],
                                qs => $pages_qs             
                               } );


  my $list = $sessions->reports({ %LIST_PARAMS });
  foreach my $line (@$list) {
    $table_sessions->addrow("<a href='$SELF_URL?index=$index&$type=$line->[0]$pages_qs'>$line->[0]</a>", 
       $line->[1], $line->[2], int2byte($line->[3]),  int2byte($line->[4]),  $line->[5], "<b>$line->[6]</b>" );
   }

  #Fees###################################################
  $table_fees = Abills::HTML->table( { width => '100%',
	                              caption => $_FEES, 
                                title =>["$_DATE", "$_COUNT", $_SUM],
                                cols_align => ['right', 'right', 'right'],
                               } );


  $list = $fees->reports({ %LIST_PARAMS });
  foreach my $line (@$list) {
    $table_fees->addrow("<a href='$SELF_URL?index=$index&$type=$line->[0]$pages_qs'>$line->[0]</a>", $line->[1], "<b>$line->[2]</b>" );
   }
}



$table = Abills::HTML->table( { width => '100%',
                                cols_align => ['right', 'right', 'right', 'right', 'right', 'right'],
                                rows => [ [ "$_USERS: <b>$sessions->{USERS}</b>",
                                            "$_SESSIONS: <b>$sessions->{SESSIONS}</b>", 
                                            "$_TRAFFIC: <b>". int2byte($sessions->{TRAFFIC}) ."</b>", 
                                            "$_TRAFFIC 2: <b>". int2byte($sessions->{TRAFFIC_2}) ."</b>", 
                                            "$_DURATION: <b>$sessions->{DURATION}</b>", 
                                            "$_SUM: <b>$sessions->{SUM}</b>" ] ],
                                rowcolor => $_COLORS[2]
                               } );


print $table_sessions->show() . $table->show();

$table = Abills::HTML->table( { width      => '100%',
                                cols_align => ['right', 'right', 'right', 'right'],
                                rows       => [ [ "$_TOTAL:", "<b>$fees->{TOTAL}</b>", "$_SUM", "<b>$fees->{SUM}</b>" ] ],
                                rowcolor   => $_COLORS[2]
                               } );
print $table_fees->show() . $table->show();


#Users 
#Sessions
#Traffic 
#Time
#Money





}



#**********************************************************
# dv_error
#**********************************************************
sub dv_error {
	my ($attr) = @_;
  my $PAGE_ROWS = 100;
  $conf{LOGFILE} = "/usr/abills/var/log/abills.log";
  my $login  = ''; 

if ($attr->{USER}) {
  my $user = $attr->{USER};
  $login = $user->{LOGIN};
}
elsif($FORM{UID}) {
  dv_users();
  return 0;
}

my ($list, $types, $totals) = show_log("$login", "$conf{LOGFILE}", { DATE      => $FORM{DATE},
	                                                                   LOG_TYPE  => $FORM{LOG_TYPE},
	                                                                   PG        => $PG,
	                                                                   PAGE_ROWS => $PAGE_ROWS });
my $table = Abills::HTML->table( { width => '100%' } );
foreach my $line (@$list) {
  if ($line =~ m/LOG_WARNING/i) {
    $line = "<font color=red>$line</font>";
   }
  
  $table->addrow($line);
}
print $table->show();


$table = Abills::HTML->table( { width => '100%',
	                              cols_align => ['right', 'right'] } );

$table->addrow("<a href='$SELF_URL?index=40&$pages_qs'>$_TOTAL:</a>", $totals);
while(my($k,$v)=each %$types) {
  $table->addrow("<a href='$SELF_URL?index=40&LOG_TYPE=$k&$pages_qs'>$k</a>", $v);
}
print $table->show();

}


#**********************************************************
# stats
#**********************************************************
sub dv_stats {
	my ($attr) = @_;
 
if (defined($attr->{USER}))	{
	my $user = $attr->{USER};

	$UID = $user->{UID};
	$LIST_PARAMS{UID} = $UID;
	if (! defined($FORM{sort})) {
	  $LIST_PARAMS{SORT}=2;
	  $LIST_PARAMS{DESC}=DESC;
   }

  if (defined($FORM{OP_SID}) and $FORM{OP_SID} eq $COOKIES{OP_SID}) {
 	  message('err', $_ERROR, "$_EXIST $FORM{OP_SID} eq $COOKIES{OP_SID}");
   }
  elsif ($FORM{bm}) {
    use Bills;
    my $Bill = Bills->new($db);
    $Bill->action('add', "$FORM{BILL_ID}", $FORM{sum});
    if($bill->{errno}) {
      message('err', $_ERROR, "[$bill->{errno}] $err_strs{$bill->{errno}}");
     }
    else {
      message('info', $_INFO, "$_ADDED: SUM $FORM{sum}, BILL_ID: $FORM{BILL_ID}");  	
     }
   }
  elsif($FORM{SESSION_ID}) {
  	$pages_qs .= "&SESSION_ID=$FORM{SESSION_ID}";
  	dv_session_detail({ USER => $attr->{USER} });
  	
  	return 0;
  }

}
#elsif($FORM{UID}) {
#	form_users();
#	return 0;
#}	

use Dv_Sessions;
my $sessions = Dv_Sessions->new($db);

if ($FORM{del} && $FORM{is_js_confirmed}) {
	if(! defined($permissions{3}{1})) {
     message('err', $_ERROR, 'ACCESS DENY');
     return 0;
	 } 

	my ($UID, $session_id, $nas_id, $session_start_date, $session_start_time, $sum, $login)=split(/ /, $FORM{del}, 7);
	$sessions->del($UID, $session_id, $nas_id, "$session_start_date $session_start_time");
  if (! $sessions->{errno})	 {
  	message('info', $_DELETED, "$_LOGIN: $login<br> SESSION_ID: $session_id<br> NAS_ID: $nas_id<br> SESSION_START: $session_start_date $session_start_time<br> $_SUM: $sum");
    form_back_money('log', $sum, { UID => $UID }); #
    return 0;
   }
}

if ($sessions->{errno})	 {
	message('err', $_ERROR, "[$sessions->{errno}] $err_strs{$sessions->{errno}}");
 }


if ($FORM{rows}) {
  $LIST_PARAMS{PAGE_ROWS}=$FORM{rows};
  $conf{list_max_recs}=$FORM{rows};
  $pages_qs .= "&rows=$conf{list_max_recs}";
 }


#PEriods totals
my $list = $sessions->periods_totals({ %LIST_PARAMS });
my $table = Abills::HTML->table( { width => '100%',
                                   title_plain => ["$_PERIOD", "$_DURATION", "$_SEND", "$_RECV", "$_SUM"],
                                   cols_align => ['left', 'right', 'right', 'right', 'right'],
                                   rowcolor => $_COLORS[1]
                                  } );
for(my $i = 0; $i < 5; $i++) {
	  $table->addrow("<a href='$SELF_URL?index=$index&period=$i$pages_qs'>$PERIODS[$i]</a>", "$sessions->{'duration_'. $i}",
	  int2byte($sessions->{'sent_'. $i}), int2byte($sessions->{'recv_'. $i}), int2byte($sessions->{'sum_'. $i}));
 }
print $table->show();


print "<form action=$SELF_URL>
<input type=hidden name=index value='$index'>
<input type=hidden name=UID value='$UID'>\n";

$table = Abills::HTML->table( { width => '640',
	                                 rowcolor => $_COLORS[0],
                                   title_plain => [ "$_FROM: ", Abills::HTML->date_fld('from', { MONTHES => \@MONTHES} ),
                                   "$_TO: ", Abills::HTML->date_fld('to', { MONTHES => \@MONTHES } ),
                                   "$_ROWS: ",  "<input type=text name=rows value='$conf{list_max_recs}' size=4>",
                                   "<input type=submit name=show value=$_SHOW>"
                                    ],                                   
                                  } );
print $table->show();
print "</form>\n";

dv_stats_calculation($sessions);

if (defined($FORM{show})) {
  $pages_qs .= "&show=y&fromd=$FORM{fromd}&fromm=$FORM{fromm}&fromy=$FORM{fromy}&tod=$FORM{tod}&tom=$FORM{tom}&toy=$FORM{toy}";
  $FORM{fromm}++;
  $FORM{tom}++;
  $FORM{fromm} = sprintf("%.2d", $FORM{fromm}++);
  $FORM{tom} = sprintf("%.2d", $FORM{tom}++);
  $LIST_PARAMS{INTERVAL} = "$FORM{fromy}-$FORM{fromm}-$FORM{fromd}/$FORM{toy}-$FORM{tom}-$FORM{tod}";
 }
elsif (defined($FORM{period})) {
	$LIST_PARAMS{PERIOD} = $FORM{period}+0; 
	$pages_qs .= "&period=$FORM{period}";
}
elsif($FORM{DATE}) {
	$LIST_PARAMS{DATE} = $FORM{DATE}; 
	$pages_qs .= "&DATE=$FORM{DATE}";
}

if (! defined($FORM{sort})) {
  $LIST_PARAMS{SORT}=2;
  $LIST_PARAMS{DESC}=DESC;
 }

#Session List
$list = $sessions->list({ %LIST_PARAMS });	

$table = Abills::HTML->table( { width => '640',
	                              rowcolor => $_COLORS[1],
                                title_plain => ["$_SESSIONS", "$_DURATION", "$_TRAFFIC", "$_SUM"],
                                cols_align => ['right', 'right', 'right', 'right'],
                                rows => [ [ $sessions->{TOTAL}, $sessions->{DURATION}, int2byte($sessions->{TRAFFIC}), $sessions->{SUM} ] ],
                               } );
print "<p>" . $table->show() . "</p>\n";

dv_sessions($list, $sessions);
}


#*******************************************************************
# WHERE period
# base_state($where, $period);
#*******************************************************************
sub dv_stats_calculation  {
 my ($sessions) = @_;

$sessions->calculation({ %LIST_PARAMS }); 


my $table = Abills::HTML->table( { width => '640',
	                              rowcolor => $_COLORS[1],
                                title_plain => ["-", "$_MIN", "$_MAX", "$_AVG"],
                                cols_align => ['left', 'right', 'right', 'right'],
                                rows => [ [ $_DURATION,  $sessions->{min_dur}, $sessions->{max_dur}, $sessions->{avg_dur} ],
                                          [ "$_TRAFFIC $_RECV", int2byte($sessions->{min_recv}), int2byte($sessions->{max_recv}), int2byte($sessions->{avg_recv}) ],
                                          [ "$_TRAFFIC $_SENT", int2byte($sessions->{min_sent}), int2byte($sessions->{max_sent}), int2byte($sessions->{avg_sent}) ],
                                          [ "$_TRAFFIC $_SUM",  int2byte($sessions->{min_sum}),  int2byte($sessions->{max_sum}),  int2byte($sessions->{avg_sum}) ]
                                        ]
                               } );
print $table->show();
}

#**********************************************************
# form_stats
#**********************************************************
sub dv_user_stats {
	#my ($user) = @_;
	#$UID = $user->{UID};
	#$LIST_PARAMS{UID} = $user->{UID};
	if (! defined($FORM{sort})) {
	  $LIST_PARAMS{SORT}=2;
	  $LIST_PARAMS{DESC}=DESC;
   }

use Dv_Sessions;
my $sessions = Dv_Sessions->new($db);

if ($sessions->{errno})	 {
	message('err', $_ERROR, "[$sessions->{errno}] $err_strs{$sessions->{errno}}");
 }


if ($FORM{rows}) {
  $LIST_PARAMS{PAGE_ROWS}=$FORM{rows};
  $conf{list_max_recs}=$FORM{rows};
  $pages_qs .= "&rows=$conf{list_max_recs}";
 }


#PEriods totals
my $list = $sessions->periods_totals({ %LIST_PARAMS });
my $table = Abills::HTML->table( { width => '100%',
                                   title_plain => ["$_PERIOD", "$_DURATION", "$_SEND", "$_RECV", "$_SUM"],
                                   cols_align => ['left', 'right', 'right', 'right', 'right'],
                                   rowcolor => $_COLORS[1]
                                  } );
for(my $i = 0; $i < 5; $i++) {
	  $table->addrow("<a href='$SELF_URL?index=$index&period=$i$pages_qs'>$PERIODS[$i]</a>", "$sessions->{'duration_'. $i}",
	  int2byte($sessions->{'sent_'. $i}), int2byte($sessions->{'recv_'. $i}), int2byte($sessions->{'sum_'. $i}));
 }
print $table->show();


print "<form action=$SELF_URL>
<input type=hidden name=sid value='$sid'>
<input type=hidden name=index value='$index'>
<input type=hidden name=UID value='$UID'>\n";

$table = Abills::HTML->table( { width => '640',
	                                 rowcolor => $_COLORS[0],
                                   title_plain => [ "$_FROM: ", Abills::HTML->date_fld('from', { MONTHES => \@MONTHES} ),
                                   "$_TO: ", Abills::HTML->date_fld('to', { MONTHES => \@MONTHES } ),
                                   "$_ROWS: ",  "<input type=text name=rows value='$conf{list_max_recs}' size=4>",
                                   "<input type=submit name=show value=$_SHOW>"
                                    ],                                   
                                  } );
print $table->show();
print "</form>\n";

dv_stats_calculation($sessions);

if (defined($FORM{show})) {
  $pages_qs .= "&show=y&fromd=$FORM{fromd}&fromm=$FORM{fromm}&fromy=$FORM{fromy}&tod=$FORM{tod}&tom=$FORM{tom}&toy=$FORM{toy}";
  $FORM{fromm}++;
  $FORM{tom}++;
  $FORM{fromm} = sprintf("%.2d", $FORM{fromm}++);
  $FORM{tom} = sprintf("%.2d", $FORM{tom}++);
  $LIST_PARAMS{INTERVAL} = "$FORM{fromy}-$FORM{fromm}-$FORM{fromd}/$FORM{toy}-$FORM{tom}-$FORM{tod}";
 }
elsif ($FORM{period}) {
	$LIST_PARAMS{PERIOD} = $FORM{period}; 
	$pages_qs .= "&period=$FORM{period}";
}

#if (! defined($FORM{sort})) {
#  $LIST_PARAMS{SORT}=2;
#  $LIST_PARAMS{DESC}=DESC;
# }

#Session List
$list = $sessions->list({ %LIST_PARAMS });	

$table = Abills::HTML->table( { width => '640',
	                              rowcolor => $_COLORS[1],
                                title_plain => ["$_SESSIONS", "$_DURATION", "$_TRAFFIC", "$_SUM"],
                                cols_align => ['right', 'right', 'right', 'right'],
                                rows => [ [ $sessions->{TOTAL}, $sessions->{DURATION}, int2byte($sessions->{TRAFFIC}), $sessions->{SUM} ] ],
                               } );
print "<p>" . $table->show() . "</p>\n";	

dv_sessions($list, $sessions);
#dv_show_sessions($list, $sessions);
}



#**********************************************************
# dv_session_detail
#**********************************************************
sub dv_session_detail {
	my ($attr) = @_;
  my $user;

  use Dv_Sessions;
  my $sessions = Dv_Sessions->new($db);

 
if (defined($attr->{USER}))	{
	$user = $attr->{USER};
	$LIST_PARAMS{LOGIN}=$user->{LOGIN};
}
elsif($FORM{UID}) {
	dv_user();
	return 0;
}	



$sessions->session_detail({ %FORM });

$sessions->{_SENT}=int2byte($sessions->{SENT}); 
$sessions->{_RECV}=int2byte($sessions->{RECV}); 
$sessions->{_SENT2}=int2byte($sessions->{SENT2});
$sessions->{_RECV2}=int2byte($sessions->{RECV2});

Abills::HTML->tpl_show(_include('dv_session_detail', 'Dv'), $sessions);


my $list = $sessions->detail_list({ %LIST_PARAMS });

  my $table = Abills::HTML->table({ width => '100%',
                                   border => 1,
                                   title => ["LAST_UPDATE", "$_SESSION_ID", "NAS_ID", "SENT", "RECV", "SENT2", "RECV2"],
                                   cols_align => ['right', 'right', 'right', 'right', 'right', 'right', 'right'],
                                   pages => $sessions->{TOTAL},
                                   qs => $pages_qs
                                  } );

 foreach my $line (@$list) {
    $table->addrow($line->[0],  $line->[1], $line->[2], $line->[3],  $line->[4], $line->[5], $line->[6]);
  }
 print $table->show();


$table = Abills::HTML->table( { width => '100%',
                                cols_align => ['right', 'right'],
                                rows => [ ["$_TOTAL:", "<b>$sessions->{TOTAL}</b>" ] ]
                               } );
print $table->show();



}


sub dv_user_info {
  my $user = $Dv->info($LIST_PARAMS{UID});
  Abills::HTML->tpl_show(_include('dv_user_info', 'Dv'), $Dv);
}




#**********************************************************
# daily_fees
#**********************************************************
sub dv_daily_fees {
 
 require Tariffs;
 Tariffs->import();
 my $tariffs = Tariffs->new($db);

 require Fees;
 Fees->import();
 my $fees = Fees->new($db, $admin);

 my $list = $tariffs->list({ %LIST_PARAMS });

 foreach my $line (@$list) {
 	 if ($line->[5] > 0) {
# 	   print "$line->[0] $line->[6]\n";
 	   $LIST_PARAMS{TP}=$line->[0];

 	   my $ulist = $Dv->list({ 
         ACTIVATE => "<=$DATE",
         EXPIRE => ">$DATE",
         DISABLE => '0',
         TP => $line->[0]
 	   	 });

#     .id, u.fio, if(acct.id IS NULL, u.deposit, acct.deposit), u.credit, tp.name, u.disable, 
#      u.uid, u.account_id, u.email, u.tp_id
     foreach my $u (@$ulist) {
        my %user = (
            ACCOUNT_ID => $u->[7],
            UID => $u->[6],
            BILL_ID => $u->[12]  
         );
#          print " $u->[0] $line->[6] $u->[2] $u->[3]\n"; 	

        if($line->[5] > 0
            || $conf{negative_deposit} eq 'yes'
            || $u->[2] + $u->[3] > 0 ) {
          $fees->take(\%user, $line->[5], { DESCRIBE => "$_DAY_FEE" } );  
         }
      }

 	  }
  }
}





#**********************************************************
# monthly_fees
#**********************************************************
sub dv_monthly_fees {
 require Tariffs;
 Tariffs->import();
 my $tariffs = Tariffs->new($db);

 require Fees;
 Fees->import();
 my $fees = Fees->new($db, $admin);

 my $list = $tariffs->list({ %LIST_PARAMS });

 #print "$y, $m, $d\n";

 $m--;
 
my $date_unixtime =  mktime(0, 0, 0, $d, $m, $y - 1900, 0, 0, 0);
 
 foreach my $line (@$list) {
 	 if ($line->[6] > 0) {
# 	   print "$line->[0] $line->[7]\n";
 	   $LIST_PARAMS{TP}=$line->[0];

 	   my $ulist = $users->list({ 
         ACTIVATE => "<=$DATE",
         EXPIRE => ">$DATE",
         DISABLE => '0',
         TP => $line->[0]
 	   	 });
#u.id, u.fio, if(acct.id IS NULL, u.deposit, acct.deposit), u.credit, tp.name, u.disable, 
#      u.uid, u.account_id, u.email, u.tp_id, u.activate, u.expire


     foreach my $u (@$ulist) {
          my %user = (
            ACCOUNT_ID => $u->[7],
            UID => $u->[6],
            BILL_ID => $u->[12]   
           );

        if ($u->[10] eq '0000-00-00' and $d == 1) {
#          print " $u->[0] $line->[6] $u->[2] $u->[3] $u->[10] - $u->[11]\n"; 	
          if($line->[4] > 0 
              || $conf{negative_deposit} eq 'yes'
              || $u->[2] + $u->[3] > 0 ) {
            $fees->take(\%user, $line->[6], { DESCRIBE => "$_MONTH_FEE" } );  
           }
         }
        elsif($u->[10] ne '0000-00-00') {
          my ($activate_y, $activate_m, $activate_d)=split(/-/, $u->[10], 3);
          $activate_m--;
          my $active_unixtime =  mktime(0, 0, 0, $activate_d, $activate_m, $activate_y - 1900, 0, 0, 0);

          if ($date_unixtime - $active_unixtime > 30 * 86400) {
            #my $aa = (strftime "%Y-%m-%d", localtime($active_unixtime));
            $fees->take(\%user, $line->[7], { DESCRIBE => "$_MONTH_FEE" } );
            $users->change($u->[6], { ACTIVATE => $DATE } );
           }
#          print "   $u->[0] $line->[6] $u->[2] $u->[3] $u->[10] - $u->[11]\n"; 	
         }

      }

 	  }
  }
}


#**********************************************************
# user_warnings
#**********************************************************
sub dv_users_warning_messages {

my %LIST_PARAMS = (USERS_WARNINGS => 'y' ) ;
my $list = $Dv->list( { %LIST_PARAMS } );
$ADMIN_REPORT{DATE} = $YESTERDAY;

$ADMIN_REPORT{USERS_WARNINGS} = sprintf("%-14s| %4s|%-20s| %9s| %8s|\n", $_LOGIN, 'TP', $_VARIANT, $_DEPOSIT, $_CREDIT).
   "---------------------------------------------------------------\n";

return 0 if ($Dv->{TOTAL} < 1);
my %USER_INFO = ();

foreach my $line (@$list) {
  #u.id, u.email, u.tp_id, u.credit, u.deposit, tp.name, tp.uplimit

  $USER_INFO{LOGIN}=$line->[0];
  $USER_INFO{TP_NAME}=$line->[5];
  $USER_INFO{TP_ID}=$line->[2];
  $USER_INFO{DEPOSIT}=$line->[4];
  $USER_INFO{CREDIT}=$line->[3];
  
  my $email = ($line->[1] eq '') ? "$line->[1]\@$conf{USERS_MAIL_DOMAIN}" : $line->[1];
  $ADMIN_REPORT{USERS_WARNINGS} .= sprintf ("%-14s| %4d|%-20s| %9.4f| %8.2f|\n", 
  $USER_INFO{LOGIN}, $USER_INFO{TP_ID}, $USER_INFO{TP_NAME},  $USER_INFO{DEPOSIT}, $USER_INFO{CREDIT});
  
  my $message = Abills::HTML->tpl_show(templates('users_warning_messages'), \%USER_INFO, { notprint => 'yes' });

  #sendmail("$conf{ADMIN_MAIL}", "$email", "Попередження сервера статистики.", 
  #            "$message", "$conf{MAIL_CHARSET}", "2 (High)");
}

$ADMIN_REPORT{USERS_WARNINGS} .= "---------------------------------------------------------------
$_TOTAL: $users->{TOTAL}\n";

}

1

