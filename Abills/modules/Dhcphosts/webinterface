#!/usr/bin/perl
# Dhcphosts




use Dhcphosts;
my $Dhcphosts = Dhcphosts->new($db, $admin, \%conf);

use Abills::Base;
use Socket;

use Nas;
my $Nas = Nas->new($db, \%conf);

#*******************************************************************
# 
#*******************************************************************
sub dhcphosts_periodic {
 my ($attr) = @_;

 my $debug = $attr->{DEBUG} || 0;
 my $debug_output = '';
 $debug_output .= "Dhcphosts: Dhcp reconfigure\n" if ($debug > 1);
 
  dhcphosts_config({ NETWORKS => '-', 
                     reconfig => 1,
                     QUITE    => 1,
                     DEBUG    => $attr->{DEBUG}
	                  });

  $DEBUG .= $debug_output;
  return $debug_output;
}

#*******************************************************************
# 
#*******************************************************************
sub dhcphosts_mac_static {

if ($FORM{MAKE}) {
  open(FILE, ">$conf{TPL_DIR}/Dhcphosts_dhcphosts_ipguard_static.tpl") || $html->message('err', $_ERROR, "Can't open file '$conf{TPL_DIR}/Dhcphosts_dhcphosts_ipguard_static.tpl' $!\n");
	  print FILE "$FORM{ETHERS}";
	close(FILE);

  print $html->message('info', $_INFO, "$_CHANGED '$conf{TPL_DIR}/Dhcphosts_dhcphosts_ipguard_static.tpl'");
 }

	my $ethers_content =  $html->tpl_show(_include('dhcphosts_ipguard_static', 'Dhcphosts'), 
                                                           {}, { OUTPUT2RETURN => 1 });
  $html->tpl_show(_include('dhcphosts_ipguard', 'Dhcphosts'), { ETHER_CONTENT => "$ethers_content",
	 	                                                           });

}

#*******************************************************************
# 
#*******************************************************************
sub dhcphosts_mac_block_show {
   my ($attr) = @_;
   my $debug = $attr->{DEBUG} || 0;

   my $ethers_content = "# $DATE $TIME\n# ABillS IPGuard CONFIG: \n";

   my @pair_status = ('ACCEPT', 'DENY');
   my $list = $Dhcphosts->hosts_list({ STATUS                     => $LIST_PARAMS{STATUS}, 
   	                                   PAGE_ROWS                  => 1000000,
   	                                   DHCPHOSTS_DEPOSITCHECK     => $conf{DHCPHOSTS_DEPOSITCHECK},
   	                                   DHCPHOSTS_EXT_DEPOSITCHECK => $conf{DHCPHOSTS_EXT_DEPOSITCHECK}
                                     });

   #Get Templates default for IP Guard
   my $DENY_TEMPLATE   =  ($conf{DHCPHOSTS_IPGUARD_DENY_TPL}) ? $conf{DHCPHOSTS_IPGUARD_DENY_TPL} : '';
   my $ACCEPT_TEMPLATE =  ($conf{DHCPHOSTS_IPGUARD_ACCEPT_TPL}) ? $conf{DHCPHOSTS_IPGUARD_ACCEPT_TPL} : '%MAC% %IP% # %LOGIN%; %STATUS%; %DEPOSIT%'; 
   
	 foreach my $line (@$list) {
      #Block
      if ($line->[6] eq '') {
        next;
       }
	    elsif (! defined($line->[1])) {
	     	print "Warning: IP: $ip MAC: $mac Record don't have users\n";
	     	next;
	     }



      #Chack status
      my $status = ($line->[10] == 1 || $line->[14+$Dhcphosts->{SEARCH_FIELDS_COUNT}] == 1 ) ? 1 : 0;	    

      my $deposit = 0;
      
      if (defined($conf{DHCPHOSTS_EXT_DEPOSITCHECK})) {
      	$deposit = $line->[15 + $Dhcphosts->{SEARCH_FIELDS_COUNT}];
       }
      elsif(defined($conf{DHCPHOSTS_DEPOSITCHECK})) {
      	$deposit = $line->[15 + $Dhcphosts->{SEARCH_FIELDS_COUNT}];
       }

      $deposit = 0 if (! $deposit);

      
      my %INFO = (
            IP      => ($conf{DHCPHOSTS_IPGUARD_FORMAT} && $conf{DHCPHOSTS_IPGUARD_FORMAT} eq 'MAC') ? '0.0.0.0' : $line->[11],
      	    MAC     => $line->[6],
      	    LOGIN   => $line->[1],
      	    DEPOSIT => $deposit,
      	    UID     => $line->[12 + $Dhcphosts->{SEARCH_FIELDS_COUNT}],
      	    EXPIRE  => $line->[7]
        ); 
      
      #DENY
      if ($status == 1 || ((defined($conf{DHCPHOSTS_DEPOSITCHECK}) && $deposit < $conf{DHCPHOSTS_DEPOSITCHECK}) || (defined($conf{DHCPHOSTS_EXT_DEPOSITCHECK}) && $deposit < $conf{DHCPHOSTS_EXT_DEPOSITCHECK} ) ) ) {

         next if ($DENY_TEMPLATE eq '');
         $ethers_content .= tpl_parse($DENY_TEMPLATE, {  
      	                              STATUS  => $pair_status[1],
       	                  	          %INFO
          	                         });
       }
      #Allow
      else {
        next if ($ACCEPT_TEMPLATE eq '');
        $ethers_content .= tpl_parse($ACCEPT_TEMPLATE, {  
      	                              STATUS  => $pair_status[$status],
      	                              %INFO
      	                         }); 
      	
       }

      $ethers_content .= "\n";
      
    };

  $ethers_content .= $html->tpl_show(_include('dhcphosts_ipguard_static', 'Dhcphosts'), 
                                                           undef, { OUTPUT2RETURN => 1 });


	return  $ethers_content;
}

#*******************************************************************
# 
#*******************************************************************
sub dhcphosts_mac_block_make {
	my ($attr) = shift;

	if (! $attr->{ETHER_CONTENT}) {
	  $attr->{ETHER_CONTENT} = dhcphosts_mac_block_show();			
	 }

	my $debug = $attr->{DEBUG} || 0;
	my $debug_output = '';
	$debug_output = "$attr->{ETHER_CONTENT}\n" if ($debug > 1);
	$DEBUG .= $debug_output;
	
	if ($debug > 4) {
		
		return 1;
	 }
	
	open(FILE, ">$var_dir/ipguard") || return "Can't open '$var_dir/ipguard' $!";
	  print FILE "$attr->{ETHER_CONTENT}";
	close(FILE);

  $DEBUG .= $debug_output;
  
	return 1;
}

#*******************************************************************
# 
#*******************************************************************
sub dhcphosts_mac_block {
  
  
  if ($FORM{MAKE}) {
  	my $ret = dhcphosts_mac_block_make($FORM{ETHER_CONTENT});
  	if ($ret eq '1') {
  	  print $html->message('info', $_INFO, "$_CHANGED '$var_dir/ipguard'");
  	 }
    else {
    	print $html->message('err', $_ERROR, "$ret");
     }
   }
	
	my $ethers_content = dhcphosts_mac_block_show();	
  $html->tpl_show(_include('dhcphosts_ipguard', 'Dhcphosts'), { ETHER_CONTENT => "$ethers_content",
	 	                                                            FILE          => "$var_dir/ipguard"
	 	                                                           });
	 
}

#*******************************************************************
# Show dhcpd.leases information
#*******************************************************************
sub dhcphosts_monitor {

 if (! $conf{DHCPHOSTS_LEASES}) {
  	print $html->message('err', $_ERROR, "$_NOT_EXIST ". '$conf{DHCPHOSTS_LEASES}');
  	return 0;
  }
 
 if ($FORM{ping}) {
  if ($FORM{ping} =~ /^(\d){1,3}\.(\d){1,3}\.(\d){1,3}\.(\d){1,3}$/) {
    my $res = `/sbin/ping -c 5 $FORM{ping}`;
    $html->message('info', $_INFO,  "Ping  $FORM{ping}<br>Result:<br><pre>$res</pre>");
   }
  else {
    $html->message('err', $_ERROR,  "$ERR_WRONG_DATA: IP");
   }
 }


 #Get info from DB
 if ($conf{DHCPHOSTS_LEASES} eq 'db') {
   my %state_hash = ('unknown'   => 0,
                     'free'      => 1,
                     'active'    => 2,
                     'abandoned' => 3);

   my %state_hash_rev = reverse %state_hash;

   form_search({ SIMPLE => {
   	                        "$_HOSTS_HOSTNAME"=> 'HOSTNAME',
   	                        'IP'              => 'IP',
                            'MAC'             => 'HARDWARE',			
                            "$_EXPIRE"        => 'ENDS',
                            'CIRCUIT_ID'      => 'CIRCUIT_ID',
                            'REMOTE_ID'       => 'REMOTE_ID',
                            'STATE'           => { '' => '', %state_hash_rev }
   	                         }, 

	            });



	 my $list = $Dhcphosts->leases_list({ %LIST_PARAMS });
	 
   my $table = $html->table({ width    => '100%',
                     			  caption    => "$_HOSTS",
				                    title      => ["$_USER", 'IP', "$_START", "MAC", "$_HOSTS",  "abandoned", "$_STATE", "remote-id", "circuit_id", "-" ],
				                    cols_align => ['left', 'right', 'right', 'right', 'left', 'center:noprint', 'center:noprint','center:noprint', 'center:noprint' ],
				                    ID         => 'MONITOR_DHCP',
                  				  qs         => $pages_qs,
				                    pages      => $Dhcphosts->{TOTAL}
                          });

	 
   foreach my $line (@$list) {
      $table->addrow($line->[0],
                     $line->[1],
                     $line->[2],
                     $line->[3],
                     $line->[4],
                     $line->[5],
                     $state_hash_rev{$line->[6]},
                     $line->[7],
                     $line->[8],
                     "(". $html->button('P', "index=$index&ping=$line->[1]", { TITLE => 'ping' }) .")"
                     );
    }
   print  $table->show();

  $table = $html->table( { width      => '100%',
                           cols_align => ['right', 'right'],
                           rows       => [ [ "$_TOTAL:", $html->b($Dhcphosts->{TOTAL}) ] ]
                       } );
  print $table->show();

   return 0;
  }

 
 #Get info from dhcpd.leased 
 my $dhcp_hash = leaseparse($conf{DHCPHOSTS_LEASES});

 #Get user info from DB
 $LIST_PARAMS{PAGE_ROWS}=100000;
 $LIST_PARAMS{IPS}      = join(", ",  keys %$dhcp_hash); 
 
 my $hosts_list = $Dhcphosts->hosts_list({ %LIST_PARAMS });
 
 my $table = $html->table({ width      => '100%',
                     			  caption    => "$_HOSTS",
				                    title      => ["$_USER", 'IP', "$_START", "MAC", "$_HOSTS",  "abandoned", "$_STATE", "remote-id", "circuit_id", "-" ],
				                    cols_align => ['left', 'right', 'right', 'right', 'left', 'center:noprint', 'center:noprint','center:noprint', 'center:noprint' ],
				                    ID         => 'MONITOR_DHCP'
                          });

 $table->{rowcolor}=$_COLORS[0];
 $table->{extra}="colspan='9'";
 $table->addrow("$_TOTAL: $Dhcphosts->{TOTAL}");
 $table->{extra}=undef;
 $table->{rowcolor}=undef;

 #Get info derect from file
 foreach my $line (@$hosts_list) {
      $table->addrow(
                     $html->button("$line->[1]", "index=15&UID=". $line->[12+$Dhcphosts->{SEARCH_FIELDS_COUNT}]), 
                     $line->[11],
                     $dhcp_hash->{$line->[2]}{starts},
                     $dhcp_hash->{$line->[2]}{hardware},
                     $dhcp_hash->{$line->[2]}{'client-hostname'},
                     $dhcp_hash->{$line->[2]}{abandoned},
                     $dhcp_hash->{$line->[2]}{state},
                     $dhcp_hash->{$line->[2]}{remote_id},
                     $dhcp_hash->{$line->[2]}{circuit_id},
                     "(". $html->button('P', "index=$index&ping=$line->[2]", { TITLE => 'ping' }) .")",
                     );

     delete $dhcp_hash->{$line->[2]};
  }
 
 my @unregistred = sort keys %$dhcp_hash;
 $table->{rowcolor}=$_COLORS[0];
 $table->{extra}="colspan='9'";
 $table->addrow("$_NOT_EXIST $_TOTAL: ". ($#unregistred + 1));
 $table->{extra}=undef;
 $table->{rowcolor}=undef;

 foreach my $ip ( @unregistred ) {
      $table->addrow(
                     '', 
                     $ip,
                     $dhcp_hash->{$ip}{starts},
                     $dhcp_hash->{$ip}{hardware},
                     $dhcp_hash->{$ip}{'client-hostname'},
                     $dhcp_hash->{$ip}{abandoned},
                     $dhcp_hash->{$ip}{state},
                     $dhcp_hash->{$ip}{remote_id},
                     $dhcp_hash->{$ip}{circuit_id},

                     "(". $html->button('P', "index=$index&ping=$ip", { TITLE => 'ping' }) .")",

                     );
  }



 print $table->show();	

}


#*******************************************************************
# Parse dhcpd.leases
#*******************************************************************
sub leaseparse {
   my ($logfile) = @_;
   my ( %list, $ip );

   open (FILE, $logfile) or print "Can't read file '$logfile' $!";
   
   my $state = '';
   while (<FILE>) {
      next if /^#|^$/;

      if (/^lease (\d+\.\d+\.\d+\.\d+)/) {
         $ip = $1; 
         $list{$ip}{ip}=sprintf("%s", $ip);
       }
      # $list{$ip}{state} ne 'active' &&
      elsif ( /^\s*binding state ([a-zA-Z]{4,6});/) {
      	$state = sprintf("%s", $1);
      	$list{$ip}{state}=$state if ($state eq 'active');
       }
      elsif (/^\s*client-hostname "(.*)";/) {
     	  $list{$ip}{'client-hostname'}=sprintf("%s", $1) ;
       }
      elsif (/^\s*hardware ethernet (.*);/) {
        $list{$ip}{hardware}=$1;
       }


      /^\s*starts \d (.*);/ && (  $list{$ip}{starts}=sprintf("%-21s", $1) );
      /^\s*(abandoned).*/ && (    $list{$ip}{abandoned}=sprintf("%-19s", $1) );
      /^\s*option agent.circuit-id ([a-b0-9:]+);/ && (    $list{$ip}{circuit_id}=sprintf("%s", $1) );
      /^\s*option agent.remote-id ([a-b0-9:]+);/ && (    $list{$ip}{remote_id}=sprintf("%s", $1) );
   }

   close FILE;

   return \%list;
}



#*******************************************************************
# 
# 
#*******************************************************************
sub dhcphosts_networks {
  
 
  $Dhcphosts->{ACTION}='add';
  $Dhcphosts->{ACTION_LNG}=$_ADD;

  if ($FORM{NAME} and $FORM{NAME} !~ /^[0-9a-zA-Z_\-]+$/) {
  	print $html->message('err', $_ERROR, "$_HOSTS_NETWORKS_NAME - '$FORM{NAME}' $ERR_WRONG_DATA");
  	return 0;
   }

  
  if ($FORM{config}) {
  	dhcphosts_config({ NETWORKS => $FORM{IDS} });
  	
  	return 0;
   }
  elsif ($FORM{add}) {
    $FORM{ROUTERS}='0.0.0.0' if (! $FORM{ROUTERS}) ;

    if($FORM{IP_RANGE_FIRST} ne '0.0.0.0' && (ip2int($FORM{IP_RANGE_FIRST}) < ip2int($FORM{NETWORK}) 
     || ip2int($FORM{IP_RANGE_FIRST}) > ip2int($FORM{NETWORK}) + ( ip2int('255.255.255.255') - ip2int($FORM{MASK}) )
     || ip2int($FORM{IP_RANGE_LAST}) < ip2int($FORM{NETWORK}) 
     || ip2int($FORM{IP_RANGE_LAST}) > ip2int($FORM{NETWORK}) + ( ip2int('255.255.255.255') - ip2int($FORM{MASK}) ) )
     ) {
      $html->message('err', $_ERROR, "$ERR_WRONG_RANGE");
     }	
    else {
      $Dhcphosts->network_add({ %FORM });
      if (! $Dhcphosts->{errno}) {
	      $html->message('info', $_ADDED, "$_HOSTS_NETWORKS_NAME [$FORM{NAME}] ");
	     }
     }
	 }
  elsif ($FORM{change}) {
	  $FORM{MASK}           = ip2int($FORM{MASK});
	  $FORM{NETWORK}        = ip2int($FORM{NETWORK});
    $FORM{ROUTERS}        = ip2int($FORM{ROUTERS});
	  $FORM{IP_RANGE_FIRST} = ip2int($FORM{IP_RANGE_FIRST});
    $FORM{IP_RANGE_LAST}  = ip2int($FORM{IP_RANGE_LAST});

    if($FORM{IP_RANGE_FIRST} > 0 && ($FORM{IP_RANGE_FIRST} < $FORM{NETWORK} 
     || $FORM{IP_RANGE_FIRST} > $FORM{NETWORK} + ( ip2int('255.255.255.255') - $FORM{MASK} )
     || $FORM{IP_RANGE_LAST} < $FORM{NETWORK} 
     || $FORM{IP_RANGE_LAST} > $FORM{NETWORK} + ( ip2int('255.255.255.255') - $FORM{MASK} ) )) {
      $html->message('err', $_ERROR, "$ERR_WRONG_RANGE");
     }	


	  $Dhcphosts->network_change({ %FORM });
    
    if (! $Dhcphosts->{errno}) {
	    $html->message('info', $_CHANGED, "$_CHANGED [$FORM{ID}] $FORM{NAME} ");
	   }
	 }
  elsif ($FORM{chg}) {
	  $Dhcphosts->network_info( $FORM{chg} );

    $Dhcphosts->{ACTION}='change';
    $Dhcphosts->{ACTION_LNG}=$_CHANGE;

    if (! $Dhcphosts->{errstr}) {
	    $html->message('info', $_CHANGE, "$_CHANGE [$FORM{chg}] ");
	   }
   }
  elsif ($FORM{del} && $FORM{is_js_confirmed}) {
   	$Dhcphosts->network_del($FORM{del});
    if (! $Dhcphosts->{errstr}) {
	    $html->message('info', $_DELETED, "$_DELETED [$FORM{del}] ");
	   }
   }

  if ($Dhcphosts->{errno}) {
    $html->message('err', $_ERROR, "[$Dhcphosts->{errno}] $err_strs{$Dhcphosts->{errno}}");
  }


   $Dhcphosts->{DISABLE}=' checked' if($Dhcphosts->{DISABLE});
   $Dhcphosts->{DENY_UNKNOWN_CLIENTS}=' checked' if($Dhcphosts->{DENY_UNKNOWN_CLIENTS});
   $Dhcphosts->{AUTHORITATIVE}=' checked' if($Dhcphosts->{AUTHORITATIVE});
   
   my $net_defaults = $Dhcphosts->network_defaults();
   
   
   $html->tpl_show(_include('dhcphosts_network', 'Dhcphosts'), { %$net_defaults, %$Dhcphosts });
   my $list = $Dhcphosts->networks_list({ %LIST_PARAMS });

   my $table = $html->table( { width      => '100%',
				caption    => "$_HOSTS_NETWORKS",
				title      => ['#', "$_HOSTS_NETWORKS_NAME", "$_HOSTS_NETWORKS_NET", "$_HOSTS_NETWORKS_COORDINATOR", 
				  "$_HOSTS_NETWORKS_COORDINATOR_PHONE", "$_STATUS", "-","-", '-'],
				cols_align => ['left', 'left', 'left', 'left', 'left', 'center:noprint', 'center:noprint','center:noprint',
				 'center:noprint' ],
				qs         => $pages_qs,
				pages      => $Dhcphosts->{TOTAL},
				ID         => 'DHCP_NETWORKS',
				header     => "<script language=\"JavaScript\" type=\"text/javascript\">
<!-- 
function CheckAllINBOX() {
  for (var i = 0; i < document.dhcp_list.elements.length; i++) {
    if(document.dhcp_list.elements[i].type == 'checkbox' && document.dhcp_list.elements[i].name == 'IDS'){
      document.dhcp_list.elements[i].checked =         !(document.dhcp_list.elements[i].checked);
    }
  }
}
//-->
</script>\n

<div id='tabs'>
<ul class=\"user_menu\">
<li class=\"active\"><a href=\"javascript:void(0)\" onClick=\"CheckAllINBOX();\">$_SELECT_ALL</a></li>
</ul>
</div>\n"
    });


    foreach my $line (@$list) {
      $table->addrow(
	    $line->[0]. $html->form_input('IDS', "$line->[0]", { TYPE => 'checkbox', }), 
	    $line->[1],
	    $line->[2]."/". $line->[3],
	    $line->[4],
	    $line->[5],
	    $status[$line->[6]],
	    $html->button($_DEL, "index=$index&del=$line->[0]", { MESSAGE => "$_DEL $line->[0]?" }),
	    $html->button($_CHANGE, "index=$index&chg=$line->[0]"),
	    $html->button("Routes", "index=".($index+1)."&NET_ID=$line->[0]") 	    	    
     );
    };


   print $html->form_main({ CONTENT => $table->show(),
	                          HIDDEN  => { index  => $index },
                            SUBMIT  => { config => 'dhcp.conf' },
                            NAME    => 'dhcp_list'
                          });

  
  $table = $html->table( { width      => '100%',
                           cols_align => ['right', 'right'],
                           rows       => [ [ "$_TOTAL:", $html->b($Dhcphosts->{TOTAL}) ] ]
                       } );
  print $table->show();
};



#*******************************************************************
# 
# 
#*******************************************************************
sub dhcphosts_hosts {
  if (! $FORM{UID}) {
    $Dhcphosts->{NETWORKS_SEL} = dhcphosts_network_sel({ SEARCH  => 1 });
    form_search({ SEARCH_FORM => $html->tpl_show(_include('dhcphosts_search', 'Dhcphosts'), 
  	                                  { %$Dhcphosts, %FORM }, 
  	                                  { notprint => 1 })  
	            });
   }
  
 
  my $list = $Dhcphosts->hosts_list({ %LIST_PARAMS });
  my $table = $html->table({ width      => '100%',
				                     caption    => "$_HOSTS_USER",
				                     title      => ['#', "$_USER",  "IP", "$_HOSTS_HOSTNAME","$_HOSTS_NETWORKS_NET", "$_HOSTS_MAC", "$_STATUS", "$_HOSTS_BLOCKTIME", "$_HOSTS_BLOCKED","-","-"],
				                     cols_align => ['left', 'left', 'left','left', 'left', 'left','center:noprint','center:noprint'],
				                     qs         => $pages_qs,
				                     pages      => $Dhcphosts->{TOTAL},
				                     ID         => 'DHCP_HOSTS'
                           });

  my $i=4;
  foreach my $line (@$list) {

   	$status=$line->[10]+$line->[8];
	  if ($status == 0)    { $table->{rowcolor}=$_COLORS[2]; }
	  elsif($status == 1 ) { $table->{rowcolor}=$_COLORS[6]; }
	  elsif($status == 2 ) { $table->{rowcolor}=$_COLORS[1]; }

	  if (($line->[12 + $Dhcphosts->{SEARCH_FIELDS_COUNT}]==1) && $status) { $table->{rowcolor}=$_COLORS[0]; };

	  #$table->{rowcolor}=$_COLORS[$i];
    $table->addrow(
	    $line->[0], 
	    $html->button($line->[1], "index=15&UID=". $line->[13+$Dhcphosts->{SEARCH_FIELDS_COUNT}]."&MODULE=Dhcphosts"),
	    $line->[11],
	    $line->[3],
	    $line->[5].": ".$line->[4],
	    $line->[6],
	    $line->[10]."/".$line->[8],
	    $line->[9],
	    $line->[7],
	    $html->button($_CHANGE, "index=$index&chg=$line->[0]&UID=". $line->[13+$Dhcphosts->{SEARCH_FIELDS_COUNT}]),
	    $html->button($_DEL, "index=$index&del=$line->[0]&UID=". $line->[13+$Dhcphosts->{SEARCH_FIELDS_COUNT}], { MESSAGE => "$_DEL $line->[0]?" })
     );
	   $i++;
   };
  print $table->show();	

  $table = $html->table( { width      => '100%',
                           cols_align => ['right', 'right'],
                           rows       => [ [ "$_TOTAL:", $html->b($Dhcphosts->{TOTAL}) ] ]
                       } );
  print $table->show();
}


#**********************************************************
#
#**********************************************************
sub dhcphosts_routes {

  $Dhcphosts->{ACTION}='add';
  $Dhcphosts->{ACTION_LNG}=$_ADD;
  


  if ($FORM{add}) {
    $Dhcphosts->route_add({ %FORM });
    if (! $Dhcphosts->{errno}) {
	    $html->message('info', $_ADDED, "$_ADDED [$FORM{SRC}] ");
	   }
	 }
  elsif ($FORM{change}) {
	  $FORM{SRC}    = ip2int($FORM{SRC});
	  $FORM{MASK}   = ip2int($FORM{MASK});
	  $FORM{ROUTER} = ip2int($FORM{ROUTER});

	  $Dhcphosts->route_change({ %FORM });
    
    if (! $Dhcphosts->{errno}) {
	    $html->message('info', $_CHANGED, "$_CHANGED [$FORM{ID}] $FORM{SRC} ");
	   }
	 }
  elsif ($FORM{chg}) {
	  $Dhcphosts->route_info( $FORM{chg} );

    $Dhcphosts->{ACTION}='change';
    $Dhcphosts->{ACTION_LNG}=$_CHANGE;

    if (! $Dhcphosts->{errstr}) {
	    $html->message('info', $_CHANGE, "$_CHANGE [$FORM{chg}] ");
	   }
   }
  elsif ($FORM{del} && $FORM{is_js_confirmed}) {
   	$Dhcphosts->route_del($FORM{del});
    if (! $Dhcphosts->{errstr}) {
	    $html->message('info', $_DELETED, "$_DELETED [$FORM{del}] ");
	   }
   }

  if ($Dhcphosts->{errno}) {
    $html->message('err', $_ERROR, "[$Dhcphosts->{errno}] $err_strs{$Dhcphosts->{errno}}");
  }

 
    $html->tpl_show(_include('dhcphosts_routes', 'Dhcphosts'), $Dhcphosts);


    $LIST_PARAMS{NET_ID} = $FORM{NET_ID};
    my $list = $Dhcphosts->routes_list({ %LIST_PARAMS });

    my $table = $html->table( { width      => '100%',
				caption    => "Routes",
				title      => ['#', "$_HOSTS_NETWORKS_NAME", "$_HOSTS_NETWORKS_NET", "NETMASK","$_HOSTS_ROUTER" ,"-","-"],
				cols_align => ['left', 'left', 'right','right', 'right', 'center:noprint','center:noprint'],
				qs         => $pages_qs,
				pages      => $Dhcphosts->{TOTAL}
    });


    foreach my $line (@$list) {
      $table->addrow(
	    $line->[0], 
	    $line->[1].":".$line->[5],
	    $line->[2],
	    $line->[3],
	    $line->[4],
	    $html->button($_DEL, "index=$index&del=$line->[0]&NET_ID=".$FORM{NET_ID}, { MESSAGE => "$_DEL $line->[0]?" }),
	    $html->button($_CHANGE, "index=$index&chg=$line->[0]&NET_ID=".$FORM{NET_ID})
      );
    };

   print $table->show();

  $table = $html->table( { width      => '100%',
                           cols_align => ['right', 'right'],
                           rows       => [ [ "$_TOTAL:", "<b>$Dhcphosts->{TOTAL}</b>" ] ]
                       } );
  print $table->show();

};

#**********************************************************
#
#**********************************************************
sub dhcphosts_user {
  $Dhcphosts->{ACTION}='add';
  $Dhcphosts->{ACTION_LNG}=$_ADD;


  if ($FORM{add}) {
    if ($FORM{MAC} !~ /[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}/i) {
      $html->message('err', $_ERROR, "$ERR_WRONG_DATA: MAC ");
      #00:19:5b:4f:98:7a	
     }
    elsif(! $FORM{HOSTNAME}) {
      $html->message('err', $_ERROR, "$ERR_WRONG_DATA: $_HOSTS_HOSTNAME  ");
     }	
    elsif(ip2int($FORM{IP_RANGE_FIRST}) < ip2int($FORM{NETWORK}) ||  ip2int($FORM{IP_RANGE_FIRST}) > ip2int($FORM{NETWORK}) + ( ip2int('255.255.255.255') - ip2int($FORM{MASK}) )
     || ip2int($FORM{IP_RANGE_LAST}) < ip2int($FORM{NETWORK}) ||  ip2int($FORM{IP_RANGE_LAST}) > ip2int($FORM{NETWORK}) + ( ip2int('255.255.255.255') - ip2int($FORM{MASK}) ) ) {
      $html->message('err', $_ERROR, "$ERR_WRONG_RANGE");
     }	
    else {
      if (! $FORM{NETWORK}) {
      	$FORM{NETWORK} = auto_net_sign($FORM{IP});
       }

      $Dhcphosts->host_check({ %FORM });
      if (! $Dhcphosts->{errno}) {
        $Dhcphosts->host_add({ %FORM });
        if (! $Dhcphosts->{errno}) {
	        $html->message('info', $_ADDED, "$_ADDED [$FORM{HOSTNAME}] ");
          dhcphosts_config({ NETWORKS => $FORM{NETWORK}, 
      	                     reconfig => 1 
      	                  });
	       }
       }
    }
	 }
  elsif ($FORM{change}) {
    if ($FORM{MAC} !~ /[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}/i) {
      $html->message('err', $_ERROR, "WRONG MAC ");
      #00:19:5b:4f:98:7a	
     }	
    else {
      if (! $FORM{NETWORK}) {
      	$FORM{NETWORK} = auto_net_sign($FORM{IP});
       }

      $Dhcphosts->host_check({ %FORM });
      if (! $Dhcphosts->{errno}) {
	      $Dhcphosts->host_change({ %FORM });
     
        if (! $Dhcphosts->{errno}) {
	        $html->message('info', $_CHANGED, "$_CHANGED [$FORM{ID}] $FORM{NAME} ");
	        dhcphosts_config({ NETWORKS => $FORM{NETWORK}, reconfig => 1 });
	       }
       }
     }
	 }
  elsif ($FORM{chg}) {
    $Dhcphosts->host_info( $FORM{chg} );

    $FORM{NETWORK}=$Dhcphosts->{NETWORK};
    $Dhcphosts->{ACTION}='change';
    $Dhcphosts->{ACTION_LNG}=$_CHANGE;

    if (! $Dhcphosts->{errstr}) {
	    $html->message('info', $_CHANGE, "$_CHANGE [$FORM{chg}] ");
	   }
   }
  elsif ($FORM{del} && $FORM{is_js_confirmed}) {
   	$Dhcphosts->host_del({ ID => $FORM{del} });
    if (! $Dhcphosts->{errstr}) {
	    $html->message('info', $_DELETED, "$_DELETED [$FORM{del}] ");
	    dhcphosts_config({ NETWORKS => $FORM{NETWORK}, reconfig => 1 });
	   }
   }
  
  if ($Dhcphosts->{errno}) {
    if ($Dhcphosts->{errno} == 17) {
      	$html->message('err', $_ERROR, "# $FORM{NETWORK} $ERR_WRONG_NETWORK");
       }
    else {
      $html->message('err', $_ERROR, "[$Dhcphosts->{errno}] $err_strs{$Dhcphosts->{errno}}");
     }
  }

   
  
  $Dhcphosts->{NETWORKS_SEL} = dhcphosts_network_sel({ AUTOSIGN => 1 });



  $Dhcphosts->{STATUS_SEL} = $html->form_select('STATUS',
			                                   {   SELECTED => $FORM{STATUS},
		                                         SEL_HASH => { 0   => "Not Set",
                                                           -1  => $_DISABLE,
                                                           1   => "$_ENABLE" } 
                                          });

  $Dhcphosts->{DISABLE}=' checked' if($Dhcphosts->{DISABLE});

  if (! $Dhcphosts->{OPTION_82}) {
    #$Dhcphosts->{INPUT_STATE}=" DISABLED STYLE='background-color: $_COLORS[3]'";
    $Dhcphosts->{OPTION_82}='';
   }
  else {
    $Dhcphosts->{OPTION_82}=' checked';
   }
  
  $Dhcphosts->{SWITCH_SEL} = $html->form_select('NAS_ID',
                                          {
                                                  SELECTED          => $Dhcphosts->{NAS_ID},
                                                  SEL_MULTI_ARRAY   => [['', $_ALL], @{ $Nas->list() } ],
                                                  MULTI_ARRAY_KEY   => 0,
                                                  MULTI_ARRAY_VALUE => 1,
     #                                             EX_PARAMS         => (! $Dhcphosts->{OPTION_82}) ? "DISABLED STYLE='background-color: $_COLORS[3]'" : ''
                                           });


  $html->tpl_show(_include('dhcphosts_host', 'Dhcphosts'), { %{ $Dhcphosts->host_defaults() }, HOSTNAME => $users->{LOGIN},  %$Dhcphosts }); 
  dhcphosts_hosts();

};


#**********************************************************
#
#**********************************************************
sub dhcphosts_network_sel {
	my ($attr) = @_;
	
  my $list=$Dhcphosts->networks_list({ PAGE_ROWS => 10000, SORT => 2 });
  if ($Hosts->{errno}) {
   	print $html->message('err', $_ERROR, "[$Hosts->{errno}] $err_strs{$Hosts->{errno}}");
   	return 0;
   }

  my %networks = ();
  
  $networks{0} = "$_ALL" if ($attr->{SEARCH});
  $networks{0} = "$_AUTO" if ($attr->{AUTOSIGN}); 

  foreach my $line (@$list) {
    $networks{$line->[0]}=$line->[1]."(".$line->[2]."/".$line->[3].")";
   }; 

  return $html->form_select('NETWORK', 	
                                    {
    	                               SELECTED => $FORM{NETWORK} || 0,
		                                 SEL_HASH => \%networks 
		                                }
		                        );
}

#**********************************************************
#
#**********************************************************
sub dhcphosts_config {
  my ($attr) = @_;

  if (! $attr->{NETWORKS}) {
     $html->message('err', $_ERROR, "$ERR_WRONG_DATA. Select NETWORK ");
     return 0;
   }

  my %INFO = ();
  my %NAS_MACS=();
  
  # Nas CSI
  my $nas_list = $Nas->list();

  foreach my $line (@$nas_list) {
  	if ($line->[12] =~ /Called-Station-Id=\"(.+)\"/i){
  	 $NAS_MACS{$line->[0]}="$line->[1],$1";
  	}
   }
  
#  my @networks = split(/, /, $attr->{NETWORKS});
#foreach my $NET_ID (@networks) {

my $list = $Dhcphosts->networks_list({ DISABLE   => 0, 
	                                     PAGE_ROWS => 10000, 
	                                     SORT      => 2  
	                                     });  
  
foreach my $line (@$list) {
  my $NET_ID = $line->[0];
  my %curnet = ();
  $INFO{OPTION82_POOLS}='';
  $Dhcphosts->network_info($NET_ID);
  
  $INFO{DNS}        = ($Dhcphosts->{DNS}) ? "option domain-name-servers $Dhcphosts->{DNS};"  : undef;
  $INFO{DOMAINNAME} = ($Dhcphosts->{DOMAINNAME}) ? "option domain-name \"$Dhcphosts->{DOMAINNAME}\";" : undef;
  
  $INFO{ROUTERS}    = "option routers $Dhcphosts->{ROUTERS};" if ($Dhcphosts->{ROUTERS} ne '0.0.0.0');
  $INFO{DATETIME}   = "$DATE $TIME / Dhcphosts";
  
  $INFO{NETWORK_NAME} = $Dhcphosts->{NAME};
  $INFO{BLOCK_NETWORK}= $Dhcphosts->{BLOCK_NETWORK};
  $INFO{BLOCK_MASK}   = $Dhcphosts->{BLOCK_MASK};
  $INFO{NETWORK}      = $Dhcphosts->{NETWORK};
  $INFO{NETWORK_MASK} = $Dhcphosts->{MASK};
  $INFO{DESCRIBE}     = $Dhcphosts->{NAME};
  
  $INFO{DESCRIBE}     = $Dhcphosts->{COMMENTS};
  $INFO{AUTHORITATIVE}= ($Dhcphosts->{AUTHORITATIVE}) ? 'authoritative;' : '';
  $INFO{DENY_UNKNOWN_CLIENTS}= ($Dhcphosts->{DENY_UNKNOWN_CLIENTS}) ? 'deny unknown-clients;' : '';
  

  
  if ($Dhcphosts->{IP_RANGE_FIRST} ne '0.0.0.0') {
    $INFO{RANGE}        = "range $Dhcphosts->{IP_RANGE_FIRST} $Dhcphosts->{IP_RANGE_LAST};";
   }
  else {
    $INFO{RANGE} = '';
   }

  #Add static route

  my $list = $Dhcphosts->routes_list({ NET_ID => $NET_ID });  
  if ($Dhcphosts->{TOTAL} > 0) {
    my $routes="";

    foreach my $line (@$list) {
      #($src,$mask,$router)=$sth->fetchrow_array()){
      my $src    = $line->[2];
      my $mask   = $line->[3]; 
      my $router = $line->[4];
      #print "// $src,$mask,$router\n";
      
      my @ip=split(/\./,$src);
      my @ip2=split(/\./,$router);    
      $mask = mask2bitlen($mask);
      $routes.=$mask;
        
      for(my $i=0;$i<$mask/8;$i++) {
     	  $routes.=", $ip[$i]";
       };
      $routes.=", ".join(", ",@ip2).",\n";
     }

    chop $routes;
    chop $routes;
    $routes.=";";
   # MS routes: adds extras to supplement routers option
    $INFO{NET_ROUTES}="option ms-classless-static-routes $routes\n";

    # RFC3442 routes: overrides routers option
    $INFO{NET_ROUTES_RFC3442}="option rfc3442-classless-static-routes $routes\n";
   }



  #Make hosts
  $INFO->{NETWORK}='';
  #$Dhcphosts->{debug}=1;
  $list = $Dhcphosts->hosts_list({ NETWORK   => $NET_ID, 
  	                               STATUS    => 0,
  	                               PAGE_ROWS => 100000,
  	                               DHCPHOSTS_DEPOSITCHECK => $conf{DHCPHOSTS_DEPOSITCHECK},
  	                               DHCPHOSTS_EXT_DEPOSITCHECK => $conf{DHCPHOSTS_EXT_DEPOSITCHECK},
  	                               USER_DISABLE => 0,
  	                               PORTS     => '*',
  	                               NAS_ID    => '>=0',
  	                               OPTION_82 => '>=0',
  	                               VID       => '>=0',
  	                               BOOT_FILE => '*'
  	                             });


  foreach my $line (@$list) {
  	my $deposit =  $line->[20];
     
    if ( defined($conf{DHCPHOSTS_DEPOSITCHECK}) && $deposit < $conf{DHCPHOSTS_DEPOSITCHECK}) {
     	next;
     }
    elsif( defined($conf{DHCPHOSTS_EXT_DEPOSITCHECK})  && $deposit < $conf{DHCPHOSTS_EXT_DEPOSITCHECK}) {
      next;
     }
    else {

     }

    $INFO{CLIENT_MAC} = $line->[6];
    #Option 82
    if ($line->[12]) {
      $INFO{CLIENT_MAC}    =~ s/^00/0/;
      $INFO{CLIENT_MAC}    =~ s/:0/:/g;
      $INFO{OPTION82_NAS_PORT}  = $line->[13];
      $INFO{CLIENT_VLAN}   = $line->[15];
      my @OPTION82_MATCHES = ();

      #Check swich
    	if ($NAS_MACS{$line->[14]}) {
         ($INFO{OPTION82_NAS_NAME}, $INFO{OPTION82_NAS_MAC})=split(/,/, $NAS_MACS{$line->[14]}, 2);
    	   $INFO{OPTION82_NAS_MAC} =~ s/^00/0/;
    	   $INFO{OPTION82_NAS_MAC} =~ s/:0/:/g;

         push @OPTION82_MATCHES, "binary-to-ascii(16, 8, \":\", substring(option agent.remote-id, 2, 6)) = \"$INFO{OPTION82_NAS_MAC}\"";
    	 }
      else {
      	print "Can't find NAS '$line->[14]' MAC\n";
      	$INFO{OPTION82_NAS_NAME}='';
      	$INFO{OPTION82_NAS_MAC}='';
       }

      #Check nas port
      push @OPTION82_MATCHES, "binary-to-ascii(10, 8, \":\", substring(option agent.circuit-id, 4, 2)) = \"0:$INFO{OPTION82_NAS_PORT}\"" if ($INFO{OPTION82_NAS_PORT} && $INFO{OPTION82_NAS_PORT} > 0);

      #Client MAC
      push @OPTION82_MATCHES, "binary-to-ascii(10, 8, \"\", substring(option agent.circuit-id, 6, 1)) = \"$INFO{CLIENT_MAC}\"" if ($INFO{CLIENT_MAC} ne '0:0:0:0:0:0' );

      #Vlan option
      push @OPTION82_MATCHES, "binary-to-ascii (10, 16, \"\", substring( option agent.circuit-id, 2, 2)) = \"$INFO{CLIENT_VLAN}\" " if ($INFO{CLIENT_VLAN} > 0 );

      my $matches = join(' and ', @OPTION82_MATCHES);

      $INFO{OPTION82_CLASS} .= "# LOGIN: $line->[1]\nclass \"$INFO{OPTION82_NAS_NAME}-$INFO{OPTION82_NAS_MAC}-port-$INFO{OPTION82_NAS_PORT}\" { match if $matches ;  \n}\n\n";


    	$INFO{OPTION82_POOLS} .= "pool { range $line->[11]; allow members of \"$INFO{OPTION82_NAS_NAME}-$INFO{OPTION82_NAS_MAC}-port-$INFO{OPTION82_NAS_PORT}\"; }\n";
     }
    else {
      #Static hosts
      $INFO{HOSTS} .= $html->tpl_show(_include('dhcphosts_dhcp_conf_host', 'Dhcphosts',), { 
    	  MAC       => $INFO{CLIENT_MAC},
        IP        => $line->[11],
        ROUTERS   => ($Dhcphosts->{ROUTERS} ne '0.0.0.0') ? $Dhcphosts->{ROUTERS} : convert_ip("0.0.0.1", '', $Dhcphosts),
        LOGIN     => $line->[1],
        HOSTNAME  => $line->[3],
        BOOT_FILE => ($line->[16]) ? "filename \"". $line->[16]."\";" : ''
    	}, { OUTPUT2RETURN => 1 });
    }
   }  

  $INFO{SUBNETS} .= $html->tpl_show(_include('dhcphosts_dhcp_conf_subnet', 'Dhcphosts'), 
                                   \%INFO, 
                                   { OUTPUT2RETURN => 1  });	 

}



if ($attr->{reconfig} || $FORM{reconfig} ) {
	$conf{DHCPHOSTS_CONFIG} = "/usr/local/etc/dhcpd.conf" if (! $conf{DHCPHOSTS_CONFIG}) ;
  
  my $tpl = $html->tpl_show(_include('dhcphosts_dhcp_conf_main', 'Dhcphosts'), 
                            \%INFO, 
                            { OUTPUT2RETURN => 1 }
                           );	 

	if(open(FILE, ">$conf{DHCPHOSTS_CONFIG}")) {
	  print FILE $tpl;
    close(FILE);
   }
  else {
  	print "Can't open file '$conf{DHCPHOSTS_CONFIG}' $!";
  	return 0;
   }

  dhcphosts_reconfigure({ DEBUG => $FORM{DEBUG} });
  $html->message('info', $_INFO, "DHCP $_RECONFIGURE '$conf{DHCPHOSTS_CONFIG}'") if (! $attr->{QUITE});
 }
else {
  print "<textarea cols=90 rows=20>\n";
  #$INFO{SUBNETS} = $html->tpl_show(_include('dhcphosts_dhcp_conf_subnet', 'Dhcphosts'), 
  #                                 \%INFO,
  #                                 { notprint => 1 } );	 

  $html->tpl_show(_include('dhcphosts_dhcp_conf_main', 'Dhcphosts'), \%INFO);
	print "</textarea>\n";
	print $html->form_main(	{  HIDDEN  => { index    => $index,
		                                      IDS      => $FORM{IDS},
		                                      config   => 'dhcp.conf' },
                             SUBMIT  => { reconfig => $_RECONFIGURE }
                         } );
	
}
	
}


#**********************************************************
# Get bit count from net mask
#**********************************************************
sub dhcphosts_reconfigure {
  my ($attr) = @_;

  my $debug = $attr->{DEBUG} || 0;

  if (! $conf{DHCPHOSTS_RECONFIGURE}) {
  	print $html->message('err', $_ERROR, "Can't find reconfiguration command ". '"$conf{DHCPHOSTS_RECONFIGURE}"');
  	return 0;
   }
  
 	dhcphosts_mac_block_make();

  my $res = `$conf{DHCPHOSTS_RECONFIGURE}`;
  print $res if ($debug > 1);

  return 0;
}


#**********************************************************
#
#**********************************************************
sub convert_ip {
    my ($cid, $blocked, $attr)=@_;

    if (! $Dhcphosts->{NETWORK}) {
      $Dhcphosts->network_info($net_id);
     }

    my @ip = split(/\./, $cid);
    my @ip2 = ();
    if ($blocked) { 
    	@ip2=split(/\./,  $Dhcphosts->{BLOCK_NETWORK}); 
     }
    else {
    	@ip2=split(/\./, $Dhcphosts->{NETWORK});
     }

    return "$ip2[0].$ip2[1].$ip2[2].$ip[3]";
}

#**********************************************************
# Get bit count from net mask
#**********************************************************
sub mask2bitlen {
  my ($netmask) = @_;

  my @mask = split(/\./, $netmask, 4);
  my $bitlen = 0;
  foreach my $line (@mask) {
      my $bits = sprintf("%b", $line);
      $bits =~ s/0//g;
      $bitlen += length($bits);
   }
  return $bitlen;
}


#**********************************************************
# http://rfc3442svc.sourceforge.net/isc-dhcpd-configuration.html
#
# For isc-dhcpd
#  dhcpd.conf
#
#  option classless-route code 121 = string;
#  option classless-route-xp code 249 = string;
#  option classless-route  16:0a:0b:00:c0:a8:32:01:14:c0:a8:50:c0:a8:32:01:17:c0:a8:5a:c0:a8:32:01:20:0a:0a:0a:0a:c0:a8:32:02:14:c0:a8:00:c0:a8:32:01;
#  option classless-route-xp 16:0a:0b:00:c0:a8:32:01:14:c0:a8:50:c0:a8:32:01:17:c0:a8:5a:c0:a8:32:01:20:0a:0a:0a:0a:c0:a8:32:02:14:c0:a8:00:c0:a8:32:01;
# make_classless_option({
#        "172.16.0.0/12" => "10.0.0.1",
#        "10.0.0.0/8" => "10.0.0.1",
#        "0.0.0.0/0" => "192.168.0.1",
#        "192.168.234.0/24" => "192.168.0.5"
#        });
#**********************************************************
sub make_classless_option {
    my $routes = shift;
    my ($s1, $s2, $s3, $s4, $len, @bytes, $net, $mask, $destination, $router);

    $len = 2;
    @bytes = ();
    foreach $destination(keys %{$routes}) {
        ($net, $mask) = split('/', $destination);
        $router = $routes->{$destination};
        ($s1, $s2, $s3, $s4) = split(/\./, $net);
        push(@bytes, sprintf('%02x', $mask));
        push(@bytes, sprintf('%02x', $s1));
        push(@bytes, sprintf('%02x', $s2)) if($mask > 8);
        push(@bytes, sprintf('%02x', $s3)) if($mask > 16);
        push(@bytes, sprintf('%02x', $s4)) if($mask > 24);
        ($s1, $s2, $s3, $s4) = split(/\./, $router);
        push(@bytes, sprintf('%02x', $s1));
        push(@bytes, sprintf('%02x', $s2));
        push(@bytes, sprintf('%02x', $s3));
        push(@bytes, sprintf('%02x', $s4));
    }

    return join(':', @bytes);
}



#**********************************************************
#
#**********************************************************
sub auto_net_sign {
  my ($ip) = @_;

my %network_hash = ();
my $list = $Dhcphosts->networks_list();
$ip = ip2int($ip);


foreach my $line (@$list) {
	my $first_ip = ip2int($line->[2]);
	my $last_ip  = $first_ip + (4294967295  - ip2int($line->[3]) );
	$network_hash{$first_ip}="$last_ip:$line->[0]";
}

	while(my($first, $v)=each %network_hash) {
		my ($last, $id)=split(/:/, $v, 2);
		if ($ip >= $first && $ip <= $last) {
			 return $id;
		 }
	 }

  return 0;	
}
1
