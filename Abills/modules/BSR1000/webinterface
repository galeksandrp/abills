#/usr/bin/perl
# BSR1000 functions



use SNMP_Session;
use SNMP_util;
use BER;

use Carp;
use CGI::Carp;


#iso.3.6.1.2.1.3.1.1.1.2.1. show ip
# Byte
# iso.3.6.1.2.1.2.2.1.10.1
#
# iso.3.6.1.2.1.5.7.0
# iso.3.6.1.2.1.10.127.1.3.3.1.10.1
# iso.3.6.1.2.1.10.127.1.3.4.1.7.2.17
#
# iso.3.6.1.2.1.10.127.7.1.4.1.2.2.37
#
# iso.3.6.1.2.1.10.127.7.1.4.1.4.2.57
#
# Time
# iso.3.6.1.2.1.10.127.7.1.4.1.3.2.23
#
# MAC
# iso.3.6.1.2.1.3.1.1.2.2.1.10.0.2.12
# iso.3.6.1.2.1.4.22.1.2.2.10.0.2.95



my %info_oids = ('Events'          => '1.3.6.1.2.1.69.1.5.8.1',
 
              'Syslog'               => '1.3.6.1.4.1.4981.3.9.1.2',
              'Flap_Modems'          => '1.3.6.1.4.1.4981.6.1.1.2.1',
              'Spectrum_Groups'      => '1.3.6.1.4.1.4981.6.1.2.5.1',
              'UpstreamChannelEntry' => '1.3.6.1.4.1.4981.2.1.2.1',
#Docsis
              'Downstream'           => '1.3.6.1.2.1.10.127.1.1.1',
              'Upstream'             => '1.3.6.1.2.1.10.127.1.1.2',
              'Signal Quality'       => '1.3.6.1.2.1.10.127.1.1.4.1',
              'Cable modem Status'   => '1.3.6.1.2.1.10.127.1.3.3.1',
              'Modulation_table'     => '1.3.6.1.2.1.10.127.1.3.5',
              'Reg type'             => '1.3.6.1.2.1.10.127.21.3.1'

              );

my $CMTS_prompt         = (defined($conf{BSR1000_PROMPT})) ? $conf{BSR1000_PROMPT} : 'catv0';
my $CMTS_terminal_lines = 100;

use Nas;
my $nas = Nas->new($db, \%conf);

my %bsr1000_commands = ('show cable modem'    => '',
                        'show running-config' => '',
                        'show version'        => '',
                        'show memory information' => '',
                        'show log'            => '',
                        'show pool'           => '',
                        'show tcp brief'      => '',
                        'show tcp statistics' => '',
                        'show interface cable 0/0 upstream' => '',
                        'show cable flap-list' => '',
                        'show clock'           => '',
                        'show process'        => '',
                        'show cable spectrum-group' => '',
                        'show cable resource-manager' => '');


                          
#**********************************************************
#
#**********************************************************
sub Bsr1000_online () {

  if ($FORM{NAS_ID}) {
    $nas->info( { NAS_ID => $FORM{NAS_ID}	} );
    $pages_qs.="&NAS_ID=$FORM{NAS_ID}";
    Bsr1000_cmd();
   }

my $table = $html->table( { width      => '100%',
                            caption    => "$_NAS",
                            border     => 1,
                            title      => ["ID", "$_NAME", "NAS-Identifier", "IP", "$_TYPE", "$_STATUS", '-', '-'],
                            cols_align => ['center', 'left', 'left', 'right', 'left', 'left', 'center', 'center'],
                                  });
my $list = $nas->list({ %LIST_PARAMS, TYPE =>  'bsr1000' });


foreach my $line (@$list) {
  $table->addrow($line->[0], 
    $line->[1], 
    $line->[2], 
    $line->[3], $line->[4], 
    $status[$line->[6]],
    $html->button("MODEMS", "index=$index&NAS_ID=$line->[0]&command=show cable modem"),
    $html->button("Commands", "index=$index&NAS_ID=$line->[0]")
   );
}
print $table->show();
}



#**********************************************************
# Bsr1000_cmd
#**********************************************************
sub Bsr1000_cmd {

  if(length($FORM{command})>0){
    $nas->info({ NAS_ID => $FORM{NAS_ID}});

    require 'Abills/nas.pl';


    my @commands = ( "Password:\t$nas->{NAS_MNG_PASSWORD}",
                     "$CMTS_prompt\tenable",
                     "Password:\t$nas->{NAS_MNG_PASSWORD}",
                     "$CMTS_prompt\tset terminal lines $CMTS_terminal_lines",
                     "$CMTS_prompt\t$FORM{command}",
                     "$CMTS_prompt\t",
                     "\texit"
      );

    my $result = telnet_cmd("$nas->{NAS_MNG_IP_PORT}", \@commands, { debug => 1 });
    my $total=0;
    my @rows = split(/\n/, $result);

    #print "<pre>$result</pre>";

   
    if($FORM{command} eq 'show cable modem') {
    	my $table = $html->table({ width       => '100%',
                                 border      => 1,
                                 title_plain => ['Interface', 'Prim Sid', 'Connect state', 'Timing Offset', 'Rec Power', 'Ip Address', 'Mac Address', '-', '-', '-'],
                                 cols_align  => ['right', 'center', 'right', 'left', 'left', 'center'],
                                 #qs          => $pages_qs,
                                 caption     => 'Modems'
                                  } );
 
     my %interfaces = ();
     foreach my $line (@rows) {

       if($line =~ /Cable\s+(\d\/\d\/U\d)\s(\d+)\s+([a-z]+)\s+(\d+)\s+(\d+)\s+([0-9.]+)\s+([0-9a-f.]+)/) {

         $table->{rowcolor} = (defined($FORM{SID}) && $FORM{SID} == $2) ? $_COLORS[0] : undef;

         $table->addrow($1, $2, $3, $4, $5, $6, $7,
         $html->button("D", "index=$index$pages_qs&SID=$2&command=show cable modem detail $2", { TITLE => 'Detail' }),
         $html->button("P", "index=$index$pages_qs&SID=$2&command=ping $6", { TITLE => 'Ping'   }),
         $html->button("H", "index=$index$pages_qs&SID=$2&command=clear cable modem $7 reset",  { TITLE => 'Hangup' })
         );
         
         $interfaces{"$1"}++;
         $total++;
        }
      }
     print $table->show();

     $table = $html->table( {
     	                        width    => '100%',
                              cols_align => ['right', 'right'],
                              rows => [ ["$_TOTAL:", "<b>$total</b>" ] ]
                               } );
     while(my($k, $v)=each %interfaces){
          $table->addrow($k, $v);
      }
     print $table->show();

     }
    elsif ($FORM{command} =~ /show cable modem detail/) {

      if ($result =~ /Unable to locate the cable modem for sid/g) {
       	 $html->message('err', $_ERROR, "Unable to locate the cable modem for sid $FORM{SID}");
       }
      else {
  	     $table = $html->table( {
     	                        width    => '500',
                              cols_align => ['right', 'right'],
                               } );
        foreach my $line (@rows) {
          #$line =~ /(\S+)\s+(\w+)/;
          if ($line =~ /\t|##|--|Equalization|\d{2}/) {
            my($k, $v)=split(/\t/, $line, 2);
            $table->addrow($k, $v);
           }
         }
        print $table->show();
      }

      $FORM{command}='show cable modem';
      Bsr1000_cmd();
     }
    else {
      $result =~s/\n/<br>/g;
      $html->message('info', $_INFO, "<code>$result</code>");
      if ($FORM{command} =~ /ping|clear cable modem|show cable modem detail/) {
        $FORM{command}='show cable modem';
        Bsr1000_cmd();
        return 0;
      }
    }
  }

print  $html->form_main({ CONTENT => "Command: ". $html->form_input('command', "$FORM{command}"),
  	                      HIDDEN  => { index   => "$index",
  	                      	           NAS_ID  => "$FORM{NAS_ID}"  
  	                      	          },
	                        SUBMIT  => { go   => "$_SHOW"} 
	                        });

 $table = $html->table({ caption => 'Commands',
  	                      width => '100%',
                          border => 1,
                          title => ["_COMMAND", "_HELP"],
                          cols_align => ['left', 'left']
                         });
    
  foreach my $k (sort keys %bsr1000_commands) {
     $table->addrow($html->button("$k", "index=$index&NAS_ID=$FORM{NAS_ID}&command=$k"), $bsr1000_commands{$k});
   }
  print $table->show();


 #show cable modem

}



#**********************************************************
#
#**********************************************************
sub Bsr1000_log {


    	my $table = $html->table({ width       => '100%',
                                 border      => 1,
                                 title_plain => ['-', '-'],
                                 cols_align  => ['left', 'left'],
                                 #qs          => $pages_qs,
                                 caption     => 'LOG'
                               });


my $list = $nas->list({ %LIST_PARAMS, TYPE =>  'bsr1000' });



foreach my $line (@$list) {
  $table->{rowcolor}=$_COLORS[0];
  $table->addrow("$line->[0]:<b>$line->[1]</b>:$line->[3]") ;
  $table->{rowcolor}=undef;
  my @arr = snmpwalk("$line->[10]\@$line->[3]", '1.3.6.1.4.1.4981.3.9.1.2');
  for( my $i=$#arr; $i>=0; $i--) {
    $table->addrow($arr[$i]);
  }
}

print $table->show();


my %info = (
'rdnSyslogSize' => '',
'rdnSyslogMaxSize' => '', 
'rdnSyslogServerEnable'  => '',
#rdnSyslogServerTable
#   rdnSyslogServerAddress  
#   rdnSyslogServerStatus
'rdnSyslogSeverity'  => '',
'rdnSyslogConsoleSeverity' =>  '',
'rdnSyslogClear'  => '', 
'rdnSyslogTrapSeverity' => ''
);
  
	
	
}



#**********************************************************
#
#**********************************************************
sub Bsr1000_info {
	
	
	
	
	
}


#**********************************************************
#
#**********************************************************
sub Bsr1000_Docsis_modems {
	

my $table = $html->table({ width       => '100%',
                           border      => 1,
                           title_plain => ['-', '-'],
                           cols_align  => ['left', 'left'],
                           #qs          => $pages_qs,
                           caption     => 'LOG'
                         });


my $list = $nas->list({ %LIST_PARAMS, TYPE =>  'bsr1000' });

   my %fields = (
            docsIfCmtsCmStatusIndex               => '1',
            docsIfCmtsCmStatusMacAddress          => '2',
            docsIfCmtsCmStatusIpAddress           => '3',
            docsIfCmtsCmStatusDownChannelIfIndex  => '4',
            docsIfCmtsCmStatusUpChannelIfIndex    => '5',
            docsIfCmtsCmStatusRxPower             => '6',
            docsIfCmtsCmStatusTimingOffset        => '7',
            docsIfCmtsCmStatusEqualizationData    => '8',

            docsIfCmtsCmStatusValue               => '9',
            docsIfCmtsCmStatusUnerroreds          => '10',
            docsIfCmtsCmStatusCorrecteds          => '11',
            docsIfCmtsCmStatusUncorrectables      => '12',
            docsIfCmtsCmStatusSignalNoise         => '13',
            docsIfCmtsCmStatusMicroreflections    => '14'   
           );
	
#	docsIfCmtsCmStatusValue OBJECT-TYPE
#        SYNTAX      INTEGER {
#            other(1),
#            ranging(2),
#            rangingAborted(3),
#            rangingComplete(4),
#            ipComplete(5),
#            registrationComplete(6),
#            accessDenied(7)
	
	
	snmputils_multioid_view({
	   FIELDS         => \%fields,
	   DEFAULT_FIELDS => ['docsIfCmtsCmStatusIndex',  'docsIfCmtsCmStatusMacAddress' ],
	   OID_PREFIX     => '1.3.6.1.2.1.10.127.1.3.3.1',
	   NAS_TYPE       => 'BSR1000',
	   MIBS           => ['SNMPv2-CONF', 'SNMPv2-MIB',  'IF-MIB', 'DOCS-IF-MIB']
	  });


	
	
	
	
	
}

#**********************************************************
#
#**********************************************************
sub Bsr1000_Docsis_events {
 

  my @MIBs = (     'DOCS-IF-MIB',
                   'DOCS-CABLE-DEVICE-MIB',
                   'DOCS-IF-EXT-MIB');

  foreach my $line (@MIBs) {
    next if (! -f "../../Abills/MIBs/$line");
    my($ret, $oid_hash, $oid_ex) = snmpMIB_to_OID("../../Abills/MIBs/$line");
  }

my %AUTO_ASIGN = ('docsDevEvLevel' => {1 => 'emergency',
                                       2 => 'alert',
                                       3 => 'critical',
                                       4 => 'error',
                                       5 => 'warning',
                                       6 => 'notice',
                                       7 => 'information',
                                       8 => 'debug' }
                  );
 
 
my $table = $html->table({ width       => '100%',
                           border      => 1,
                           title_plain => ['-', '-'],
                           cols_align  => ['left', 'left'],
                           #qs          => $pages_qs,
                           caption     => 'LOG'
                         });


my $list = $nas->list({ %LIST_PARAMS, TYPE =>  'bsr1000' });

foreach my $line (@$list) {
    my %result = &snmpwalkhash("$line->[10]\@$line->[3]", \&my_simple_hash, '1.3.6.1.2.1.69.1.5.8.1');
    my @CAPTION = keys %result;
    my @RES_ARR = sort { $a <=> $b } keys %{ $result{"$CAPTION[0]"} };
    
  
    if ($SNMP_Session::errmsg) {
       print $html->message('err', $_ERROR, "$FORM{TYPE}<br>$SNMP_Session::suppress_warnings / $SNMP_Session::errmsg");
     }

    $table = $html->table({ width      => '100%',
                            caption     => "$_RESULT: $SNMP_COMMUNITY",
                            border      => 1,
                            title       => ['index', @CAPTION],
                            cols_align  => ['left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'center']
                           });
      

    for(my $i=$#RES_ARR; $i>=0; $i--) {
       my $k = $RES_ARR[$i];
       my @arr = ($k);
       foreach my $ft (@CAPTION) {
         #$result{$ft}{$k} = data_convert($ft, $result{$ft}{$k});
        if  ($ft eq 'docsDevEvLastTime'  || $ft eq 'docsDevEvFirstTime') {
        	#(my $str = shift) =~ s/([a-fA-F0-9]{2})/chr(hex $result{$ft}{$k})/eg;
          
        	my($year, $year2, $month, $day, $hour, $minute, $seconds, $sec_dec)= unpack "%CCCCCCCC", $result{$ft}{$k};
        	$result{$ft}{$k} = ($year*256 + $year2)."-$month-$day $hour:$minute:$seconds.$sec_dec";
         }
        
        $result{$ft}{$k}="$AUTO_ASIGN{$ft}{$result{$ft}{$k}} ($result{$ft}{$k})" if ($AUTO_ASIGN{$ft});
       	push @arr, ($OIDS_EXINFO{$ft}{ACCESS} eq 'read-write') ? $html->button("$result{$ft}{$k}", "index=$index&change=y&SNMP_INDEX=$k&SNMP_OID=$OIDS_HASH{$ft}$page_qs") : $result{$ft}{$k};
        }
       $table->addrow(@arr);
       $rows_count++;
     }
}


print $table->show();

	
}


sub my_simple_hash {
        my ($h_ref, $host, $name, $oid, $inst, $value) = @_;
        $inst =~ s/^\.+//;
        if ($name =~/ifPhysAddress/)
        {
                my $mac = '';
                map { $mac .= sprintf("%02X:",$_) } unpack "CCCCCC", $value;
                $value = $mac;
        }
        $h_ref->{$name}->{$inst} = $value;
}

#**********************************************************
#
#**********************************************************
sub snmputils_multioid_view {
   my ($attr) = @_;

       my $fields         = $attr->{FIELDS};
       my @default_fields = @{ $attr->{DEFAULT_FIELDS} };
       my $oid_prefix     = $attr->{OID_PREFIX} || '';
       my $nas_type       = $attr->{NAS_TYPE} || '';
      
if ($FORM{fields}) {
  @default_fields = split(/, /, 'diactIndex, '. $FORM{fields});
}

my $OIDS_EXINFO;
if ($attr->{MIBS}) {
	$OIDS_EXINFO = snmputils_load_mibs($attr->{MIBS});
}

$table = $html->table({ width       => '100%',
                        caption     => "$nas_type",
                        border      => 1,
                        title       => [@default_fields, "-"],
                        cols_align  => ['left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'center'],
                      });


my $Nas = Nas->new($db, \%conf);
my $list = $Nas->list({ TYPE => $nas_type, DISABLE => 0 });

foreach my $line (@$list) {
  my %result = ();
  
  foreach my $field (@default_fields) {
    my @arr = ();
    if (@arr = snmpwalk("$line->[10]\@$line->[3]", $oid_prefix.'.'.$fields->{$field})) {
      
      my $oid = "$field - $oid_prefix/$fields->{$field}";
      
      if ($SNMP_Session::errmsg) {
         print $html->message('err', $_ERROR, "$oid<br>$SNMP_Session::suppress_warnings / $SNMP_Session::errmsg");
         last;
       }

      foreach my $line (@arr) {
        if ($line =~ /(\d+):(.+)/) {
          $result{$field}{$1}=$2;
          print "$field // $line ($1:$2) <br>"if ($debug == 1);
        }
       }
     }
    else {
       print "$field - $oid_prefix/$fields->{$field} <br>"if ($debug == 1);
       print "No response";
       last;
     }
   }

#  $SORT = 0;
#  $SORT = $FORM{sort} - 1 if ($FORM{sort});
  
  
  $table->{rowcolor}=$_COLORS[0];
  $table->{extra}="colspan='". ($#default_fields + 2) ."' class='small'";
  $table->addrow("$line->[0]:<b>$line->[1]</b>:$line->[3] ");
  $page_qs .= "&NAS_ID=$line->[0]";
  $total_sessions += $#MAC_ARR + 1;

  undef($table->{rowcolor});
  undef($table->{extra});

  
my @SESSION_ARR = sort keys %{ $result{ $default_fields[0] } } ;

#print "$default_fields[$sort] / $SORT <br>";
#print join(', ', @SESSION_ARR);

    foreach my $k ( @SESSION_ARR ) {
      my @arr = ();
      foreach my $ft (@default_fields) {
        #$result{$ft}{$k} = data_convert($ft, $result{$ft}{$k});
      	push @arr, ($OIDS_EXINFO->{$ft}{ACCESS} eq 'read-write') ? $html->button($result{$ft}{$k}, "index=$index&change=y&SNMP_INDEX=$inst&SNMP_OID=$OIDS_HASH{$ft}$page_qs") :  $result{$ft}{$k}
       }
   	
    	$table->addrow(@arr,
    	               "(". $html->button('H', "index=$index&hangup=$k", { TITLE => 'Hangup' }). ")"
                     );

   }

}



print $table->show();
$table = $html->table({ width       => '100%',
                        rowcolor    => $_COLORS[3],
                        cols_align  => ['right', 'left', 'right', 'right', 'center'],    
                        rows        => [ ["$_TOTAL:", "$_USERS:", "$total_users", "$_SESSIONS:", "$total_sessions" ]]
                      });

print $table->show();

	
	
snmp_form_footer($fields, \@default_fields, { OIDS_EXINFO => $OIDS_EXINFO });

}

#**********************************************************
#
#**********************************************************
sub snmputils_load_mibs  {
 my ($mib_array, $attr) = @_;

 my %OIDS_EXINFO = ();

#if (-d '../../Abills/MIBs/') {
#  opendir DIR, '../../Abills/MIBs/' or die "Can't open dir '../../Abills/MIBs/' $!\n";
#    my @contents = grep  !/^\.\.?$/  , readdir DIR;
#  closedir DIR;
#  foreach my $line (@contents) {
#    $info{MIBS}.=$html->form_input('MIBS', "$line", { TYPE => 'checkbox', STATE => 0 }). " $line<br>\n";
#   }
#}
#if ($FORM{MIBS}) {
#   @mib_array = split(', ', $FORM{MIBS});
#}
  
  print "<pre>\n";
  foreach my $line (@$mib_array) {
    next if (! -f "../../Abills/MIBs/$line");
    my($ret, $oid_hash, $oid_ex) = snmpMIB_to_OID_extended("../../Abills/MIBs/$line");

    print "MIBS: $line Loaded<br> " if ($debug == 1);

    while(my($k, $v)=each %$oid_hash) {
  	  $OIDS_EXINFO{$k}{DESCRIBE}=$oid_ex->{$k}{DESCRIPTION} if ($oid_ex->{$k}{DESCRIPTION});
  	  $OIDS_EXINFO{$k}{ACCESS}=$oid_ex->{$k}{ACCESS} if ($oid_ex->{$k}{ACCESS});
  	  $OIDS_EXINFO{$k}{SYNTAX}=$oid_ex->{$k}{SYNTAX} if ($oid_ex->{$k}{SYNTAX});
  	  $OIDS_EXINFO{$k}{MIB}="$line" if (! $OIDS_EXINFO{$k}{MIB});
  	  snmpmapOID("$k", "$v");
     }
   }
  
  print "</pre>\n";
  return \%OIDS_EXINFO;
}




sub snmpMIB_to_OID_extended ($) {
  my($arg) = @_;
  my($quote, $buf, $var, $code, $val, $tmp, $tmpv, $strt);
  my($ret, $pass, $pos, $need2pass, $cnt, %prev);
  my(%Link) = (
    'org' => 'iso',
    'dod' => 'org',
    'internet' => 'dod',
    'directory' => 'internet',
    'mgmt' => 'internet',
    'mib-2' => 'mgmt',
    'experimental' => 'internet',
    'private' => 'internet',
    'enterprises' => 'private',
  );








  #my %OIDS_HASH = ();
  my %OIDS_EX = ();
  
  if (!open(MIB, $arg)) {
    carp "snmpMIB_to_OID: Can't open $arg: $!"
      unless ($SNMP_Session::suppress_warnings > 1);
    return -1;
  }
  print "snmpMIB_to_OID: loading $arg\n" if $SNMP_util::Debug;
  $ret = 0;
  $pass = 0;
  $need2pass = 1;
  $cnt = 0;
  $pos = tell(MIB);
  
  my %DESCRIBE_OIDS = ();
  #my @MIB_ARRAY =
  my $MIB_NAME;
  
  while($need2pass) {
    while(<MIB>) {
      s/--.*--//g;	# throw away comments (-- anything --)
      s/--.*//;		# throw away comments (-- anything EOL)
      if ($quote) {
	      next unless /"/;
	      $quote = 0;
       }
      chop;
#
#	$buf = "$buf $_";
# Previous line removed (and following replacement)
# suggested by Brian Reichert, reichert@numachi.com
#
      $buf .= ' ' . $_;
      $buf =~ s/\s+/ /g;

 if ($buf =~ / DEFINITIONS ::= BEGIN/) {

  if ($buf =~ /(\S+) DEFINITIONS/) {
    $MIB_NAME = $1;
    #print "$MIB_NAME\n";
   }
  
	if ($pass == 0 && $need2pass) {
	  seek(MIB, $pos, 0);
	  $buf = "";
	  $pass = 1;
	  $need2pass = 0;
	  $cnt = 0;
	  next;
	}
	$need2pass = 0;
	$pass = 0;
	$pos = tell(MIB);
	undef %Link;
	undef %prev;
	%Link = (
	  'org' => 'iso',
	  'dod' => 'org',
	  'internet' => 'dod',
	  'directory' => 'internet',
	  'mgmt' => 'internet',
	  'mib-2' => 'mgmt',
	  'experimental' => 'internet',
	  'private' => 'internet',
	  'enterprises' => 'private',
	);
	$buf = "";
	next;
 }
elsif ($buf =~ /FROM (\S+)/) {
	 if (! $loaded_mibs{$1}) {
	   print "FROM $1\n" if ($debug == 1);
	  }
	 $buf =~ s/FROM $1//;
 }

#print $buf."\n";

 if ($buf =~ /DESCRIPTION.+"(.+)"+/g) {
 	 $DESCRIBE_OIDS{DESCRIPTION}=$1;
 	 #print "DESCRIPTION: <b>$DESCRIBE_OIDS{DESCRIPTION}</b>\n";
 	 #next;
  }
 elsif ($buf =~ /ACCESS (\S+)/) {
   $DESCRIBE_OIDS{ACCESS}=$1;
   $buf =~ s/ACCESS $1//;
 	 next;
   #print "MAX-ACCESS <b>$DESCRIBE_OIDS{ACCESS}</b>\n";
  }
 elsif ($buf =~ /(\S+) OBJECT-TYPE/) {
   $DESCRIBE_OIDS{'OBJECT-TYPE'}=$1;
   #print "OBJECT-TYPE <b>$DESCRIBE_OIDS{'OBJECT-TYPE'}</b>\n";
   #next;
  }
 elsif ($buf =~ /SYNTAX (\w+)/) {
 	 #print "$buf<br>";
 	 $DESCRIBE_OIDS{'SYNTAX'}=$1;
   $buf =~ s/ SYNTAX .*//;
 	 next;
  }

      $buf =~ s/OBJECT-TYPE/OBJECT IDENTIFIER/;
      $buf =~ s/OBJECT-IDENTITY/OBJECT IDENTIFIER/;
      $buf =~ s/OBJECT-GROUP/OBJECT IDENTIFIER/;
      $buf =~ s/MODULE-IDENTITY/OBJECT IDENTIFIER/;
      $buf =~ s/ IMPORTS .*\;//;
      $buf =~ s/ SEQUENCE {.*}//;

      $buf =~ s/ [\w-]+ ::= OBJECT IDENTIFIER//;
      $buf =~ s/ OBJECT IDENTIFIER .* ::= {/ OBJECT IDENTIFIER ::= {/;
      $buf =~ s/".*"//;

#


  if ($buf =~ /"/) {
	  $quote = 1;
    }
#      	print "----- $buf.\n";

      if ($buf =~ / ([\w\-]+) OBJECT IDENTIFIER ::= {([^}]+)}/) {
      	

	$var = $1;
	$buf = $2;
#print "$var  // $buf.
#      	DESCRIPTION: <b>$DESCRIBE_OIDS{DESCRIPTION}</b>
#      	MAX-ACCESS <b>$DESCRIBE_OIDS{ACCESS}</b>
#      	OBJECT-TYPE <b>$DESCRIBE_OIDS{'OBJECT-TYPE'}</b>
#
#";
#
     
	undef $val;
	$buf =~ s/ +$//;
	($code, $val) = split(' ', $buf, 2);

  $OIDS_EX{$var}{SYNTAX}=$DESCRIBE_OIDS{SYNTAX};
  $OIDS_EX{$var}{ACCESS}=$DESCRIBE_OIDS{ACCESS};
  $OIDS_EX{$var}{DESCRIPTION}=$DESCRIBE_OIDS{DESCRIPTION};
  
 
  %DESCRIBE_OIDS=();
  
	if (!defined($val) || (length($val) <= 0)) {
	  #$SNMP_util::OIDS{$var} = $code;
	  $OIDS_HASH{$var} = $code;
	  $cnt++;
	  print "'$var' => '$code'\n" if $SNMP_util::Debug;
	} else {
	  $strt = $code;
	  while($val =~ / /) {
	    ($tmp, $val) = split(' ', $val, 2);
	    if ($tmp =~ /([\w\-]+)\((\d+)\)/) {
	      $tmp = $1;
	      if (exists($OIDS_HASH{$strt})) {
		$tmpv = "$OIDS_HASH{$strt}.$2";
	      } else {
		$tmpv = $2;
	      }
	      $Link{$tmp} = $strt;
	      if (!exists($prev{$tmp}) && exists($OIDS_HASH{$tmp})) {
		if ($tmpv ne $OIDS_HASH{$tmp}) {
		  $strt = "$strt.$tmp";
		  $OIDS_HASH{$strt} = $tmpv;
		  $cnt++;
		}
	      } else {
		$prev{$tmp} = 1;
		$OIDS_HASH{$tmp} = $tmpv;
		$cnt++;
		$strt = $tmp;
	      }
	    }
	  }

	  if (!exists($OIDS_HASH{$strt})) {
	    if ($pass) {
	      carp "snmpMIB_to_OID: $arg: \"$strt\" prefix unknown, load the parent MIB first.\n"
		unless ($SNMP_Session::suppress_warnings > 1);
		print "snmpMIB_to_OID: $arg: \"$strt\" prefix unknown, load the parent MIB first.<br>\n";
	    } else {
		$need2pass = 1;
	    }
	  }
	  $Link{$var} = $strt;
	  if (exists($OIDS_HASH{$strt})) {
	    $val = "$OIDS_HASH{$strt}.$val";
	  }
	  if (!exists($prev{$var}) && exists($OIDS_HASH{$var})) {
	    if ($val ne $OIDS_HASH{$var}) {
	      $var = "$strt.$var";
	    }
	  }

	  $OIDS_HASH{$var} = $val;
	  $prev{$var} = 1;
	  $cnt++;

	  print "'$var' => '$val'\n" if $SNMP_util::Debug;
	}
	undef $buf;
      }
    }

    if ($pass == 0 && $need2pass) {
      seek(MIB, $pos, 0);
      $buf = "";
      $pass = 1;
      $cnt = 0;
    } else {
      $ret += $cnt;
      $need2pass = 0;
    }
  }
  close(MIB);
  $RevNeeded = 1;
  
  $loaded_mibs{$MIB_NAME}=1;
  
  return ($ret, \%OIDS_HASH, \%OIDS_EX);
}



1


