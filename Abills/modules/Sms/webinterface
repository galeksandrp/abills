#!perl
# Sms functions
#
#

use Fees;
my $Fees  = Fees->new($db, $admin, \%conf);
my $Users = Users->new($db, $admin, \%conf);

my $Sms_service;
my $servise_name = '';
my %sms_status = (
0  => 'В очереди отправки',
1  => 'Недостаточно денег для рассылки',
2  => 'В процессе рассылки',
3  => 'Отправлено',
4  => 'Нет правильных номеров получателей',
5  => 'Частично отправлено',
6  => 'Спам',
7  => 'Недействительное имя отправителя',
8  => 'Пауза',
9  => 'Запланирована',
10 => 'Ожидает модерации'
);

#**********************************************************
# Connect to torbosms
#**********************************************************
sub sms_service_connect {

if ($conf{SMS_TXTLOCAL_APIKEY}) {
  eval { require "modules/Sms/Txtlocal.pm"; };
  if (!$@) {
    eval { require "modules/Sms/Txtlocal.pm"; };
    Txtlocal->import();
    $Sms_service = Txtlocal->new($db, $admin, \%conf);
    return $Sms_service;
  }
  else {
    print $@;
    $html->message('err', $_ERROR, "Can't load 'Txtlocal'. Purchase this module http://abills.net.ua");
    exit;
  }
}
elsif ($conf{SMS_SMSC_USER}) {
  eval { require "modules/Sms/Smsc.pm"; };
  if (!$@) {
    eval { require "modules/Sms/Smsc.pm"; };
    Smsc->import();
    $Sms_service = Smsc->new($db, $admin, \%conf);
    return $Sms_service;
  }
  else {
    print $@;
    $html->message('err', $_ERROR, "Can't load 'Smsc'. Purchase this module http://abills.net.ua");
    exit;
  }
}
elsif ($conf{SMS_LITTLESMS_USER}) {
  eval { require "modules/Sms/Littlesms.pm"; };
  if (!$@) {
    eval { require "modules/Sms/Littlesms.pm"; };
    Littlesms->import();
    $Sms_service = Littlesms->new($db, $admin, \%conf);
    return $Sms_service;
  }
  else {
    print $@;
    $html->message('err', $_ERROR, "Can't load 'Littlesms'. Purchase this module http://abills.net.ua");
    exit;
  }
}
elsif ($conf{SMS_EPOCHTASMS_OPENKEY}) {
  eval { require "modules/Sms/Epochtasms.pm"; };
  if (!$@) {
    eval { require "modules/Sms/Epochtasms.pm"; };
    Epochtasms->import();
    $Sms_service = Epochtasms->new($db, $admin, \%conf);
    return $Sms_service;
  }
  else {
    print $@;
    $html->message('err', $_ERROR, "Can't load 'Epochtasms'. Purchase this module http://abills.net.ua");
    exit;
  }
}
elsif ($conf{TURBOSMS_PASSWD}) {
  eval { require Turbosms; };
  if (! $@) {
    eval { require Turbosms; };
    Turbosms->import();
    $Sms_service = Turbosms->new($db, $admin, \%conf);

    if ($Turbosms::VERSION < 2.08) {
      $html->message('info', "UPDATE", "Please update module 'Turbosms' to version 2.08 or higher. http://abills.net.ua/");
      return 0;
    }

    %sms_status = %{ $Sms_service->error_codes() };
    $servise_name = 'turbosms';
    return $Sms_service;
  }
  else {
    print $@;
    $html->message('err', $_ERROR, "Can't load 'Turbosms'. Purchase this module http://abills.net.ua");
    exit;
  }
}  
else {
  $html->message('err', $_ERROR, "Sms service not connected");
}

}

#**********************************************************
# NUMBER   - User number
# MESSAGE  - Message
# UID      - User iD
#
# Multi send sms
# NUMBERS  - Hash of NUMBER => UID
#   MOre priority then NUMBER option
#**********************************************************
sub sms_send {
  my ($attr) = @_;

  sms_service_connect();

  $conf{SMS_NUMBER}= "[0-9]{12}" if (! $conf{SMS_NUMBER});
  
  if (! $attr->{NUMBER} && ! $attr->{NUMBERS}) {
    $html->message('err', $_ERROR, "$_ERR_PHONE_NOT_DEFINED");
  }
  elsif (! $attr->{NUMBERS} && $attr->{NUMBER} !~ /$conf{SMS_NUMBER}/) {
    $html->message('err', $_ERROR, "$_ERR_WRONG_PHONE");
  }

  my $numbers = $attr->{NUMBERS};

  if ($conf{SMS_NUMBER_EXPR}) {
    if($attr->{NUMBER}) {
      $attr->{NUMBER} = number_expr($attr->{NUMBER});
    }
    elsif($attr->{NUMBERS}) {
      my %new_numbers  = ();
      while(my($k, $v)=each %{ $attr->{NUMBERS} }) {
        my $num = number_expr($k);
        $new_numbers{$num}=$uid;
      }

      $numbers = \%new_numbers;
    }
  }

  if ($conf{SMS_TRANSLIT}) {
    $attr->{MESSAGE} = txt2translit($attr->{MESSAGE});
  }

  $Sms_service->send_sms(
    {
      NUMBERS => $numbers,
      NUMBER  => $attr->{NUMBER},
      MESSAGE => (($conf{TURBOSMS_MESSAGE_HEADER}) ? $conf{TURBOSMS_MESSAGE_HEADER}.' ' : '') . $attr->{MESSAGE},
      DEBUG   => $attr->{DEBUG} || 0
    }
  );

  if ($Sms_service->{errno}) {
    if ($attr->{QUITE}) {
      print "[$Sms_service->{errno}] $err_strs{$Sms_service->{errno}} $Sms_service->{errstr}\n";
    }
    else {
      $html->message('err', "$Sms_service->{SERVICE_NAME} - $_ERROR", "[$Sms_service->{errno}] $err_strs{$Sms_service->{errno}} $Sms_service->{errstr}");
    }
    return 0;
  }
  else {
    if ($conf{TURBOSMS_SEND_FEES}) {
      if ($attr->{NUMBERS}) {
        while (my ($number, $uid) = each %{ $attr->{NUMBERS} }) {
          $Users->info($attr->{UID});
          $Fees->take($users, $conf{TURBOSMS_SEND_FEES}, { DESCRIBE => 'Sms ' . $attr->{NUMBER} });
        }
      }
      elsif ($attr->{UID}) {
        $Users->info($attr->{UID});
        $Fees->take($users, $conf{TURBOSMS_SEND_FEES}, { DESCRIBE => 'Sms ' . $attr->{NUMBER} });
      }
    }
  }

  return 1;
}

#**********************************************************
#
#**********************************************************
sub sms_info {
  my ($id, $attr) = @_;

  sms_service_connect();

  $Sms_service->$Sms_service->info({ ID => $id });

  if ($Sms_service->{errno}) {
    print "[$Sms_service->{errno}] $err_strs{$Sms_service->{errno}}\n";
  }

  return 0;
}

#**********************************************************
#
#**********************************************************
sub sms_reports {
  $Sms_service = sms_service_connect();
  
  if (! $Sms_service ) {
    return 0;
  }

  if (! $FORM{desc} && ! $FORM{sort}) {
    $LIST_PARAMS{DESC} = 'DESC';
    $LIST_PARAMS{SORT} = 1;
  }

  if($FORM{search_form}) {
  	$Sms_service->{STATUS_SEL} = $html->form_select('STATUS',
      {
        SELECTED => $FORM{STATUS} || '',
        SEL_HASH => { '' => $_ALL, %sms_status },
        NO_ID    => 1
      }
    ); 	 
  	
  	$Sms_service->{GROUP_SEL} = sel_groups();
  	
    form_search({ SEARCH_FORM => $html->tpl_show(_include('sms_search', 'Sms'), { %FORM, %$Sms_service }, { OUTPUT2RETURN => 1 }) });
  }

  my $list = $Sms_service->info({%LIST_PARAMS, COLS_NAME => 1 });

  if ($Sms_service->{errno}) {
    $html->message('err', "$Sms_service->{SERVICE_NAME} - $_ERROR", "[$Sms_service->{errno}] $err_strs{$Sms_service->{errno}} $Sms_service->{errstr}");
  }

  my $table = $html->table(
    {
      width      => '100%',
      caption    => "$Sms_service->{SERVICE_NAME} - $_REPORTS",
      border     => 1,
      title      => [ '#', $_MSG_ID, "$_NUMBERS", "$_SIGN", "$_MESSAGE", 'wappush', "$_PRICE", $_DEPOSIT, 
           "$_SEND_TIME", "$_SENDED", "$_UPDATED", "$_STATUS", "$_ERROR" ],
      cols_align => [ 'center', 'left', 'left', 'left', 'left', 'left', 'left', 'left', 'left', 'left', 'left', 'left', 'left' ],
      qs         => $pages_qs,
      ID         => 'REPORTS_SMS',
      pages      => $Sms_service->{TOTAL},
      MENU       => "$_SEARCH:index=$index&search_form=1:search",
    }
  );

  use Encode;
  foreach my $line (@$list) {
    my $status  = ($sms_status{$line->{status}}) ? $sms_status{$line->{status}} : $line->{status};
    my $message = $line->{message}  || '';
    if ($conf{dbcharset} ne 'utf8') { Encode::from_to($status,  'utf-8', 'windows-1251') }
    my $destination = $line->{number};
    $destination =~ s/[\+\ ]+//; 
   
    $table->addrow(
      $line->{id},
      $line->{msg_id},
      $html->button($line->{number}, "index=".get_function_index('ureports_users_list'). "&DESTINATION=$destination&search=1&search_form=1"),
      $line->{sign},
      $message,
      $line->{wappush},
      $line->{cost},
      $line->{credits} || $line->{balance},
      $line->{send_time},
      ($line->{sended}=~/\d{4}/) ? $line->{sended} : ($line->{sended}) ? $_YES: $_NO,
      $line->{updated},
      $status,
      #convert( substr("$line->[11]", 0, 16), {  utf82win => 1 }).$html->br().
      #convert(convert("Отсутств", {  win2utf8 => 1 })),
      ($sms_status{$line->{error_code}}) ? $sms_status{$line->{error_code}} : $line->{error_code},
    );
  }

  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right' ],
      rows       => [ [ "$_TOTAL:", $html->b($Sms_service->{TOTAL}) ] ]
    }
  );
  print $table->show();
}

#**********************************************************
#
#**********************************************************
sub number_expr {
  my ($number_origin) = @_;
  my @num_expr = split(/;/, $conf{SMS_NUMBER_EXPR});

  my $number = $number_origin;
  for (my $i = 0 ; $i <= $#num_expr ; $i++) {
    my ($left, $right) = split(/\//, $num_expr[$i]);
    my $r = eval "\"$right\"";
    if ($number =~ s/$left/$r/) {
      return $number;
    }
  }

  return $number;
}


#**********************************************************
# convert to translit
#**********************************************************
sub txt2translit {
  my $text = shift;

  $text =~ y/абвгдеёзийклмнопрстуфхъыьэієї/abvgdeezijklmnoprstufh'y'eiei/;
  $text =~ y/АБВГДЕЁЗИЙКЛМНОПРСТУФХЪЫЬЭІЄЇ/ABVGDEEZIJKLMNOPRSTUFH'Y'EIEI/;
  my %mchars = (
    'ж' => 'zh',
    'ц' => 'ts',
    'ч' => 'ch',
    'ш' => 'sh',
    'щ' => 'sch',
    'ю' => 'ju',
    'я' => 'ja',
    'Ж' => 'Zh',
    'Ц' => 'Ts',
    'Ч' => 'Ch',
    'Ш' => 'Sh',
    'Щ' => 'Sch',
    'Ю' => 'Ju',
    'Я' => 'Ja'
  );
  for my $c (keys %mchars) {
    $text =~ s/$c/$mchars{$c}/g;
  }

  return $text;
}

1

