#!/usr/bin/perl
# Squid


use Nas;
use Socket;

use BER;
use SNMP_Session;
use SNMP_util;

require "Abills/nas.pl";

my $debug=0;


#*******************************************************************
# 
# 
#*******************************************************************
sub cisco_aironets {


my $Nas = Nas->new($db, \%conf);
my $list = $Nas->list({ TYPE => 'cisco_air', DISABLE => 0 });



if ($FORM{Client}) {
	my %info = ();

  use Users;
  my $users = Users->new($db, $admin, \%conf); 
  
  my $list = $users->list({ COMMENTS => '%cisco_air:'. $FORM{MAC} .'%'  });
  #cisco_air:00:11:95:e9:3b:2e
  if ($users->{TOTAL} > 0) {
	  $info{LOGIN} = $html->button("$list->[0]->[0]", "index=11&UID=$list->[0]->[5]");
	 }
  else {
	  $info{LOGIN} = "Check comment for cisco_air:MAC";
	 }

   #my($if_num) = snmpget("$community\@$host", '.1.3.6.1.4.1.9.9.273.1.1.2.1.1.1');
	
	$html->tpl_show(_include('cisco_aironet_client_info', 'Cisco'), \%info);
	return 0;
}


my @default_fields = ('ClientName',
                      'ClientDevType',
                      'ClientIpAddress',
                      'ClientAssociationState',
                      'ClientSigQuality', 
                      'ClientSignalStrength',
                      'ClinetUptime', 
                      'ClientDuplicates'
                     );


if ($FORM{fields}) {
  @default_fields = split(/, /, $FORM{fields});
}


my %fields = (#'ParentAddress'          => '.1.3.6.1.4.1.9.9.273.1.1.1.0',
              #'ActiveWirelessClients'  => '.1.3.6.1.4.1.9.9.273.1.1.2.1.1.1',
              #'AssociationGlobal'      => '.1.3.6.1.4.1.9.9.273.1.1.4.1.4.1',
              'ClientSignalStrength'   => '.1.3.6.1.4.1.9.9.273.1.3.1.1.3',
              'ClinetUptime'           => '.1.3.6.1.4.1.9.9.273.1.3.1.1.2',
              'ClientIpAddress'        => '.1.3.6.1.4.1.9.9.273.1.2.1.1.16',
              'ClientIpAddressType'    => '.1.3.6.1.4.1.9.9.273.1.2.1.1.15',
              'ClientSigQuality'       => '.1.3.6.1.4.1.9.9.273.1.3.1.1.4',
              'ClientParentAddress'    => '.1.3.6.1.4.1.9.9.273.1.2.1.1.2',
              'ClientCurrentTxRate'    => '.1.3.6.1.4.1.9.9.273.1.3.1.1.1',
              'ClientAssociationState' => '.1.3.6.1.4.1.9.9.273.1.2.1.1.14',
              'ClientPacketsReceived'  => '.1.3.6.1.4.1.9.9.273.1.3.1.1.6',
              'ClientBytesReceived'    => '.1.3.6.1.4.1.9.9.273.1.3.1.1.7',
              'ClientPacketsSent'      => '.1.3.6.1.4.1.9.9.273.1.3.1.1.8',
              'ClientBytesSent'        => '.1.3.6.1.4.1.9.9.273.1.3.1.1.9',
              'ClientDuplicates'       => '.1.3.6.1.4.1.9.9.273.1.3.1.1.10',
              'ClientMsduFails'        => '.1.3.6.1.4.1.9.9.273.1.3.1.1.12',
              'ClientMsduRetries'      => '.1.3.6.1.4.1.9.9.273.1.3.1.1.11',
              'ClientAid'              => '.1.3.6.1.4.1.9.9.273.1.2.1.1.10', 
              'ClientWepEnabled'       => '.1.3.6.1.4.1.9.9.273.1.2.1.1.6',
              'ClientWepErrors'        => '.1.3.6.1.4.1.9.9.273.1.3.1.1.13',
              'ClientMicEnabled'       => '.1.3.6.1.4.1.9.9.273.1.2.1.1.8',
              'ClientMicMissingFrames' => '.1.3.6.1.4.1.9.9.273.1.3.1.1.15',
              'ClientMicErrors'        => '.1.3.6.1.4.1.9.9.273.1.3.1.1.14',
              'ClientRoleClassType'    => '.1.3.6.1.4.1.9.9.273.1.2.1.1.3',
              'ClientDevType'          => '.1.3.6.1.4.1.9.9.273.1.2.1.1.4',
              'ClientRadioType'        => '.1.3.6.1.4.1.9.9.273.1.2.1.1.5',
              'ClientAgingLeft'        => '.1.3.6.1.4.1.9.9.273.1.3.1.1.5',
              'ClientCurrentTxRateSet' => '.1.3.6.1.4.1.9.9.273.1.3.1.1.1',
              'ClientDataRateSet'      => '.1.3.6.1.4.1.9.9.273.1.2.1.1.11',
              'ClientPowerSaveMode'    => '.1.3.6.1.4.1.9.9.273.1.2.1.1.9',
              'ClientName'             => '.1.3.6.1.4.1.9.9.273.1.2.1.1.13',
              'ClientSoftwareVersion'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.12',
              'ClientWepKeyMixEnabled' => '.1.3.6.1.4.1.9.9.273.1.2.1.1.7',
              'ClientConfigInfoEntry'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.17',
              'ClientConfigInfoEntry2' => '.1.3.6.1.4.1.9.9.273.1.2.1.1.18',
              'ClientConfigInfoEntry3' => '.1.3.6.1.4.1.9.9.273.1.2.1.1.19',
              'ClientConfigInfoEntry4'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.20',
              'ClientConfigInfoEntry5'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.21',
              'ClientConfigInfoEntry6'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.22',
              'ClientConfigInfoEntry7'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.23',
              'ClientConfigInfoEntry8'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.24',
              'ClientConfigInfoEntry9'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.25',

#              'MAC                    => '.1.3.6.1.2.1.17.4.3.1.1.'
              );



$table = $html->table( { width       => '100%',
                         caption     => "CISCO Aironets",
                         border      => 1,
                         title       => ['MAC', @default_fields, "-"],
                         cols_align  => ['left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'center'],
                       });

my $total_sessions = 0;
foreach my $line (@$list) {
  my %result = ();

  foreach my $field (@default_fields) {
    my @arr = snmpwalk("$line->[10]\@$line->[3]", $fields{$field});
    foreach my $line (@arr) {
      if ('.'.$line =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(.+)/) {
        $result{$field}{$1}=$2;
        print "$field // $line <br>"if ($debug == 1);
       }
     }
   }

  my @MAC_ARR = keys %{ $result{ $default_fields[0] } } ;
  
  $table->{rowcolor}=$_COLORS[0];
  $table->{extra}="colspan='". ($#default_fields + 2) ."' class='small'";
  $table->addrow("$line->[0]:<b>$line->[1]</b>:$line->[3] (". 
   $html->button('WEB', "", { GLOBAL_URL => "http://$line->[3]" }) 
   ."):$_TOTAL: ". ( $#MAC_ARR + 1 ) );

  $total_sessions += $#MAC_ARR + 1;

  undef($table->{rowcolor});
  undef($table->{extra});

    foreach my $k ( @MAC_ARR ) {
      my @mac_arr = split(/\./, $k);
      for(my $i=0; $i<=$#mac_arr; $i++) {
     	  $mac_arr[$i] = sprintf("%.2X", $mac_arr[$i]);
      }
      my $mac = join(':', @mac_arr);

      my @arr = ();
      foreach my $ft (@default_fields) {
        if ($ft eq 'ClientIpAddress' ) {
           $result{'ClientIpAddress'}{$k} = int2ip(unpack("N4", $result{'ClientIpAddress'}{$k}));
         }
        elsif ($ft eq 'ClinetUptime') {
      	  $result{'ClinetUptime'}{$k} = sec2time($result{'ClinetUptime'}{$k}, { str => 1});
         }
        elsif ($ft eq 'ClientDataRateSet') {
          my @arr = unpack("C*", $result{'ClientDataRateSet'}{$k});
          for(my $i; $i<$#arr; $i++) {
          	 $arr[$i]=$arr[$i]/2;
           }
          $result{'ClientDataRateSet'}{$k} = join(", ", @arr). ' Mbps';
         }
        elsif ($ft eq 'ClientCurrentTxRate' || $ft eq 'ClientCurrentTxRateSet') {
          $result{$ft}{$k} = (hex((unpack("H2", $result{$ft}{$k})) ) / 2) . " Mbps";
         }
        elsif ($ft eq 'ClientAssociationState') {
          my @association_state = ('initial',
                         'authenNotAssociated',
                         'assocAndAuthenticated',
                         'assocNotAnuthenticated',
                         'authenticated');
          $result{'ClientAssociationState'}{$k} = $association_state[$result{'ClientAssociationState'}{$k}];
         }

      	push @arr, $result{$ft}{$k};
       }
    	
    	$table->addrow($html->button("<CODE>$mac</CODE>", "index=$index&Client=$k&MAC=$mac"), 
                     @arr,
    	               "(". $html->button('H', "index=$index&hangup=$k", { TITLE => 'Hangup' }). ")"
                     );


   }
  #last;

}

print $table->show();


$table = $html->table({ width       => '100%',
                        rowcolor    => $_COLORS[3],
                        cols_align  => ['right', 'left', 'right', 'right', 'center'],    
                        rows        => [ ["$_TOTAL:", "$_USERS:", "$total_users", "$_SESSIONS:", "$total_sessions" ]]
                      });

print $table->show();


my $table2 = $html->table({ width       => '100%'
                      });
my @arr = ();
foreach my $name ( sort keys %fields) {
  push @arr, $html->form_input('fields', "$name", { TYPE => 'checkbox', STATE => (in_array($name, \@default_fields)) ? 1 : undef  }). " $name";

  if ($#arr > 2) {
    $table2->addrow(@arr);
    @arr = ();
  }
}

if ($#arr > -1 ) {
  $table2->addrow(@arr);
 }




$table = $html->table( { width       => '100%',
                         title_plain => [ 
                                           "$_REFRESH (sec): ".   $html->form_input('REFRESH', int($FORM{REFRESH}), { SIZE => 4 } ),
                                           $html->form_input('SHOW',  $_SHOW, { TYPE => 'SUBMIT'})  
                                         ],
                          cols_align => ['center:noprint', 'center:noprint'],
                       });

print  $output .= $html->form_main({ CONTENT => $table2->show(). $table->show(),
	                                   HIDDEN  => { index =>  "$index" },
	                                   METHOD  => 'GET'
                                   });

}




1

