#!/usr/bin/perl
# Squid


use Nas;
use Socket;

use BER;
use SNMP_Session;
use SNMP_util;

require "Abills/nas.pl";

my $debug=0;


          my @association_state = ('initial',
                         'authenNotAssociated',
                         'assocAndAuthenticated',
                         'assocNotAnuthenticated',
                         'authenticated');

                                       
my %GENERAL_MIBS = ('sysDescr'    => '.1.3.6.1.2.1.1.1.0',
                    'sysUpTime'   => '.1.3.6.1.2.1.1.3',
                    'sysObjectID' => '.1.3.6.1.2.1.1.2');

#*******************************************************************
# 
# 
#*******************************************************************
sub cisco_aironets {


my $Nas = Nas->new($db, \%conf);
my $list = $Nas->list({ TYPE => 'cisco_air', DISABLE => 0 });

my %fields = (#'ParentAddress'          => '.1.3.6.1.4.1.9.9.273.1.1.1.0',
              #'ActiveWirelessClients'  => '.1.3.6.1.4.1.9.9.273.1.1.2.1.1.1',
              #'AssociationGlobal'      => '.1.3.6.1.4.1.9.9.273.1.1.4.1.4.1',
              # 1.3.6.1.4.1.9.9.272.1.1.1.9.1.1
              'ClientSignalStrength'   => '.1.3.6.1.4.1.9.9.273.1.3.1.1.3',
              'ClinetUptime'           => '.1.3.6.1.4.1.9.9.273.1.3.1.1.2',
              'ClientIpAddress'        => '.1.3.6.1.4.1.9.9.273.1.2.1.1.16',
              'ClientIpAddressType'    => '.1.3.6.1.4.1.9.9.273.1.2.1.1.15',
              'ClientSigQuality'       => '.1.3.6.1.4.1.9.9.273.1.3.1.1.4',
              'ClientParentAddress'    => '.1.3.6.1.4.1.9.9.273.1.2.1.1.2',
              'ClientCurrentTxRate'    => '.1.3.6.1.4.1.9.9.273.1.3.1.1.1',
              'ClientAssociationState' => '.1.3.6.1.4.1.9.9.273.1.2.1.1.14',
              'ClientPacketsReceived'  => '.1.3.6.1.4.1.9.9.273.1.3.1.1.6',
              'ClientBytesReceived'    => '.1.3.6.1.4.1.9.9.273.1.3.1.1.7',
              'ClientPacketsSent'      => '.1.3.6.1.4.1.9.9.273.1.3.1.1.8',
              'ClientBytesSent'        => '.1.3.6.1.4.1.9.9.273.1.3.1.1.9',
              'ClientDuplicates'       => '.1.3.6.1.4.1.9.9.273.1.3.1.1.10',
              'ClientMsduFails'        => '.1.3.6.1.4.1.9.9.273.1.3.1.1.12',
              'ClientMsduRetries'      => '.1.3.6.1.4.1.9.9.273.1.3.1.1.11',
              'ClientAid'              => '.1.3.6.1.4.1.9.9.273.1.2.1.1.10', 
              'ClientWepEnabled'       => '.1.3.6.1.4.1.9.9.273.1.2.1.1.6',
              'ClientWepErrors'        => '.1.3.6.1.4.1.9.9.273.1.3.1.1.13',
              'ClientMicEnabled'       => '.1.3.6.1.4.1.9.9.273.1.2.1.1.8',
              'ClientMicMissingFrames' => '.1.3.6.1.4.1.9.9.273.1.3.1.1.15',
              'ClientMicErrors'        => '.1.3.6.1.4.1.9.9.273.1.3.1.1.14',
              'ClientRoleClassType'    => '.1.3.6.1.4.1.9.9.273.1.2.1.1.3',
              'ClientDevType'          => '.1.3.6.1.4.1.9.9.273.1.2.1.1.4',
              'ClientRadioType'        => '.1.3.6.1.4.1.9.9.273.1.2.1.1.5',
              'ClientAgingLeft'        => '.1.3.6.1.4.1.9.9.273.1.3.1.1.5',
              'ClientCurrentTxRateSet' => '.1.3.6.1.4.1.9.9.273.1.3.1.1.1',
              'ClientDataRateSet'      => '.1.3.6.1.4.1.9.9.273.1.2.1.1.11',
              'ClientPowerSaveMode'    => '.1.3.6.1.4.1.9.9.273.1.2.1.1.9',
              'ClientName'             => '.1.3.6.1.4.1.9.9.273.1.2.1.1.13',
              'ClientSoftwareVersion'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.12',
              'ClientWepKeyMixEnabled' => '.1.3.6.1.4.1.9.9.273.1.2.1.1.7',
              'ClientConfigInfoEntry'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.17',
              'ClientConfigInfoEntry2' => '.1.3.6.1.4.1.9.9.273.1.2.1.1.18',
              'ClientConfigInfoEntry3' => '.1.3.6.1.4.1.9.9.273.1.2.1.1.19',
              'ClientConfigInfoEntry4'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.20',
              'ClientConfigInfoEntry5'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.21',
              'ClientConfigInfoEntry6'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.22',
              'ClientConfigInfoEntry7'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.23',
              'ClientConfigInfoEntry8'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.24',
              'ClientConfigInfoEntry9'  => '.1.3.6.1.4.1.9.9.273.1.2.1.1.25',

#              'MAC                    => '.1.3.6.1.2.1.17.4.3.1.1.'
              );

if ($FORM{Client}) {
	my %info = ();

  use Users;
  my $users = Users->new($db, $admin, \%conf); 
  
  my $list = $users->list({ COMMENTS => '%cisco_air:'. $FORM{MAC} .'%'  });
  #cisco_air:00:11:95:e9:3b:2e
  $info{MAC} = $FORM{MAC};
  if ($users->{TOTAL} > 0) {
	  $info{LOGIN} = $html->button("$list->[0]->[0]", "index=11&UID=$list->[0]->[5]");
	 }
  else {
	  $info{LOGIN} = "Check comment for cisco_air:MAC";
	 }
  
  $Nas->info({ NAS_ID => $FORM{NAS_ID} });

  foreach my $key (keys %fields) {
	 	
	 	
	 	
	 	
	 	$info{$key} = snmpget("$Nas->{NAS_MNG_PASSWORD}\@$Nas->{NAS_IP}", $fields{$key}. '.1.7.119.108.97.110.119.101.112.'. $FORM{Client});
	 	
	 	print "$key: $fields{$key}.1.7.119.108.97.110.119.101.112.$FORM{Client} = $info{$key}<br>" if ($debug == 1);
	 	
	 	$info{$key} = data_convert($key, $info{$key});
	 }

	$html->tpl_show(_include('cisco_aironet_client_info', 'Cisco'), \%info);
	return 0;
}


my @default_fields = ('ClientName',
                      'ClientDevType',
                      'ClientIpAddress',
                      'ClientAssociationState',
                      'ClientSigQuality', 
                      'ClientSignalStrength',
                      'ClinetUptime', 
                      'ClientDuplicates'
                     );


if ($FORM{fields}) {
  @default_fields = split(/, /, $FORM{fields});
}






$table = $html->table({ width       => '100%',
                        caption     => "CISCO Aironets",
                        border      => 1,
                        title       => ['MAC', @default_fields, "-"],
                        cols_align  => ['left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'center'],
                      });

my $total_sessions = 0;
my $oid_prefix = '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}';
foreach my $line (@$list) {
  my %result = ();

  foreach my $field (@default_fields) {
    my @arr = snmpwalk("$line->[10]\@$line->[3]", $fields{$field});
    foreach my $line (@arr) {
      if ('.'.$line =~ /^$oid_prefix\.(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(.+)/) {
        $result{$field}{$1}=$2;
        print "$field // $line <br>"if ($debug == 1);
       }
     }
   }

  my @MAC_ARR = keys %{ $result{ $default_fields[0] } } ;
  
  $table->{rowcolor}=$_COLORS[0];
  $table->{extra}="colspan='". ($#default_fields + 2) ."' class='small'";
  $table->addrow("$line->[0]:<b>$line->[1]</b>:$line->[3] (". 
   $html->button('WEB', "", { GLOBAL_URL => "http://$line->[3]" }) 
   ."):$_TOTAL: ". ( $#MAC_ARR + 1 ) );

  $total_sessions += $#MAC_ARR + 1;

  undef($table->{rowcolor});
  undef($table->{extra});

    foreach my $k ( @MAC_ARR ) {
      my @mac_arr = split(/\./, $k);
      for(my $i=0; $i<=$#mac_arr; $i++) {
     	  $mac_arr[$i] = sprintf("%.2X", $mac_arr[$i]);
      }
      my $mac = join(':', @mac_arr);

      my @arr = ();
      foreach my $ft (@default_fields) {
        $result{$ft}{$k} = data_convert($ft, $result{$ft}{$k});
      	push @arr, $result{$ft}{$k};
       }
    	
    	$table->addrow($html->button("<CODE>$mac</CODE>", "index=$index&Client=$k&MAC=$mac&NAS_ID=$line->[0]"), 
                     @arr,
    	               "(". $html->button('H', "index=$index&hangup=$k", { TITLE => 'Hangup' }). ")"
                     );


   }
  #last;

}

print $table->show();


$table = $html->table({ width       => '100%',
                        rowcolor    => $_COLORS[3],
                        cols_align  => ['right', 'left', 'right', 'right', 'center'],    
                        rows        => [ ["$_TOTAL:", "$_USERS:", "$total_users", "$_SESSIONS:", "$total_sessions" ]]
                      });

print $table->show();

snmp_form_footer(\%fields, \@default_fields);

}


#**********************************************************
#
#**********************************************************
sub data_convert () {
	my ($name, $data) = @_;
	
	my $ret = '';
	      if ($name eq 'ClientIpAddress') {
           $ret = int2ip(unpack("N4", $data));
         }
        elsif ($name eq 'ClientParentAddress') {
        	$ret = join(':', unpack("H*", $data));
         }
        elsif ($name eq 'ClinetUptime') {
      	  $ret = sec2time($data, { str => 1});
         }
        elsif ($name eq 'ClientDataRateSet') {
          my @arr = unpack("C*", $data);
          for(my $i; $i<$#arr; $i++) {
          	 $arr[$i]=$arr[$i]/2;
           }
          $ret = join(", ", @arr). ' Mbps';
         }
        elsif ($name eq 'ClientCurrentTxRate' || $name eq 'ClientCurrentTxRateSet') {
          $ret = (hex((unpack("H2", $data)) ) / 2) . " Mbps";
         }
        elsif ($name eq 'ClientAssociationState') {
          $ret = $association_state[$data];
         }
        else {
        	$ret = $data;
         }
	
	return $ret;
}

#**********************************************************
#
#**********************************************************
sub snmp_patton_dialin {

   
   my @default_fields = ('diactIndex');
   
   my %fields = (

      diactIndex                  => '1',
      diactMultiIndex             => '2',
      diactState                  => '3',
      diactProtocol               => '4',
      diactAccessLevel            => '5',
      diactDSPIndex               => '6',
      diactIFIndex                => '7',
      diactLinkIndex              => '8',
      diactSlotIndex              => '9',
      diactIP                     => '10',
      diactPort                   => '11',
      diStatBadAddresses          => '12',
      diStatBadControls           => '13',
      diStatPacketTooLongs        => '14',
      diStatBadFCSs               => '15',
      diStatLocalMRU              => '16',
      diStatRemoteMRU             => '17',
      diStatLocalToPeerACCMap     => '18',
      diStatPeerToLocalACCMap     => '19',
      diStatLocalToRemoteProtComp => '20',
      diStatRemoteToLocalProtComp => '21',
      diStatLocalToRemoteACComp   => '22',
      diStatRemoteToLocalACComp   => '22',
      diStatTransmitFcsSize       => '23',
      diStatReceiveFcsSize        => '24',
      diIpOperStatus              => '25',
      diIpLocalToRemoteCompProt   => '26',
      diIpRemoteToLocalCompProt   => '27',
      diIpRemoteMaxSlotId         => '28',
      diIpLocalMaxSlotId          => '29',
      diactSessionTime            => '30',
      diactRemainingIdle          => '31',
      diactRemainingSession       => '33',
      diactNumberDialed           => '34',
      diactCallingPhone           => '35',
      diactSentOctets             => '36',
      diactReceivedOctets         => '37',
      diactSentDataFrames         => '38',
      diactReceivedDataFrames     => '39',
      diactErrorFrames            => '40',
      diactSessionStartTime       => '41',
      diactModulation             => '43',
      diactErrorCorrection        => '44',
      diactCompression            => '45',
      diactMultiLinkFlag          => '46',
      diactSymbolRate             => '48',

      diactTxSpeed                => '49',
      diactRxSpeed                => '50',
      
      diactUsername               => '56',
      diactPassword               => '57',
      diactTerminateReason        => '58',
      diactTerminateState         => '59',
      diactLocalRenegotiates      => '60',
      diactLocalRetrains          => '61',
      diactRemoteRenegotiates     => '62',
      diactRemoteRetrains         => '63',
      diStatLcpRemoteMRRU         => '64',
      diStatLcpLocalMRRU          => '65',
      diStatLcpAuth               => '66',

      diStatIpFilterA             => '70',
      diStatIpFilterB             => '71',
      diStatIpFilterC             => '72',
      diStatIpFilterD             => '73',
      diStatIpFilterE             => '74',
      diStatIpFilterF             => '75',
      diStatIpFilterG             => '76',
      diStatIpFilterH             => '77',
      diStatIpFilterI             => '78',
      diStatIpFilterJ             => '79',

      diactForceNextHop           => '67',
      diactPrimaryDNS             => '100',
      diactSecondaryDNS           => '101'
 );

my @default_fields = ('diactIndex', 'diactSlotIndex', 'diactUsername', 'diactState');

if ($FORM{fields}) {
  @default_fields = split(/, /, 'diactIndex, '. $FORM{fields});
}

if ($FORM{sort}) {
	
}


$table = $html->table({ width       => '100%',
                        caption     => "Patton",
                        border      => 1,
                        title       => [@default_fields, "-"],
                        cols_align  => ['left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'center'],
                      });



my $oid_prefix = '.1.3.6.1.4.1.1768.5.100.1';

my $Nas = Nas->new($db, \%conf);
my $list = $Nas->list({ TYPE => 'patton', DISABLE => 0 });

foreach my $line (@$list) {
  my %result = ();
  

  foreach my $field (@default_fields) {
    my @arr = snmpwalk("$line->[10]\@$line->[3]", $oid_prefix.'.'.$fields{$field});
    foreach my $line (@arr) {
      if ($line =~ /(\d+):(.+)/) {
        $result{$field}{$1}=$2;
        print "$field // $line ($1:$2) <br>"if ($debug == 1);
       }
     }
   }

my @SESSION_ARR = keys %{ $result{ $default_fields[0] } } ;

    foreach my $k ( @SESSION_ARR ) {

      my @arr = ();
      foreach my $ft (@default_fields) {
        #$result{$ft}{$k} = data_convert($ft, $result{$ft}{$k});
      	push @arr, $result{$ft}{$k};
       }
    	
    	$table->addrow(@arr,
    	               "(". $html->button('H', "index=$index&hangup=$k", { TITLE => 'Hangup' }). ")"
                     );


   }

}



print $table->show();
$table = $html->table({ width       => '100%',
                        rowcolor    => $_COLORS[3],
                        cols_align  => ['right', 'left', 'right', 'right', 'center'],    
                        rows        => [ ["$_TOTAL:", "$_USERS:", "$total_users", "$_SESSIONS:", "$total_sessions" ]]
                      });

print $table->show();

	
	
snmp_form_footer(\%fields, \@default_fields);
	
}


#**********************************************************
#
#**********************************************************
sub snmp_form_footer {
	my ($fields, $active_fields) = @_;


 

my $table2 = $html->table({ width => '100%' });
my @arr = ();
foreach my $name ( sort keys %$fields) {
  push @arr, $html->form_input('fields', "$name", { TYPE => 'checkbox', STATE => (in_array($name, $active_fields)) ? 1 : undef  }). " $name";

  if ($#arr > 2) {
    $table2->addrow(@arr);
    @arr = ();
  }
}

if ($#arr > -1 ) {
  $table2->addrow(@arr);
 }




my $table = $html->table( { width       => '100%',
                         title_plain => [ 
                                           "$_REFRESH (sec): ".   $html->form_input('REFRESH', int($FORM{REFRESH}), { SIZE => 4 } ),
                                           $html->form_input('SHOW',  $_SHOW, { TYPE => 'SUBMIT'})  
                                         ],
                          cols_align => ['center:noprint', 'center:noprint'],
                       });

print  $output .= $html->form_main({ CONTENT => $table2->show(). $table->show(),
	                                   HIDDEN  => { index =>  "$index" },
	                                   METHOD  => 'GET'
                                   });

	
}



1

