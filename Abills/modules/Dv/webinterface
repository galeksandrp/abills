# Dialup vpn web functions



use Dv;
use Finance;
use Fees;
use Dv_Sessions;
use Shedule;
use Tariffs;
use Nas;

my $Dv       = Dv->new($db, $admin, \%conf);
my $fees     = Fees->new($db, $admin, \%conf);
my $tariffs  = Tariffs->new($db, \%conf, $admin);
my $sessions = Dv_Sessions->new($db, $admin, \%conf);

my %FORM_BASE = ();
my @service_status = ( "$_ENABLE", "$_DISABLE", "$_NOT_ACTIVE" );


#*******************************************************************
# Change user variant form
# form_chg_vid()
#*******************************************************************
sub dv_chg_tp {
 my ($attr) = @_;

 my $user;

 if(defined($attr->{USER})) {
   $user = $attr->{USER};
   $Dv = $Dv->info($user->{UID});
   if($Dv->{TOTAL} < 1) {
 	   $html->message('info', $_INFO, "$_NOT_ACTIVE");
 	   return 0;
    }
  }
 else {
 	 $html->message('err', $_ERROR, "$_USER_NOT_EXIST");
 	 return 0;
  }

 my $TARIF_PLAN = $FORM{tarif_plan} || $_DEFAULT_TARIF_PLAN;
 my $period = $FORM{period} || 0;

 my $shedule = Shedule->new($db, $admin, \%conf);

  
if ($Dv->{MONTH_ABON}> 0 && ! $Dv->{STATUS} && ! $users->{DISABLE} &&
        ($users->{DEPOSIT}+$users->{CREDIT} > 0 || 
         $Dv->{POSTPAID_ABON} || 
         $Dv->{PAYMENT_TYPE} == 1 )) {

      if ($users->{ACTIVATE} ne '0000-00-00') {
        my ($Y, $M, $D)=split(/-/, $users->{ACTIVATE}, 3);
        $M--;
        $Dv->{ABON_DATE} = strftime "%Y-%m-%d", localtime(  (mktime(0, 0, 0, $D, $M, ($Y-1900), 0, 0, 0)  + 31 * 86400) );
       }
      else {
        my ($Y, $M, $D)=split(/-/, $DATE, 3);
        $M++;
        if ($M == 13) {
          $M = 1;
          $Y++;
         }
        $D='01';
        $M = sprintf("%02.d", $M);
        $Dv->{ABON_DATE} = "$Y-$M-$D";
       }
 }



if ($FORM{set}) {

  if ($period > 0) {

    if ($period == 1) {
      ($FORM{date_Y}, $FORM{date_M}, $FORM{date_D})=split(/-/, $Dv->{ABON_DATE}, 3);
     }
    else {
    	$FORM{date_M}++;
     }
    #print "--- $FORM{date_Y}, $FORM{date_M}, $FORM{date_D} // $Dv->{ABON_DATE}-- ";
 	  use POSIX;
    
    my $seltime = POSIX::mktime(0, 0, 0, $FORM{date_D}, $FORM{date_M}, ($FORM{date_Y} - 1900));
    
    if ($seltime <= time()) {
      $html->message('info', $_INFO, "$ERR_WRONG_DATA ($FORM{date_D}, $FORM{date_M}, $FORM{date_Y}  )/". $seltime . "-" . time());
      return 0;
     }

    $shedule->add( {UID     => $Dv->{UID},
                   TYPE     => 'tp',
                   ACTION   => $FORM{TP_ID},
    	             D        => $FORM{date_D},
                   M        => $FORM{date_M},
                   Y        => $FORM{date_Y},
                   DESCRIBE => "$message<br>
                   $_FROM: '$FORM{date_Y}-$FORM{date_M}-$FORM{date_D}'",
                   MODULE   => 'Dv'
                    });

    if ($shedule->{errno}) {
      $html->message('err', $_ERROR, "[$shedule->{errno}] $err_strs{$shedule->{errno}}");	
     }
    else {
      $html->message('info', $_CHANGED, "$_CHANGED");
      $Dv->info($Dv->{UID});
    }
   }
  else {
    $Dv->change({ %FORM });

    if ($Dv->{errno}) {
      $html->message('err', $_ERROR, "[$Dv->{errno}] $err_strs{$Dv->{errno}}");	
     }
    else {
      #Take fees
      if ($Dv->{TP_INFO}->{MONTH_FEE} > 0 && ! $Dv->{STATUS}) {
        dv_get_month_fee($Dv);
       }

    	
      $html->message('info', $_CHANGED, "$_CHANGED");
      $Dv->info($Dv->{UID});
    }

  }
}
elsif($FORM{del}) {
  $shedule->del( { UID => $Dv->{UID},
   	               ID  => $FORM{SHEDULE_ID}  } 
   	            );

  $html->message('info', $_DELETED, "$_DELETED [$FORM{SHEDULE_ID}]");
}

  $shedule->info( {UID      => $Dv->{UID},
                   TYPE     => 'tp',
                   DESCRIBE => "$message\n$_FROM: '$FORM{date_y}-$FORM{date_m}-$FORM{date_d}'",
                   MODULE   => 'Dv'
                   });


  if ($shedule->{TOTAL} > 0) {
  	$table = $html->table( { width      => '100%',
  		                       caption    => "$_SHEDULE",
                             cols_align => ['left', 'left'],
                             rows       => [ [ "$_TARIF_PLAN:", "$shedule->{ACTION}"   ],
                                             [ "$_DATE:",   "$shedule->{D}-$shedule->{M}-$shedule->{Y}" ],
                                             [ "$_ADMIN:",  "$shedule->{ADMIN_NAME}"   ],
                                             [ "$_ADDED:",  "$shedule->{DATE}"         ],
                                             [ "ID:",       "$shedule->{SHEDULE_ID}"   ]  
                                            ]
                               } );
  	$tariffs->{TARIF_PLAN_SEL} = $table->show(). $html->form_input('SHEDULE_ID', "$shedule->{SHEDULE_ID}", {TYPE => 'HIDDEN' });
  	$tariffs->{ACTION}         = 'del';
  	$tariffs->{LNG_ACTION}     = $_DEL;
  }
 else {
   $tariffs->{TARIF_PLAN_SEL}=$html->form_select('TP_ID', 
                                          { 
 	                                          SELECTED          => $Dv->{TP_ID},
 	                                          SEL_MULTI_ARRAY   => $tariffs->list(),
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });

   $tariffs->{PARAMS} .= form_period($period, { ABON_DATE => $Dv->{ABON_DATE} });	
   $tariffs->{ACTION}='set';
   $tariffs->{LNG_ACTION}=$_CHANGE;
  }

 

my $tp_index = $index + 4;

$tariffs->{UID}=$attr->{USER}->{UID};
$tariffs->{m}=$m;
$tariffs->{TP_ID} = $Dv->{TP_ID};
$tariffs->{TP_NAME} = "$Dv->{TP_ID}:$Dv->{TP_NAME} [". $html->button("$_TARIF_PLANS", "index=$tp_index&TP_ID=$Dv->{TP_ID}", { TITLE => "$_TP" } ). "]";


print $html->tpl_show(templates('form_chg_tp'), $tariffs);


}


#**********************************************************
# user_dv
#**********************************************************
sub dv_users_list {
 my ($attr)=@_;

 if (! $permissions{0}{2}) {
	 return 0;
  }


 if ($attr->{TP}) {
   $LIST_PARAMS{TP_ID} = $FORM{TP_ID};
   #$pages_qs .= "&TP_ID=$FORM{TP_ID}";
  }
 elsif($FORM{TP_ID}) {
   $FORM{subf}=$index;
   dv_tp();
   return 0;
  }
 
 
 $FORM{GROUP_SEL}    = sel_groups();
 $FORM{STATUS_SEL}   = $html->form_select('STATUS', 
                                          { 
 	                                          SELECTED     => $FORM{STATUS},
 	                                          SEL_ARRAY    => ['', @service_status ],
 	                                          ARRAY_NUM_ID => 1
 	                                        });

 
 form_search({ SEARCH_FORM => $html->tpl_show(_include('dv_users_search', 'Dv'),
 	                                            { %FORM },
 	                                            { notprint => 1 })    });


 print $html->letters_list({ pages_qs => $pages_qs  }); 

 if ($FORM{letter}) {
   $LIST_PARAMS{FIRST_LETTER} = $FORM{letter};
   $pages_qs .= "&letter=$FORM{letter}";
  } 


my $list = $Dv->list( { %LIST_PARAMS } );

my @TITLE = ($_LOGIN, $_FIO, $_DEPOSIT, $_CREDIT, $_TARIF_PLANS, $_STATUS, '-', '-');
my @EX_TITLE_ARR  = split(/, /, $Dv->{SEARCH_FIELDS});

my %SEARCH_TITLES = ('INET_NTOA(dv.ip)' => 'IP',
                     'dv.speed'         => $_SPEED,
                     'dv.port'          => $_PORT,
                     'dv.cid'           => 'CID',
                     'dv.filter_id'     => 'Filter ID',
                     'tp.name'          => "$_TARIF_PLAN"
                   );


for(my $i=0; $i<$Dv->{SEARCH_FIELDS_COUNT}; $i++){
	push @TITLE, '-';
	$TITLE[6+$i] = $SEARCH_TITLES{$EX_TITLE_ARR[$i]} || "$_SEARCR";
}

if ($Dv->{errno}) {
  $html->message('err', $_ERROR, "[$Dv->{errno}] $err_strs{$Dv->{errno}}");	
  return 0;
 }
elsif ($Dv->{TOTAL} == 1) {
	form_users({  USER => user_info($list->[0]->[6+$Dv->{SEARCH_FIELDS_COUNT}]) });
	return 0;
}



my $table = $html->table( { width      => '100%',
                            caption    => "Dialup / VPN",
                            border     => 1,
                            title      => \@TITLE,
                            cols_align => ['left', 'left', 'right', 'right', 'left', 'center', 'center:noprint', 'center:noprint'],
                            qs         => $pages_qs,
                            pages      => $Dv->{TOTAL}
                           });

foreach my $line (@$list) {
  my $payments = ($permissions{1}) ?  $html->button("$_PAYMENTS", "index=2&UID=". $line->[6+$Dv->{SEARCH_FIELDS_COUNT}]) : ''; 
  
  my @fields_array  = ();
  for(my $i=0; $i<$Dv->{SEARCH_FIELDS_COUNT}; $i++){
     push @fields_array, $line->[6+$i];
   }
  
  $table->addrow(
   $html->button("$line->[0]", "index=15&UID=$line->[6+$Dv->{SEARCH_FIELDS_COUNT}]"), 
   "$line->[1]",
   "$line->[2]", 
   "$line->[3]", 
   "$line->[4]", 
   "$service_status[$line->[5]]",
   @fields_array, 
   $payments, 
   $html->button("$_STATS", "index=". ($index + 3) ."&UID=". $line->[6+$Dv->{SEARCH_FIELDS_COUNT}])

   );
}
print $table->show();

$table = $html->table( { width      => '100%',
                         cols_align => ['right', 'right'],
                         rows       => [ [ "$_TOTAL:", $html->b($Dv->{TOTAL}) ] ]
                        } );
print $table->show();

  return 0;
}


#**********************************************************
# user_dv
#**********************************************************
sub dv_user {
 	my ($attr) = @_;

 	$Dv->{UID}=$FORM{UID} || $LIST_PARAMS{UID} ;	  

  
  if ($FORM{REGISTRATION_INFO}) {
      
     # Info
     my $users = Users->new($db, $admin, \%conf); 
     my $dv = $Dv->info($Dv->{UID});
     my $pi = $users->pi({ UID => $Dv->{UID} });
     my $user  = $users->info($Dv->{UID}, { SHOW_PASSWORD => $permissions{0}{3} });
 
     $html->tpl_show(templates('form_user_info'), { %$user, %$pi, DATE => $DATE, TIME => $TIME } );
     $html->tpl_show(_include('dv_user_info', 'Dv'), $dv);


     if (in_array('Mail', \@MODULES)) {
       require "Abills/modules/Mail/webinterface";
       my $Mail = Mail->new($db, $admin, \%conf);

       my $list = $Mail->mbox_list({ UID => $Dv->{UID} });
       foreach my $line (@$list) {
    	   $Mail->{EMAIL_ADDR} = $line->[0] . '@' . $line->[1];
    	   $html->tpl_show(_include('mail_user_info', 'Mail'), $Mail);
    	  }
     }

     return 0;
   }
  elsif ($FORM{add}) {
    if (! $permissions{0}{1} ) {
      $html->message('err', $_ERROR, "Access Deny");  	
    	return 0;
     }

    $Dv->add({ %FORM });

    if (! $Dv->{errno}) {
    	#Make month feee
    	$Dv->{ACTIVATE}=$attr->{USER}->{ACTIVATE};
    	dv_get_month_fee($Dv) if (! $FORM{STATUS});
      $html->message('info', $_INFO, "$_ADDED");	
     }
   }
	elsif($FORM{set}) {
    if (! $permissions{0}{4} ) {
      $html->message('err', $_ERROR, "Access Deny");  	
    	return 0;
     }

    $Dv->change({ %FORM });
    $Dv->{ACTIVATE}=$attr->{USER}->{ACTIVATE};
    dv_get_month_fee($Dv) if (! $FORM{STATUS});

    if (! $Dv->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED");	
     }
   }
	elsif($FORM{del}) {
    $Dv->del();
    if (! $Dv->{errno}) {
      $html->message('info', $_INFO, "$_DELETED");	
     }
	 }

  if ($Dv->{errno}) {
    $html->message('err', $_ERROR, "[$Dv->{errno}] $err_strs{$Dv->{errno}}");
   }

  $Dv->info($Dv->{UID});


  if($Dv->{TOTAL} < 1) {
	  $html->message('info', $_INFO, $_NOT_ACTIVE);
	  #$Dv = $Dv->defaults();
	  
    $Dv->{TP_ID}=$html->form_select('TP_ID', 
                                         { 
 	                                          SELECTED          => $Dv->{TP_ID},
 	                                          SEL_MULTI_ARRAY   => $tariffs->list(),
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });

	  
	  
	  $Dv->{ACTION}='add';
	  $Dv->{LNG_ACTION}=$_ACTIVATE;
	 }
	else {
	  $Dv->{ACTION}='set';
	  $Dv->{LNG_ACTION}=$_CHANGE;
	  $Dv->{CHANGE_TP_BUTTON}='['. $html->button($_CHANGE, 'UID='.$Dv->{UID}.'&index='. ($index + 1)) .']';

    # Get next payment period
    if ($Dv->{MONTH_ABON} > 0 &&  ! $Dv->{STATUS} && ! $users->{DISABLE} &&
        ($users->{DEPOSIT}+$users->{CREDIT} > 0 || 
         $Dv->{POSTPAID_ABON} || 
         $Dv->{PAYMENT_TYPE} == 1 )) {
      if ($users->{ACTIVATE} ne '0000-00-00') {
        my ($Y, $M, $D)=split(/-/, $users->{ACTIVATE}, 3);
        $M--;
        $Dv->{ABON_DATE} = strftime "%Y-%m-%d", localtime(  (mktime(0, 0, 0, $D, $M, ($Y-1900), 0, 0, 0)  + 31 * 86400) );
       }
      else {
        my ($Y, $M, $D)=split(/-/, $DATE, 3);
        $M++;
        if ($M == 13) {
          $M = 1;
          $Y++;
         }
        $D='01';
        $M = sprintf("%02.d", $M);
        $Dv->{ABON_DATE} = "$Y-$M-$D";
       }
      }
	} 


  $Dv->{STATUS_SEL}          = $html->form_select('STATUS', 
                                          { 
 	                                          SELECTED     => $Dv->{STATUS},
 	                                          SEL_ARRAY    => \@service_status,
 	                                          ARRAY_NUM_ID => 1
 	                                        });

  $Dv->{CALLBACK}         = ($Dv->{CALLBACK} == 1) ? ' checked' : '';
  $Dv->{REGISTRATION_INFO}= $html->button("$_REGISTRATION", "index=$index&UID=$Dv->{UID}&REGISTRATION_INFO=1");



  #Join Service
  if($attr->{USER}->{COMPANY_ID}) {
    my $list  = $Dv->list({ JOIN_SERVICE => 1, 
                            COMPANY_ID   => $attr->{USER}->{COMPANY_ID}   
                         });

    $Dv->{JOIN_SERVICES_SEL}= $html->form_select('JOIN_SERVICE', 
                                          { 
 	                                          SELECTED          => $Dv->{JOIN_SERVICE},
 	                                          SEL_MULTI_ARRAY   => [['', '', '', '', '', '', '', 0], [$_MAIN, '', '', '', '', '', '', 1], @$list ],
 	                                          MULTI_ARRAY_KEY   => $Dv->{SEARCH_FIELDS_COUNT} + 6,
 	                                          MULTI_ARRAY_VALUE => 0,
 	                                          NO_ID             => undef
 	                                          
 	                                        });

     if ($Dv->{JOIN_SERVICE} == 1) {
   	   my $list = $Dv->list({ JOIN_SERVICE => $Dv->{UID}, 
                              COMPANY_ID   => $attr->{USER}->{COMPANY_ID} ,
                              PAGE_ROWS    => 1000
                             });

       foreach my $line (@$list) {
     	   $Dv->{JOIN_SERVICES_USERS} .= $html->button("$line->[0]", "&index=15&UID=". $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6]) . ' ';
        }
      }
     elsif($Dv->{JOIN_SERVICE}  > 1) {
     	 $Dv->{JOIN_SERVICES_USERS} = $html->button("$_MAIN", "index=15&UID=$Dv->{JOIN_SERVICE}");
      }


 	   $Dv->{JOIN_SERVICE} = $html->tpl_show(_include('dv_user_join_service', 'Dv'), $Dv, { OUTPUT2RETURN => 1 });
 	 }                                    
 	else {
 		$Dv->{JOIN_SERVICE}='';
 	}                                        

  
  $html->tpl_show(_include('dv_user', 'Dv'), $Dv);
  
  return 0; 
}



#**********************************************************
# Tarif plans
# form_tp
#**********************************************************
sub dv_tp {
 
 my $tarif_info;

 my @Octets_Direction = ("$_RECV + $_SEND", $_RECV, $_SEND);
 my @Payment_Types    = ($_PREPAID, $_POSTPAID); 

 $tarif_info = $tariffs->defaults();
 $tarif_info->{LNG_ACTION}=$_ADD;
 $tarif_info->{ACTION}='ADD_TP';




if($FORM{ADD_TP}) {
  $FORM{TP_ID} = $FORM{CHG_TP_ID};
  
  if ($FORM{TP_ID} < 1) {
  	$html->message('err', $_ERROR, "$_ERROR ID = 0");
   }
  else {
   $tariffs->add( { %FORM });
   if (! $tariffs->{errno}) {
     $html->message('info', $_ADDED, "$_ADDED $tariffs->{TP_ID}");
    }
  }
 }
elsif (defined($FORM{TP_ID})) {
 
  $tarif_info = $tariffs->info( $FORM{TP_ID} );

  if ($tariffs->{errno}) {
    $html->message('err', $_ERROR, "[$tariffs->{errno}] $err_strs{$tariffs->{errno}}");	
    return 0;
   }

  $pages_qs .= "&TP_ID=$FORM{TP_ID}&subf=$FORM{subf}";
  $LIST_PARAMS{TP} = $FORM{TP_ID};
  %F_ARGS = ( TP => $tariffs );
  
  $tariffs->{NAME_SEL} = $html->form_main({ CONTENT => $html->form_select('TP_ID', 
                                          { 
 	                                          SELECTED          => $FORM{TP_ID},
 	                                          SEL_MULTI_ARRAY   => $tariffs->list({ %LIST_PARAMS }),
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        }),
	                                          HIDDEN  => { index => "$index" },
	                                          SUBMIT  => { show  => "$_SHOW" } 
	                        });
  
  func_menu({ 
  	         'ID' =>   $tariffs->{TP_ID}, 
  	         $_NAME => $tariffs->{NAME_SEL}
  	       }, 
  	{ 
#  	 $_INFO          => ":TP_ID=$tariffs->{TP_ID}",
#     $_USERS         => "11:TP_ID=$tariffs->{TP_ID}",
#     $_INTERVALS     => "73:TP_ID=$tariffs->{TP_ID}",
#     $_NAS           => "72:TP_ID=$tariffs->{TP_ID}"
  	 },
  	{
  		f_args => { %F_ARGS }
  	 });

  if ($FORM{subf}) {

  	return 0;
   }
  elsif($FORM{change}) {
    $tariffs->change( $FORM{TP_ID}, { %FORM  } );  
     
    if (! $tariffs->{errno}) {
       $html->message('info', $_CHANGED, "$_CHANGED $tariffs->{TP_ID}");
     }
   }

  $tarif_info->{LNG_ACTION}=$_CHANGE;
  $tarif_info->{ACTION}='change';

 }
elsif(defined($FORM{del}) && $FORM{is_js_confirmed}) {
  $tariffs->del($FORM{del});

  if (! $tariffs->{errno}) {
    $html->message('info', $_DELETE, "$_DELETED $FORM{del}");
   }
}



if ($tariffs->{errno}) {
    $html->message('err', $_ERROR, "[$tariffs->{errno}] $err_strs{$tariffs->{errno}}");	
 }


#my $i=0;
$tarif_info->{SEL_OCTETS_DIRECTION} = $html->form_select('OCTETS_DIRECTION', 
                                          { 
 	                                          SELECTED     => $tarif_info->{OCTETS_DIRECTION},
 	                                          SEL_ARRAY    => \@Octets_Direction,
 	                                          ARRAY_NUM_ID => 1
 	                                        });

$tarif_info->{PAYMENT_TYPE_SEL} = $html->form_select('PAYMENT_TYPE', 
                                          { 
 	                                          SELECTED     => $tarif_info->{PAYMENT_TYPE},
 	                                          SEL_ARRAY    => \@Payment_Types,
 	                                          ARRAY_NUM_ID => 1
 	                                        });



$tarif_info->{GROUPS_SEL} = $html->form_select('TP_GID', 
                                          { 
 	                                          SELECTED          => $tarif_info->{TP_GID},
 	                                          SEL_MULTI_ARRAY   => [[ '', ''],  @{ $tariffs->tp_group_list( ) } ],
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });


my $nas = Nas->new($db, \%conf);

$tarif_info->{IP_POOLS_SEL} = $html->form_select('IPPOOL', 
                                          { 
 	                                          SELECTED          => $tarif_info->{IPPOOL},
 	                                          SEL_MULTI_ARRAY   => [[ '', ''],  @{ $nas->ip_pools_list({ %LIST_PARAMS })	 } ],
 	                                          MULTI_ARRAY_KEY   => 8,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });



$tarif_info->{REDUCTION_FEE}    = ($tarif_info->{REDUCTION_FEE})   ? 'checked' : '';
$tarif_info->{POSTPAID_FEE}     = ($tarif_info->{POSTPAID_FEE})    ? 'checked' : '';
$tarif_info->{PERIOD_ALIGNMENT} = ($tarif_info->{PERIOD_ALIGNMENT}) ? 'checked' : ''; 
$tarif_info->{ABON_DISTRIBUTION}= ($tarif_info->{ABON_DISTRIBUTION}) ? 'checked' : ''; 


if ($conf{EXT_BILL_ACCOUNT}) {
  my $checked = ($tarif_info->{EXT_BILL_ACCOUNT}) ? ' checked' : '';
  $tarif_info->{EXT_BILL_ACCOUNT}="<tr><td>$_EXTRA $_BILL:</td><td><input type='checkbox' name='EXT_BILL_ACCOUNT' value='1' $checked></td></tr>\n";
}
else {
	$tarif_info->{EXT_BILL_ACCOUNT}='';
}

$html->tpl_show(_include('dv_tp', 'Dv'), $tarif_info);

my $list = $tariffs->list({ %LIST_PARAMS });	

# Time tariff Name Begin END Day fee Month fee Simultaneously - - - 
my $table = $html->table( { width      => '100%',
                            caption    => "$_TARIF_PLANS",
                            border     => 1,
                            title      => ['#', $_NAME,  $_HOUR_TARIF, $_TRAFIC_TARIFS, $_PAYMENT_TYPE, $_DAY_FEE, $_MONTH_FEE, $_SIMULTANEOUSLY, 
                             $_AGE, $_GROUP,
                                    '-', '-', '-'],
                            cols_align => ['right', 'left', 'center', 'center', 'center', 'right', 'right', 'right', 'right', 'center:noprint', 'center:noprint', 'center:noprint'],
                            ID         => 'DV_TARIF_PLANS'
                                  } );

my ($delete, $change);
foreach my $line (@$list) {
  if ($permissions{4}{1}) {
    $delete = $html->button($_DEL, "index=$index&del=$line->[0]", { MESSAGE => "$_DEL $line->[0]?" }); 
    $change = $html->button($_CHANGE, "index=$index&TP_ID=$line->[0]");
   }
  
  if($FORM{TP_ID} eq $line->[0]) {
  	$table->{rowcolor}=$_COLORS[0];
   }
  else {
  	undef($table->{rowcolor});
   }
  
  $table->addrow($html->b($line->[0]), 
   $html->button($line->[1], "index=$index&TP_ID=$line->[0]"),
   $bool_vals[$line->[2]], $bool_vals[$line->[3]], $Payment_Types[$line->[4]], 
   $line->[5], 
   $line->[6], 
   $line->[7], 
   $line->[8], 
   $line->[9],
   $html->button($_INTERVALS, "index=". ($index+2) ."&subf=73&TP_ID=$line->[0]"),
   $change,
   $delete);
}

print $table->show();

$table = $html->table( { width      => '100%',
                         cols_align => ['right', 'right'],
                         rows       => [ [ "$_TOTAL:", $html->b($tariffs->{TOTAL}) ] ]
                     } );
print $table->show();

}




#*******************************************************************
# online users
#*******************************************************************
sub dv_online {

my $nas = Nas->new($db, \%conf);

my $message;
if ($FORM{ping}) {
  if ($FORM{ping} =~ /^(\d){1,3}\.(\d){1,3}\.(\d){1,3}\.(\d){1,3}$/) {
    my $res = `/sbin/ping -c 5 $FORM{ping}`;
    $html->message('info', $_INFO,  "Ping  $FORM{ping}<br>Result:<br><pre>$res</pre>");
   }
  else {
    $html->message('err', $_ERROR,  "$ERR_WRONG_DATA");
   }
 }
elsif ($FORM{hangup}) {
  my ($nas_id, $nas_port_id, $acct_session_id, $user_name) = split(/ /, $FORM{hangup}, 4);
  $nas->info({ NAS_ID => $nas_id });
  
  if ($nas->{errno}) {
    $html->message('err', $_NAS, "$nas->{errstr}");
  	return 0;
   }

  require "Abills/nas.pl";
  
  my $ret = hangup($nas, "$nas_port_id", "$user_name", { ACCT_SESSION_ID   => "$acct_session_id",
  	                                                     FRAMED_IP_ADDRESS => "$FORM{FRAMED_IP_ADDRESS}",
  	                                                     UID               => $FORM{UID} });

  if ($ret == 0) {
    my $table = $html->table( { width   => '100%',
                                caption => $_HANGUPED,
                                rows    => [ 
                                            [ "$_NAS ID",   $nas_id          ],
                                            [ "$_NAS IP",   $nas->{NAS_IP}   ],
                                            [ "$_PORT",     $nas_port_id     ],
                                            [ "SESSION_ID", $acct_session_id ],
                                            [ "",           $ret             ] 
                                           ]
                               } );


     $message = $table->show();
     sleep 3;
     
     weblog('hangup', "$user_name");
   }
  elsif ($ret == 1) {
   	$message = 'NAS NOT supported yet';
   }

  $html->message('info', $_INFO, "$message");
 }
if ($FORM{zapall}) {
  $sessions->zap(0, 0, 0, { ALL => 1 });
  $html->message('info', $_INFO, "Zapped all sessions");
 }
elsif($FORM{zap}) {
  
  
  
  my($nas_id, $nas_port_id, $acct_session_id)=split(/ /, $FORM{zap}, 3);
  $sessions->zap($nas_id, $nas_port_id, $acct_session_id);

  if ($sessions->{errno}) {
  	 $html->message('err', $_ERROR, "[$sessions->{errno}] $err_strs{$sessions->{errno}}");
  	 return 0;
   }

  $nas->info({NAS_ID => $nas_id });

  my $table = $html->table( { width   => '100%',
                              caption => $_CLOSED,
                              rows    => [ 
                                          [ "$_NAS ID",   $nas_id],
                                          [ "$_NAS IP",   $nas->{NAS_IP} ],
                                          [ "$_PORT",     $nas_port_id   ],
                                          [ "SESSION_ID", $acct_session_id ],
                                        ]
                               } );

  $message = $table->show();

  
  $sessions->list({ ACCT_SESSION_ID => $acct_session_id, 
  	                NAS_PORT        => $nas_port_id,
  	                NAS_ID          => $nas->{NAS_ID} });  
  
  if ($sessions->{TOTAL} < 1) {
    $message .= "<p align=center>[".
    $html->button('Add To log', "index=$index&tolog=$acct_session_id&nas_id=$nas_id&nas_port_id=$nas_port_id&ZAPED=yes"). 
    "] [".
    $html->button($_DEL, "index=$index&del=$acct_session_id&nas_id=$nas_id&nas_port_id=$nas_port_id&ZAPED=yes"). "]</p>\n";
   }
  else {
  	$message .= "$_EXIST";
  	$sessions->online_del({ NAS_ID          => $nas_id,
                            NAS_PORT        => $nas_port_id,
                            ACCT_SESSION_ID => $acct_session_id
                          });

    #my ($sum, $variant, $time_t, $traf_t) = session_sum("$RAD{USER_NAME}", $ACCT_INFO{LOGIN}, $ACCT_INFO{ACCT_SESSION_TIME}, \%ACCT_INFO);
   }

  $html->message('info', $_INFO, $message);
}
elsif($FORM{tolog}) {
  my $ACCT_INFO = $sessions->online_info({ NAS_ID          => $FORM{nas_id},
                                           NAS_PORT        => $FORM{nas_port_id},
                                           ACCT_SESSION_ID => $FORM{tolog}
                                       });

  if ($ACCT_INFO->{TOTAL} < 1) {
    $html->message('err', $_ERROR, "$_NOT_EXIST");	
    return 0;
   }

  $nas->info({ NAS_ID => $FORM{nas_id} });

  require Acct;
  $ACCT_INFO->{INBYTE}           = $ACCT_INFO->{ACCT_INPUT_OCTETS};
  $ACCT_INFO->{OUTBYTE}          = $ACCT_INFO->{ACCT_OUTPUT_OCTETS},;
  $ACCT_INFO->{INBYTE2}          = $ACCT_INFO->{ACCT_EX_INPUT_OCTETS} ;
  $ACCT_INFO->{OUTBYTE2}         = $ACCT_INFACCT_INFO->{ACCT_OUTPUT_OCTETS},;
  $ACCT_INFO->{INBYTE2}          = $ACCT_INFO->{ACCT_EX_INPUT_OCTETS} ;
  $ACCT_INFO->{OUTBYTE2}         = $ACCT_INFACCT_INFO->{ACCT_OUTPUT_OCTETS},;
  $ACCT_INFO->{INBYTE2}          = $ACCT_INFO->{ACCT_EX_INPUT_OCTETS} ;
  $ACCT_INFO->{OUTBYTE2}         = $ACCT_INFACCT_INFO->{ACCT_OUTPUT_OCTETS},;
  $ACCT_INFO->{INBYTE2}          = $ACCT_INFO->{ACCT_EX_INPUT_OCTETS} ;
  $ACCT_INFO->{OUTBYTE2}         = $ACCT_INFO->{ACCT_EX_OUTPUT_OCTETS};
  $ACCT_INFO->{ACCT_STATUS_TYPE} = 'Stop';
  $ACCT_INFO->{ACCT_TERMINATE_CAUSE} = 3;


  # Exppp VENDOR params           
  Acct->import();
  my $Acct = Acct->new($db, \%conf);
  my $r = $Acct->accounting($ACCT_INFO, $nas);
  

  if ($Acct->{errno}) {
    $html->message('err', $_ERRNO, "$Acct->{errno} $Acct->{errstr}");	
   }
  else {
  	my $table = $html->table( { width => '100%'} );
  	foreach my $k (sort keys %$ACCT_INFO) {
 		    $table->addrow($k, $ACCT_INFO->{$k});
  	  }

    $table->addrow('-', '-');
  	foreach my $k (sort keys %$Acct) {
 		    $table->addrow($k, $Acct->{$k});
  	  }

  	$html->message('info', $_ADDED, $table->show());	
   }
  
  $sessions->online_del({ NAS_ID          => $ACCT_INFO->{NAS_ID},
                          NAS_PORT        => $ACCT_INFO->{NAS_PORT},
                          ACCT_SESSION_ID => $ACCT_INFO->{ACCT_SESSION_ID}
                        });
 }
elsif($FORM{del} || $FORM{dellist}) {
  if ($FORM{dellist}) {
    my @sessions_list = split(/, /, $FORM{dellist});
    $sessions->online_del({ SESSIONS_LIST => \@sessions_list });
    $FORM{del} = $FORM{dellist};
   }
  else {
    $sessions->online_del({
   	            NAS_ID          => $FORM{nas_id},
                NAS_PORT        => $FORM{nas_port_id},
                ACCT_SESSION_ID => $FORM{del}
                           });
   }

  if (! $sessions->{errno}) {
    my $table = $html->table( { width => '100%',
                                rows => [ [ "NAS_ID",          $FORM{nas_id}     ],
                                          [ "NAS_PORT",        $FORM{nas_port_id}],
                                          [ "ACCT_SESSION_ID", $FORM{del}        ]
                                        ]
                               } );
    
    $html->message('info', $_DELETED, $table->show());	
   }

}



#Field formed section

my @FIELDS_ALL = ("$_USER", "$_FIO", "$_PORT", "IP", "$_DURATION", "$_RECV", "$_SENT",
                             "Ex_IN", "Ex_OUT", 
                             "CID",  "SESSION_ID", "$_TARIF_PLAN", "CONNECT_INFO", 
                             "$_SPEED",
                             "$_SUM",
                             "$_STATUS");


my @CAPTION = (); 
my @ACTIVE_FIELDS = (0,1,2,3,4,5,6,7,8);

if ($FORM{'fields'}) {
 @ACTIVE_FIELDS = split(/, /, $FORM{'fields'});
 $FORM{'fields'}=~s/ //g;
 $admin->{WEB_OPTIONS} =~ s/;DV_MONITOR=(.+);//g;
 $admin->change({ AID => $admin->{AID}, WEB_OPTIONS => "$admin->{WEB_OPTIONS};DV_MONITOR=$FORM{'fields'};"})
}
elsif ($admin->{WEB_OPTIONS} =~ /DV_MONITOR=(.+);/) {
	@ACTIVE_FIELDS = split(/,/, $1);
}

foreach my $field_id (@ACTIVE_FIELDS) {
	push @CAPTION, $FIELDS_ALL[$field_id];
}






$form_link = '';
my $cure = '';
if($FORM{ZAPED}) {
	$LIST_PARAMS{ZAPED}=1;
	$form_link = $html->button("On line", "index=$index");
	$cure = 'Zap';
 } 
else {
 	$sessions->online( { ZAPED => 1, COUNT => 1 } );	
 	$form_link = $html->button("$_ZAPED", "index=$index&ZAPED=yes"). " ($sessions->{TOTAL})";
 	$cure='Online';
}


if (defined($FORM{FILTER})) {
	$LIST_PARAMS{FILTER_FIELD}=$FORM{FILTER_FIELD};
	$LIST_PARAMS{FILTER}=$FORM{FILTER};
}


$sessions->online( { %LIST_PARAMS, FIELDS => \@ACTIVE_FIELDS } );	
my $dub_ports = $sessions->{dub_ports};
my $dub_logins = $sessions->{dub_logins};
 
my $table = $html->table( { width      => '100%',
                            caption    => "$cure",
                            border     => 1,
                            title      => [ @CAPTION, '-', '-', '-' ],
                            cols_align => ['left', 'left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'center:noprint', 'center:noprint', 'center:noprint'],
                            qs         => $pages_qs,
                            ID         => 'ONLINE'
                         } );

my $online = $sessions->{nas_sorted};
my $nas_list = $nas->list();

foreach my $nas_row (@$nas_list) {

  next if (! defined($online->{$nas_row->[0]}));


  my $l = $online->{$nas_row->[0]};
  my $total = $#{@$l} + 1;  
  $table->{rowcolor}=$_COLORS[0];
  $table->{extra}="colspan='". ($#CAPTION +1 ) . "' class='small'";
  $table->addrow("$nas_row->[0]:". $html->b($nas_row->[1]) .":$nas_row->[3]:$_TOTAL: $total" );
  
  

  
  foreach my $line (@$l) {
    undef($table->{rowcolor});
    undef($table->{extra});

    my @rows  = ();
    for(my $i=0; $i<=$#ACTIVE_FIELDS; $i++) {
    	  my $value=$line->[$i]; 
    	  
    	  if ($ACTIVE_FIELDS[$i]==5 || $ACTIVE_FIELDS[$i] == 6 
    	     ||  $ACTIVE_FIELDS[$i]==7 || $ACTIVE_FIELDS[$i] ==8) {
    	  	$value = int2byte($line->[$i]);
    	   }
    	  elsif ($ACTIVE_FIELDS[$i] == 0) {
          my $user_info =  "$_FIO: $line->[1]\n$_PHONE: $line->[$#ACTIVE_FIELDS+1]\n".
                           "$_TARIF_PLAN: $line->[$#ACTIVE_FIELDS+15]\n".
                           "$_DEPOSIT: $line->[$#ACTIVE_FIELDS+5]\n".
                           "$_CREDIT: $line->[$#ACTIVE_FIELDS+6]\n".
                           "$_SPEED: \n".
                           "SESSION_ID: $line->[$#ACTIVE_FIELDS+13]\n".
                           "CID: $line->[$#ACTIVE_FIELDS+14]\n".
                           "CONNECT_INFO: \n".
                           "UPDATES: $line->[$#ACTIVE_FIELDS+8]";

    	  	$value = "<acronym title='$user_info'>".$html->button($line->[0], "index=15&UID=$line->[$#ACTIVE_FIELDS+3]")."</acronym>";
          #Dublicate logins
 	  	    if (defined($dub_logins->{$line->[0]}) && $dub_logins->{$line->[0]} > 1) { $table->{rowcolor}='#FFFF00'; }
    	   }	
    	  elsif ($ACTIVE_FIELDS[$i] == 2) {
           if (defined($dub_ports->{$nas_row->[0]}{$line->[$i]}) && $dub_ports->{$nas_row->[0]}{$line->[$i]} > 1) { $table->{rowcolor}='#00FF40';    }    	  	
    	   }
    	  elsif ($ACTIVE_FIELDS[$i] == 3) {
    	  	$value = int2ip($line->[$i]);
    	   }
    	  
    	  push @rows, $value;
      }


    if ($line->[$#ACTIVE_FIELDS + 9] > 3)  { $table->{rowcolor}='#FF0000';    }
    my $zap = "(". $html->button('Z', "index=$index&zap=$nas_row->[0]+".$line->[$#ACTIVE_FIELDS + 12]."+". $line->[($#ACTIVE_FIELDS + 13)], { TITLE => 'Zap' }) . ")";
    my $hangup = ($FORM{ZAPED}) ? $html->form_input('dellist', "$line->[$#ACTIVE_FIELDS + 13]", { TYPE => 'checkbox' } ) : "(". $html->button('H', "index=$index&FRAMED_IP_ADDRESS=$line->[$#ACTIVE_FIELDS+2]&hangup=$nas_row->[0]+$line->[$#ACTIVE_FIELDS + 12]+$line->[$#ACTIVE_FIELDS + 13]+$line->[$#ACTIVE_FIELDS + 11]&UID=$line->[$#ACTIVE_FIELDS+3]", { TITLE => 'Hangup' }). ")";


    $table->addrow(@rows,
     "(". $html->button('P', "index=$index&ping=$line->[$#ACTIVE_FIELDS+2]", { TITLE => 'ping' }) .")",
     "$zap",
     "$hangup");

  }
}

my $table2 = $html->table( { width      => '100%',
                             cols_align => ['left', 'right', 'right', 'right']
                         } );

$table2->addtd(   $table->td($_TOTAL, { bgcolor => $_COLORS[0] }), 
                  $table->td($sessions->{TOTAL}, { bgcolor => $_COLORS[0] }), 
                  $table->td($form_link) 
               );


my $total = $table2->show();
my $output = $total . $table->show();



$table2 = $html->table({ width => '100%' });
my @arr = ();
my $i=0;
foreach my $name ( @FIELDS_ALL ) {
  my $ex_info = ($attr->{OIDS_EXINFO}->{$name}{DESCRIBE}) ?  " ($attr->{OIDS_EXINFO}->{$name}{ACCESS})<br>$attr->{OIDS_EXINFO}->{$name}{DESCRIBE}" : '';
  push @arr, $html->form_input('fields', "$i", { TYPE => 'checkbox', STATE => (in_array($i, \@ACTIVE_FIELDS)) ? 1 : undef  }). " <b>$name</b>$ex_info";

  if ($#arr > 2) {
    $table2->addrow(@arr);
    @arr = ();
  }
$i++;
}


if ($#arr > -1 ) {
  $table2->addrow(@arr);
 }


my $FIELDS_SEL = $html->form_select('FILTER_FIELD', 
                                { SELECTED      => $FORM{FILTER_FIELD},
 	                                SEL_ARRAY     => \@FIELDS_ALL,
 	                                ARRAY_NUM_ID  => 1
 	                               });

$table = $html->table( { width       => '100%',
                         title_plain => [ 
                                           " $_FILTERS: ". $html->form_input('FILTER', $FORM{FILTER}) .
                                           " $_FIELDS: $FIELDS_SEL".
                                           " $_REFRESH (sec): ".   $html->form_input('REFRESH', int($FORM{REFRESH}), { SIZE => 4 } ),
                                           $html->form_input('SHOW',  $_SHOW, { TYPE => 'SUBMIT'})  
                                         ],
                          cols_align => ['center:noprint', 'center:noprint'],
                           });

if ($FORM{ZAPED}) {
  $output = $html->form_main({ CONTENT => $output,
	                             HIDDEN  => { index => "$index",
	                       	                  ZAPED => 1 },
	                             SUBMIT  => { go    => "$_DEL" },
	                             METHOD  => 'GET'
                            });
 }
else {
  $output .= $html->form_main({ CONTENT => $table2->show(). $table->show(),
	                              HIDDEN  => { index =>  "$index" },
	                              METHOD  => 'GET'
                              });

  $output .= $html->button('Zap All', "index=$index&zapall=y", { MESSAGE => "Do you realy want zap all sessions ?" });
 }


print  $output;
	
}




#**********************************************************
# Whow sessions from log
# dv_sessions()
#**********************************************************
sub dv_sessions {
  my ($list, $sessions) = @_;
#Session List

if (! $list) {
  if (! defined($FORM{sort})) {
	  $LIST_PARAMS{SORT} = 2;
	  $LIST_PARAMS{DESC} = 'DESC';
  }

  my $nas = Nas->new($db, \%conf);
  $sessions->{SEL_NAS} = $html->form_select('NAS_ID', 
                                          { 
 	                                          SELECTED          => $FORM{NAS_ID},
 	                                          SEL_MULTI_ARRAY   => [['', $_ALL], @{ $nas->list({ %LIST_PARAMS }) } ],
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });

  $sessions->{TERMINATE_CAUSE_SEL} = $html->form_select('TERMINATE_CAUSE', 
                                          { 
 	                                          SELECTED          => $FORM{TERMINATE_CAUSE},
 	                                          SEL_HASH          => {
                      '' => '',
                      0  => 'Unknown',
                      1  => 'User-Request',
                      2  => 'Lost-Carrier',
                      3  => 'Lost-Service',
                      4  => 'Idle-Timeout',
                      5  => 'Session-Timeout',
                      6  => 'Admin-Reset',
                      7  => 'Admin-Reboot',
                      8  => 'Port-Error',
                      9  => 'NAS-Error',
                      10 => 'NAS-Request',
                      11 => 'NAS-Reboot',
                      12 => 'Port-Unneeded',
                      13 => 'Port-Preempted',
                      14 => 'Port-Suspended',
                      15 => 'Service-Unavailable',
                      16 => 'Callback',
                      17 => 'User-Error',
                      18 => 'Host-Request',
                      19 => 'Supplicant-Restart',
                      20 => 'Reauthentication-Failure',
                      21 => 'Port-Reinit',
                      22 => 'Port-Disabled'
                    }

 	                                        });

  form_search({ SEARCH_FORM => $html->tpl_show(_include('dv_sessions_search', 'Dv'),
 	                                            { %FORM, %$sessions },
 	                                            { notprint => 1 })  	
                                            });
  if ($FORM{search}) { 
    $sessions = Dv_Sessions->new($db, $admin, \%conf);
    $list = $sessions->list({ %LIST_PARAMS });	
   }
  else {
    return 0;
   }
}


if ($sessions->{TOTAL} < 1) {
	$html->message('info', $_INFO, "$_NO_RECORD");
	return 0;
}



my $table = $html->table( { width      => '100%',
                            caption    => "$_SESSIONS",
                            border     => 1,
                            title      => ["$_USER", "$_START", "$_DURATION", "$_TARIF_PLAN", "$_SENT", "$_RECV", 
                             "CID", "NAS", "IP", "$_SUM", "-", "-"],
                            cols_align => ['left', 'right', 'right', 'RIGHT', 'right', 'right', 'right', 'right', 'right', 'right', 'center:noprint', 'center:noprint'],
                            qs         => $pages_qs,
                            pages      => $sessions->{TOTAL},
                            recs_on_page => $LIST_PARAMS{PAGE_ROWS},
                            ID         => 'DV_SESSIONS'
                         } );

my $delete = '';
use Billing;
my $Billing = Billing->new($db, \%conf);	



foreach my $line (@$list) {
  if ($permissions{3}{1} && $LIST_PARAMS{UID}) {
    $delete = $html->button($_DEL, "index=". $index ."$pages_qs&del=$line->[12]+$line->[11]+$line->[7]+$line->[1]+$line->[9]+$line->[0]", 
       { MESSAGE => "$_DEL Session SESSION_ID $line->[11]?" }
      );
   }

#  my($UID, 
#     $SUM, 
#     $BILL_ID, 
#     $TARIF_PLAN, 
#     $TIME_TARIF, 
#     $TRAF_TARIF) = $Billing->session_sum("$line->[0]", 
#                                            $line->[13], 
#                                            $line->[14], 
#                                            {  OUTBYTE  =>  $line->[4],
#                                               INBYTE   =>  $line->[5],
#                                               OUTBYTE2 =>  $line->[15],
#                                               INBYTE2  =>  $line->[16]
#                                             });
  
# = $Billing->session_sum("$RAD->{USER_NAME}", 
#                                                 $RAD->{SESSION_START}, 
#                                                 $RAD->{ACCT_SESSION_TIME}, 
#                                                 $RAD);
#
  
  $SUM = ''; #sprintf("%.6f", $SUM);
  #my $n = ($SUM != $line->[9])  ? '!!!' : '';
  #my $test = "<br>$n <b>$SUM</b>";
#  , 
#     $BILL_ID, 
#     $TARIF_PLAN, 
#     $TIME_TARIF, 
#     $TRAF_TARIF\n";

  $table->addrow(
     $html->button("$line->[0]", "index=11&UID=$line->[12]"),
     $line->[1], 
     $line->[2],  
     $line->[3],  
     int2byte($line->[4], { DIMENSION => $FORM{DIMENSION} }), 
     int2byte($line->[5], { DIMENSION => $FORM{DIMENSION} }), 
     $line->[6],
     $line->[7], 
     $line->[10], 
     "$line->[9]", 
     "(". 
        $html->button("D", "index=$index&UID=$line->[12]&SESSION_ID=$line->[11]", { TITLE => "$_DETAIL" } )
      . ")", 
     $delete);
}

print $table->show();
}


#**********************************************************
# dv_use_all_monthes();
#**********************************************************
sub dv_use_allmonthes {

  $FORM{allmonthes}=1;
  dv_use();
}


#**********************************************************
# dv_use();
#**********************************************************
sub dv_use {

my %CAPTIONS_HASH = ('1:DATE'            => $_DATE,  	
                     '2:USERS'           => $_USERS,
                     '3:USERS_FIO'       => $_FIO,
                     '4:TP'              => $_TARIF_PLAN,
                     '5:SESSIONS'        => $_SESSIONS,
                     '6:TRAFFIC_RECV'    => "$_TRAFFIC $_RECV",
                     '7:TRAFFIC_SENT'    => "$_TRAFFIC $_SENT",
                     '8:TRAFFIC_SUM'     => $_TRAFFIC,
                     '9:TRAFFIC_2_SUM'   => $_TRAFFIC." 2",
                     '91:DURATION'       => $_DURATION,
                     '92:SUM'            => $_SUM);


    my $i=1; 
    my $list = $users->config_list({ PARAM => 'ifu*'  });
    my %INFO_LISTS = (); 

    

    foreach my $line (@$list) {
      my $field_id       = '';
      if ($line->[0] =~ /ifu(\S+)/) {
    	  $field_id = $1;
       }

      my($position, $type, $name)=split(/:/, $line->[1]);

      $CAPTIONS_HASH{(90+$i).':'.$field_id}=$name;

      if ($type == 2) {
        my $list = $users->info_lists_list( { LIST_TABLE => $field_id.'_list' });
        foreach my $line (@$list) {
          $INFO_LISTS{$field_id}{$line->[0]}=$line->[1];
         }
    	
       }
      $i++;
     }



#  $FORM{FIELDS} = 'DATE, USERS_COUNT, SESSIONS, TRAFFIC_SUM, TRAFFIC_2_SUM, DURATION, SUM' if (! $FORM{FIELDS});

  my %HIDDEN = ();

  $HIDDEN{COMPANY_ID}=$FORM{COMPANY_ID} if ($FORM{COMPANY_ID});
  $HIDDEN{sid}=$sid if ($FORM{sid}); 


  reports({ DATE          => $FORM{DATE}, 
  	        REPORT        => '',
  	        HIDDEN        => \%HIDDEN,
  	        EX_PARAMS     => { HOURS => "$_HOURS",
  	        	                 USERS => "$_USERS"
  	        	                 }, 
  	        EXT_TYPE      => { TP    => "$_TARIF_PLANS"
  	        	                 }, 
  	        PERIOD_FORM		=> 1,
  	        FIELDS        => { %CAPTIONS_HASH },
  	        XML           => 1,
  	        EX_INPUTS     => [ $html->form_select('DIMENSION', { SELECTED   => $FORM{DIMENSION},
 	                                                               SEL_HASH   => {'' => 'Auto', 
 	                                                               	              'Bt' => 'Bt',
 	                                                               	              'Kb' => 'Kb', 
 	                                                               	              'Mb' => 'Mb', 
 	                                                               	              'Gb' => 'Gb'
 	                                                               	             },
 	                                                               NO_ID       => 1
                                                                } )
                               ]
  	       });


$LIST_PARAMS{TP_ID}=$FORM{TP_ID} if ($FORM{TP_ID});

if ($FORM{COMPANY_ID}) {
 	$LIST_PARAMS{COMPANY_ID}=$FORM{COMPANY_ID};
  $pages_qs .= "&COMPANY_ID=$FORM{COMPANY_ID}";
 }


my ($tables_sessions);
my $output = '';

my %TP_NAMES = ();

my %DATA_HASH = ();
my %CHART = ();
my %AVG = (MONEY    => 0,
           TRAFFIC  => 0,
           DURATION => 0);

my $graph_type='';

#Day reposrt
if (defined($FORM{DATE})) {

  #Used Traffic
  $table_sessions = $html->table({ width      => '100%',
	                                 caption    => "$_SESSIONS", 
                                   title      => ["$_DATE", "$_USERS", "$_SESSIONS", "$_TRAFFIC ", "$_TRAFFIC 2", $_DURATION, $_SUM],
                                   cols_align => ['right', 'left', 'right', 'right', 'right', 'right', 'right'],
                                   qs         => $pages_qs,
                                   ID         => 'DV_REPORTS_SESSIONS'
                                });

  if ($FORM{EX_PARAMS} && $FORM{EX_PARAMS} eq 'HOURS') {

 	  my $list = $sessions->reports({ %LIST_PARAMS });
    foreach my $line (@$list) {
      $table_sessions->addrow($html->b($line->[0]), 
        $line->[1], 
        $line->[2], 
        int2byte($line->[3], { DIMENSION => $FORM{DIMENSION} }),  
        int2byte($line->[4], { DIMENSION => $FORM{DIMENSION} }),  
        $line->[5], 
        $html->b($line) );

      $AVG{USERS}    = $line->[1] if ($AVG{USERS} < $line->[1]);
      $AVG{TRAFFIC}  = $line->[3] if ($AVG{TRAFFIC} < $line->[3]);

      $AVG{DURATION} = time2sec($line->[5]) if ($AVG{DURATION} < time2sec($line->[5]));
      $AVG{MONEY}    = $line->[6] if ($AVG{MONEY} < $line->[6]);

      if ($line->[0] =~ /(\d+)-(\d+)-(\d+) (\d+)/) {
      	 $num = $4+1;
        }
      elsif ($line->[0] =~ /(\d+)-(\d+)/) {
      	 $CHART{X_LINE}[$num]=$line->[0];
       	 $num++;
       }
     
      $DATA_HASH{USERS}[$num]     = $line->[1];      
      $DATA_HASH2{TRAFFIC}[$num]  = $line->[3];
      $DATA_HASH2{DURATION}[$num] = time2sec($line->[5]);
      $DATA_HASH{MONEY}[$num]     = $line->[6];

     }

    $graph_type='day_stats';
    $output = $html->make_charts({  
	        PERIOD     => $graph_type,
	        DATA       => \%DATA_HASH2,
	        AVG        => \%AVG,
	        TYPE       => ['area', 'area'],
	        TRANSITION => 1,
          OUTPUT2RETURN => 1	 
       });

   }
  else {
    my $list = $sessions->reports({ %LIST_PARAMS });
    foreach my $line (@$list) {
      $table_sessions->addrow($html->b($line->[0]), 
        $html->button("$line->[1]", "index=15&UID=$line->[7]&DATE=$line->[0]"), 
        $line->[2], 
        int2byte($line->[3], { DIMENSION => $FORM{DIMENSION} }),  
        int2byte($line->[4], { DIMENSION => $FORM{DIMENSION} }),  
        $line->[5], 
        $html->b($line->[6]) );
     }
  }

 }
else {
  #Used Traffic
  my @caption = ();  
  
  my %fields_hash = (); 
  my @fields_arr  = ();
  if ($FORM{FIELDS}) {
  	@fields_arr = split(/, /, $FORM{FIELDS});
   	foreach my $line (@fields_arr) {
   		$fields_hash{$line}=1;
   	 }

    my $i = 0;
    foreach my $line (sort keys %CAPTIONS_HASH) {
      my($k, $val)=split(/:/, $line);

      if ($fields_hash{$val}) {
  	    push @caption, $CAPTIONS_HASH{$line};
  	    $fields_arr[$i]=$val;
  	    $i++;
  	   }
      
     }
   }
  else {
  	@caption = ("$_DATE", "$_USERS", "$_SESSIONS", "$_TRAFFIC ", "$_TRAFFIC 2", $_DURATION, $_SUM); 
   }

    if ($FORM{TYPE} eq 'USER') {
    	$caption[0]="$_USER";
  	  $caption[1]="$_LOGINS";
     }
    elsif ($FORM{TYPE} eq 'TP') {
    	$caption[0]="$_TARIF_PLAN";
    	my $list = $tariffs->list();
    	
    	foreach my $line (@$list) {
    		$TP_NAMES{$line->[0]}=$line->[1];
    	 }
     }

  
  

  
  $table_sessions = $html->table({ width      => '100%',
	                                 caption    => "$_SESSIONS", 
                                   title      => \@caption,
                                   cols_align => ['right', 'right', 'right', 'right', 'right', 'right', 'right'],
                                   qs         => $pages_qs,
                                   ID         => 'DV_REPORTS_SESSIONS'
                               } );


  $graph_type='month_stats';
  my $num = 0;
  
  my $list = $sessions->reports({ %LIST_PARAMS });
  
  
  foreach my $line (@$list) {
    my @rows = ();
    
    if ($FORM{FIELDS}) {
      for(my $i=0; $i<=$#caption; $i++) {
        if ($fields_arr[$i] =~ /TRAFFIC/) {
          push @rows, int2byte($line->[$i], { DIMENSION => $FORM{DIMENSION} });
         }
        elsif ($fields_arr[$i] =~ /USERS/ || $fields_arr[$i] =~ /USERS_FIO/) {
          push @rows, $html->button("$line->[$i]", "index=11&UID=". ($line->[$#fields_arr+1]));
         }
        elsif ($fields_arr[$i] =~ /^_/ && ref ($INFO_LISTS{$fields_arr[$i]}) eq 'HASH' ) {
        	push @rows, ($INFO_LISTS{$fields_arr[$i]}{$line->[$i]}) ? $INFO_LISTS{$fields_arr[$i]}{$line->[$i]} : '';
         }
        elsif ($fields_arr[$i] =~ 'TP') {
        	push @rows, $button = $line->[0].'. ' .$html->button($TP_NAMES{$line->[0]}, "index=$index&TP_ID=$line->[0]$pages_qs");
         }
        else {
          push @rows, $line->[$i];
         }
      }
     }
    else {
    	 my $button = '';
    	 if ($FORM{TYPE} eq 'USER') {
    	 	 $button = $html->button("$line->[0]", "index=11&UID=$line->[7]");
    	  }
    	 elsif ($FORM{TYPE} eq 'TP') {
    	 	 $button = $line->[0].'. ' .$html->button($TP_NAMES{$line->[0]}, "index=$index&TP_ID=$line->[0]$pages_qs");
    	  }
    	 else {
    	 	 $button = $html->button("$line->[0]", "index=$index&$type=$line->[0]$pages_qs");
    	  }
    	  
    	 @rows = ($button, 
       $line->[1], 
       $line->[2], 
       int2byte($line->[3], { DIMENSION => $FORM{DIMENSION} }),  
       int2byte($line->[4], { DIMENSION => $FORM{DIMENSION} }),  
       $line->[5], 
       $html->b($line->[6]) );

      $AVG{USERS}    = $line->[1] if ($AVG{USERS} < $line->[1]);
      $AVG{TRAFFIC}  = $line->[3] if ($AVG{TRAFFIC} < $line->[3]);

      $AVG{DURATION} = time2sec($line->[5]) if ($AVG{DURATION} < time2sec($line->[5]));
      $AVG{MONEY}    = $line->[6] if ($AVG{MONEY} < $line->[6]);



      if ($line->[0] =~ /(\d+)-(\d+)-(\d+)/) {
      	 $num = $3;
        }
      elsif ($line->[0] =~ /(\d+)-(\d+)/) {
      	 $CHART{X_LINE}[$num]=$line->[0];
       	 $num++;
       }
     
      $DATA_HASH{USERS}[$num]     = $line->[1];      
      $DATA_HASH2{TRAFFIC}[$num]  = $line->[3];
      $DATA_HASH2{DURATION}[$num] = time2sec($line->[5]);
      $DATA_HASH{MONEY}[$num]     = $line->[6];
     }

    $table_sessions->addrow(@rows);


   }


$output = $html->make_charts({  
	 PERIOD     => $graph_type,
	 DATA       => \%DATA_HASH2,
	 AVG        => \%AVG,
	 TYPE       => ['area', 'area'],
	 TRANSITION => 1,
   OUTPUT2RETURN => 1
  });


}



$table = $html->table( { width      => '100%',
                         cols_align => ['right', 'right', 'right', 'right', 'right', 'right'],
                         rows       => [ [ "$_USERS: ".       $html->b( $sessions->{USERS} ),
                                           "$_SESSIONS: ".    $html->b( $sessions->{SESSIONS} ), 
                                           "$_TRAFFIC: ".     $html->b( int2byte($sessions->{TRAFFIC}) ) ."<BR>".
                                           "$_TRAFFIC IN: ".  $html->b( int2byte($sessions->{TRAFFIC_IN}) ) ."<BR>".
                                           "$_TRAFFIC OUT: ". $html->b( int2byte($sessions->{TRAFFIC_OUT}) ) 
                                           , 
                                           
                                           "$_TRAFFIC 2: ". $html->b(int2byte($sessions->{TRAFFIC_2})) ."<br>".
                                           "$_TRAFFIC 2 IN: ". $html->b( int2byte($sessions->{TRAFFIC_2_IN}) ) ."<BR>".
                                           "$_TRAFFIC 2 OUT: ". $html->b( int2byte($sessions->{TRAFFIC_2_OUT}) )
                                          , 
                                           
                                           "$_DURATION: ". $html->b($sessions->{DURATION}), 
                                           "$_SUM: ". $html->b($sessions->{SUM}) ] ],
                         rowcolor   => $_COLORS[2]
                               } );

print $table_sessions->show() . $table->show();

$table = $html->table({ rows => [[ $output  ]] });
print $table->show();

$html->make_charts({  
	 PERIOD     => $graph_type,
	 DATA       => \%DATA_HASH,
	 AVG        => \%AVG,
	 TYPE       => ['column', 'line'],
	 TRANSITION => 1,

  });



}



#**********************************************************
# dv_error
#**********************************************************
sub dv_error {
	my ($attr) = @_;
  my $PAGE_ROWS = 100;
  my $login  = ''; 

if ($attr->{USER}) {
  my $user = $attr->{USER};
  $login = $user->{LOGIN};
}
elsif ($FORM{LOGIN_EXPR}) {
  $login = $FORM{LOGIN_EXPR};
  $pages_qs .= "&LOGIN_EXPR=$FORM{LOGIN_EXPR}";
 }
elsif($FORM{UID}) {
  dv_users();
  return 0;
}



if (! -f $conf{LOGFILE}) {
	$html->message('info', $_INFO, "'$conf{LOGFILE}' $_NOT_EXIST");
	return 0;
}


if (defined($FORM{LOG_TYPE})) {
	$pages_qs .= "&LOG_TYPE=$FORM{LOG_TYPE}";
}

my ($list, $types, $totals) = show_log("$login", "$conf{LOGFILE}", { DATE      => $FORM{DATE},
	                                                                   LOG_TYPE  => $FORM{LOG_TYPE},
	                                                                   PG        => $PG,
	                                                                   PAGE_ROWS => $PAGE_ROWS
	                                                                 });
	                                                                   

print $html->form_main({ CONTENT => "$_LOGIN (*): " . $html->form_input('LOGIN_EXPR', "$FORM{LOGIN_EXPR}"),
	                       HIDDEN  => { sid   => "$sid",
	                                    index => "$index",
	                                    UID   => "$UID"   },
	                       SUBMIT  => { show  => "$_SHOW" }
	                      });
	                                                                   

	                                                                   
my $table = $html->table( { caption => "$_ERROR",
	                          width   => '100%',
	                          pages   => $totals,
	                          qs      => $pages_qs,
	                          ID      => 'DV_ERRORS'
	                         } );

foreach my $line (@$list) {
  if ($line =~ m/LOG_WARNING/i) {
     $line = $html->color_mark($line, '#FF0000');
   }

#  if ($line =~ m/LOG_WARNING/i) {
#    $table->{rowcolor}='#FF0000';
#   } 
#  else {
#  	$table->{rowcolor}=undef;
#   }  

  $table->addrow($line);
}
print $table->show();


$table = $html->table( { 
	                      width      => '100%',
	                      cols_align => ['right', 'right'] } );

$table->addrow($html->button("$_TOTAL", "index=$index&$pages_qs"), $totals);
while(my($k,$v)=each %$types) {
  $table->addrow($html->button($k, "index=$index&LOG_TYPE=$k$pages_qs"), $v);
}


$table->addrow($_SIZE, int2byte((-s $conf{LOGFILE}))) if ($login eq '');

print $table->show();

}


#**********************************************************
# stats
#**********************************************************
sub dv_stats {
	my ($attr) = @_;
 
if (defined($attr->{USER}))	{
	my $user = $attr->{USER};

	$UID = $user->{UID};
	$LIST_PARAMS{UID} = $UID;
	if (! defined($FORM{sort})) {
	  $LIST_PARAMS{SORT}=2;
	  $LIST_PARAMS{DESC}=DESC;
   }

  if (defined($FORM{OP_SID}) and $FORM{OP_SID} eq $COOKIES{OP_SID}) {
 	  $html->message('err', $_ERROR, "$_EXIST $FORM{OP_SID} eq $COOKIES{OP_SID}");
   }
  elsif ($FORM{bm}) {
    use Bills;
    my $Bill = Bills->new($db);
    $Bill->action('add', "$FORM{BILL_ID}", $FORM{sum});
    if($bill->{errno}) {
      $html->message('err', $_ERROR, "[$bill->{errno}] $err_strs{$bill->{errno}}");
     }
    else {
      $html->message('info', $_INFO, "$_ADDED: SUM $FORM{sum}, BILL_ID: $FORM{BILL_ID}");  	
     }
   }
  elsif($FORM{SESSION_ID}) {
  	$pages_qs .= "&SESSION_ID=$FORM{SESSION_ID}";
  	dv_session_detail({ USER => $attr->{USER} });
  	
  	return 0;
  }
}
#elsif($FORM{UID}) {
#	form_users();
#	return 0;
#}	


if ($FORM{del} && $FORM{is_js_confirmed}) {
	if(! defined($permissions{3}{1})) {
     $html->message('err', $_ERROR, 'ACCESS DENY');
     return 0;
	 } 

	my ($UID, $session_id, $nas_id, $session_start_date, $session_start_time, $sum, $login)=split(/ /, $FORM{del}, 7);
	$sessions->del($UID, $session_id, $nas_id, "$session_start_date $session_start_time");
  if (! $sessions->{errno})	 {
  	my $table = $html->table( { 
	                          width => '100%',
                            rows  => [["$_LOGIN",        $login ],
                                     ['SESSION_ID',      $session_id ],
                                     ['NAS_ID',          $nas_id ],
                                     ['SESSION_START',   "$session_start_date $session_start_time" ],
                                     [$_SUM, $sum]
                                    ]
                           } );
  	
  	$html->message('info', $_DELETED, $table->show());
    form_back_money('log', $sum, { UID => $UID }); #
    return 0;
   }
}

if ($sessions->{errno})	 {
	$html->message('err', $_ERROR, "[$sessions->{errno}] $err_strs{$sessions->{errno}}");
 }

#Join Service
  if($users->{COMPANY_ID}) {
     $Dv->info($FORM{UID});

     if ($Dv->{JOIN_SERVICE}) {
       if ($Dv->{JOIN_SERVICE} == 1) {
         my @uids = ();
   	     my $list = $Dv->list({ JOIN_SERVICE => $Dv->{UID}, 
                                COMPANY_ID   => $attr->{USER}->{COMPANY_ID} ,
                                PAGE_ROWS    => 10000
                               });

         foreach my $line (@$list) {
     	     $Dv->{JOIN_SERVICES_USERS} .= $html->button("$line->[0]", "&index=$index&UID=". $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6]) . ' :: ';
     	     push @uids, $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6];
          }
      
         $LIST_PARAMS{UIDS}=$FORM{UID};
         $LIST_PARAMS{UIDS} .= ',' .join(', ', @uids) if ($#uids > -1);
        }
       elsif($Dv->{JOIN_SERVICE}  > 1) {
       	 $Dv->{JOIN_SERVICES_USERS} .= $html->button("$_MAIN", "index=$index&UID=$Dv->{JOIN_SERVICE}") .' :: ';
        }

       my $table = $html->table( { 
	                          width => '100%',
                            rows  => [
                                  ["$_JOIN_SERVICE:",  $Dv->{JOIN_SERVICES_USERS} ]
                                    ]
                           } );

       print $table->show();
    }
	   
 	 }                                    


if ($FORM{rows}) {
  $LIST_PARAMS{PAGE_ROWS}=$FORM{rows};
  $conf{list_max_recs}=$FORM{rows};
  $pages_qs .= "&rows=$conf{list_max_recs}";
 }


if (! $LIST_PARAMS{UID} && $FORM{LOGIN_EXPR}) {
  my $users = Users->new($db, $admin, \%conf); 
  my $list = $users->list( { LOGIN_EXPR => $FORM{LOGIN_EXPR} } );
  if ($users->{TOTAL} == 1) {
	  $LIST_PARAMS{UID}=$list->[0]->[5+$users->{SEARCH_FIELDS_COUNT}];
	  $FORM{UID}=$LIST_PARAMS{UID};
	  $UID = $LIST_PARAMS{UID};
	  $LIST_PARAMS{ACTIVATE}=$list->[0]->[8+$users->{SEARCH_FIELDS_COUNT}];
   }
  else {
  	$html->message('err', $_ERROR, "'$FORM{LOGIN_EXPR}' $_NOT_EXIST");
  	return 0;
   }

  $pages_qs .= "&UID=$LIST_PARAMS{UID}";
}




my $list = $sessions->periods_totals({ %LIST_PARAMS });


my $table = $html->table( { caption     => "$_PERIOD",
	                          width       => '100%',
                            title_plain => ["$_PERIOD", "$_DURATION", "$_SEND", "$_RECV", "$_SUM"],
                            cols_align  => ['left', 'right', 'right', 'right', 'right'],
                            rowcolor    => $_COLORS[1]
                           } );


for(my $i = 0; $i < 5; $i++) {
	$table->addrow($html->button("$PERIODS[$i]", "index=$index&PERIOD=$i$pages_qs"), 
	  "$sessions->{'duration_'. $i}",
	  int2byte($sessions->{'sent_'. $i}), 
	  int2byte($sessions->{'recv_'. $i}), 
	  int2byte($sessions->{'sum_'. $i})
	 );
 }

print $table->show();


$table = $html->table( { width       => '100%',
	                       rowcolor    => $_COLORS[0],
                         rows        => [[ "$_FROM: ",  $html->date_fld('from', { MONTHES => \@MONTHES} ),
                                          "$_TO: ",    $html->date_fld('to', { MONTHES => \@MONTHES } ),
                                          $html->form_select('DIMENSION', { SELECTED   => $FORM{DIMENSION},
 	                                                               SEL_HASH   => {'' => 'Auto', 
 	                                                               	              'Kb' => 'Kb', 
 	                                                               	              'Mb' => 'Mb', 
 	                                                               	              'Gb' => 'Gb'
 	                                                               	             },
 	                                                               NO_ID       => 1
                                                                } ),
                                          "$_ROWS: ",  $html->form_input('rows', int($conf{list_max_recs}), { SIZE => 4 } ),
                                          $html->form_input('show', $_SHOW, { TYPE => 'submit' })
                                         ]],                                   
                      });



print $html->form_main({ CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
	                       HIDDEN  => { sid   => "$sid",
	                                    index => "$index",
	                                    UID   => "$UID" }});



if (defined($FORM{show})) {
  $pages_qs .= "&show=y&fromD=$FORM{fromD}&fromM=$FORM{fromM}&fromY=$FORM{fromY}&toD=$FORM{toD}&toM=$FORM{toM}&toY=$FORM{toY}";
  $FORM{fromM} = sprintf("%.2d", $FORM{fromM}+1);
  $FORM{toM}   = sprintf("%.2d", $FORM{toM}+1);
  $LIST_PARAMS{INTERVAL} = "$FORM{fromY}-$FORM{fromM}-$FORM{fromD}/$FORM{toY}-$FORM{toM}-$FORM{toD}";
 }
elsif (defined($FORM{PERIOD})) {
	$LIST_PARAMS{PERIOD} = $FORM{PERIOD}; 
	$pages_qs .= "&PERIOD=$FORM{PERIOD}";
}
elsif($FORM{DATE}) {
	$LIST_PARAMS{DATE} = $FORM{DATE}; 
	$pages_qs .= "&DATE=$FORM{DATE}";
}

#Show rest of prepaid traffic
if ($sessions->prepaid_rest({ 
	                            UID  => $LIST_PARAMS{UID},
	                            UIDS => $LIST_PARAMS{UIDS}
	                           })) {
	#Prepaid: period, traffic_type
  

  my $list = $sessions->{INFO_LIST};

  my $table = $html->table( { caption     => "$_PREPAID",
	                          width       => '100%',
                            title_plain => ["$_TRAFF $_TYPE", "$_BEGIN", "$_END", "$_START", "$_TOTAL (MB)", "$_REST (MB)", "$_OVERQUOTA (MB)"],
                            cols_align  => ['left', 'right', 'right', 'right', 'right', 'right', 'right'],
                            rowcolor    => $_COLORS[1]
                           } );
	
	foreach my $line  (@$list) {
	  $table->addrow(
	    $line->[0], 
      $line->[1], 
      $line->[2], 
      $line->[3], 
      $line->[4],
      ($line->[4] > 0 && $sessions->{REST}->{$line->[0]} > 0) ? $sessions->{REST}->{$line->[0]} : 0,
      ($line->[4] > 0 && $sessions->{REST}->{$line->[0]} < 0) ? abs($sessions->{REST}->{$line->[0]}) : 0
     );
   }

  print $table->show();	 
}





$pages_qs .= "&DIMENSION=$FORM{DIMENSION}"  if ($FORM{DIMENSION});

if (! defined($FORM{sort})) {
  $LIST_PARAMS{SORT}=2;
  $LIST_PARAMS{DESC}=DESC;
 }

dv_stats_calculation($sessions);

#Session List
$list = $sessions->list({ %LIST_PARAMS });	

if ($sessions->{TOTAL} < 1) {
	$html->message('info', $_INFO, "$_NO_RECORD");
	return 0;
}

$table = $html->table( { caption     => "$_SUM",
	                       width       => '100%',
	                       rowcolor    => $_COLORS[1],
                         title_plain => ["$_SESSIONS", "$_DURATION", "$_TRAFFIC $_SENT", "$_TRAFFIC $_RECV", "$_TRAFFIC $_SUM",
                           "$_TRAFFIC 2 $_SENT", "$_TRAFFIC 2 $_RECV",  "$_TRAFFIC $_SUM", "$_SUM"],
                         cols_align  => ['right', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right'],
                         rows        => [ [ $sessions->{TOTAL}, $sessions->{DURATION}, 
                                            int2byte($sessions->{TRAFFIC_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC_OUT}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC_OUT}+$sessions->{TRAFFIC_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC2_IN}, { DIMENSION => $FORM{DIMENSION} }),
                                            int2byte($sessions->{TRAFFIC2_OUT}, { DIMENSION => $FORM{DIMENSION} }),
                                            int2byte($sessions->{TRAFFIC2_OUT}+$sessions->{TRAFFIC2_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            $sessions->{SUM} ] ],
                     } );
print $table->show();

dv_sessions($list, $sessions);
}


#*******************************************************************
# WHERE period
# base_state($where, $period);
#*******************************************************************
sub dv_stats_calculation  {
 my ($sessions) = @_;

$sessions->calculation({ %LIST_PARAMS }); 


my $table = $html->table( { width       => '640',
	                          rowcolor    => $_COLORS[1],
                            title_plain => ["-", "$_MIN", "$_MAX", "$_AVG", "$_TOTAL"],
                            cols_align  => ['left', 'right', 'right', 'right', 'right'],
                            rows        => [ [ $_DURATION,  $sessions->{min_dur}, $sessions->{max_dur}, $sessions->{avg_dur},  $sessions->{total_dur} ],
                                             [ "$_TRAFFIC $_RECV", int2byte($sessions->{min_recv}), int2byte($sessions->{max_recv}), int2byte($sessions->{avg_recv}),  int2byte($sessions->{total_recv})],
                                             [ "$_TRAFFIC $_SENT", int2byte($sessions->{min_sent}), int2byte($sessions->{max_sent}), int2byte($sessions->{avg_sent}), int2byte($sessions->{total_sent})],
                                             [ "$_TRAFFIC $_SUM",  int2byte($sessions->{min_sum}),  int2byte($sessions->{max_sum}),  int2byte($sessions->{avg_sum}),  int2byte($sessions->{total_sum})]
                                           ]
                        } );

print $table->show();
}

#**********************************************************
# form_stats
#**********************************************************
sub dv_user_stats {



 if(defined($FORM{SESSION_ID})) {
  	$pages_qs .= "&SESSION_ID=$FORM{SESSION_ID}";
  	dv_session_detail({ LOGIN => $LIST_PARAMS{LOGIN} });
  	return 0;
  }



if ($sessions->{errno})	{
	$html->message('err', $_ERROR, "[$sessions->{errno}] $err_strs{$sessions->{errno}}");
 }

#Join Service
  if($user->{COMPANY_ID}) {

     if ($FORM{COMPANY_ID}) {
     	  $users=Users->new($db, $admin, \%conf); 
     	  dv_use();
     	  return 0;
     	}

     use Customers;	

     my $customer = Customers->new($db, $admin, \%conf);
     my $company = $customer->company();

print "Content-type: text/html\n\n";
     my $ulist = $company->admins_list({ COMPANY_ID => $user->{COMPANY_ID}, 
	                                       UID        => $UID });


     if ($company->{TOTAL} > 0 && $ulist->[0]->[0] > 0) {
     	 $Dv->{JOIN_SERVICES_USERS} = $html->button("$_COMPANY", "&sid=$sid&index=$index&COMPANY_ID=$user->{COMPANY_ID}").' ::';

      }

     $Dv->info($UID);

     if ($Dv->{JOIN_SERVICE} == 1) {
   	   my $list = $Dv->list({ JOIN_SERVICE => $UID, 
                              COMPANY_ID   => $attr->{USER}->{COMPANY_ID} ,
                              PAGE_ROWS    => 1000
                             });

       $Dv->{JOIN_SERVICES_USERS} .= (! $FORM{JOIN_STATS}) ? $html->b("$_ALL $_USERS") .' :: ' :
  	    $html->button("$_ALL", "&sid=$sid&index=$index&JOIN_STATS=". $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6]) . ' ::';

       foreach my $line (@$list) {
     	   if ($FORM{JOIN_STATS} && $FORM{JOIN_STATS}==$line->[$Dv->{SEARCH_FIELDS_COUNT} + 6]) {
     	     $Dv->{JOIN_SERVICES_USERS} .=  $html->b($line->[0]). ' :: ';
     	     $UID = $FORM{JOIN_STATS};
     	    }
     	   else {
     	     $Dv->{JOIN_SERVICES_USERS} .= $html->button("$line->[0]", "&sid=$sid&index=$index&JOIN_STATS=". $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6]) . ' ::';
          }

     	   push @uids, $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6];
        }
      
       $LIST_PARAMS{UIDS} = $UID;
       $LIST_PARAMS{UIDS}.= ',' .join(', ', @uids) if ($#uids > -1 && ! $FORM{JOIN_STATS});
      }
     elsif($Dv->{JOIN_SERVICE}  > 1) {
     	 $Dv->{JOIN_SERVICES_USERS} .= $html->button("$_MAIN", "index=$index&UID=$Dv->{JOIN_SERVICE}");
      }

     my $table = $html->table( { 
	                          width => '100%',
                            rows  => [
                                  ["$_JOIN_SERVICE: ",  $Dv->{JOIN_SERVICES_USERS} ]
                                    ]
                           } );

     print $table->show();

 	   
 	 }


if ($FORM{rows}) {
  $LIST_PARAMS{PAGE_ROWS}=$FORM{rows};
  $conf{list_max_recs}=$FORM{rows};
  $pages_qs .= "&rows=$conf{list_max_recs}";
 }

#online sessions

my $list = $sessions->online( { USER_NAME => $LIST_PARAMS{LOGIN}, 
	                              FIELDS    => [0, 3, 9, 4, 5, 6 ] } );

if ($sessions->{TOTAL} > 0) {
  my $table = $html->table( { caption     => "Online",
	                            width       => '100%',
                              title_plain => ["$_LOGIN", "IP", "CID", "$_DURATION", "$_SEND", "$_RECV"],
                              cols_align  => ['left', 'right', 'right', 'right', 'right', 'right' ],
                              rowcolor    => $_COLORS[1]
                            } );

  foreach my $line (@$list) {
    $table->addrow($line->[0], 
                   int2ip($line->[1]), 
                   $line->[2], 
                   $line->[3], 
                   int2byte($line->[4]), 
                   int2byte($line->[5])
                  );  	
   }
  print $table->show();
}


#PEriods totals
$list = $sessions->periods_totals({ %LIST_PARAMS });
my $table = $html->table( { caption     => "$_PERIOD",
	                          width       => '100%',
                            title_plain => ["$_PERIOD", "$_DURATION", "$_SEND", "$_RECV", "$_SUM"],
                            cols_align  => ['left', 'right', 'right', 'right', 'right'],
                            rowcolor    => $_COLORS[1],
                            ID          => 'DV_STATS_PERIOD'
                          } );

for(my $i = 0; $i < 5; $i++) {
	  $table->addrow($html->button("$PERIODS[$i]", "index=$index&PERIOD=$i$pages_qs"), "$sessions->{'duration_'. $i}",
	  int2byte($sessions->{'sent_'. $i}), int2byte($sessions->{'recv_'. $i}), int2byte($sessions->{'sum_'. $i}));
 }
print $table->show();




$table = $html->table({ width       => '100%',
	                      rowcolor    => $_COLORS[0],
                        rows        => [[ "$_FROM: ", $html->date_fld('from', { MONTHES => \@MONTHES} ),
                                         "$_TO: ",   $html->date_fld('to', { MONTHES => \@MONTHES } ),
                                          $html->form_select('DIMENSION', { SELECTED   => $FORM{DIMENSION},
 	                                                               SEL_HASH   => {'' => 'Auto', 
 	                                                               	              'Kb' => 'Kb', 
 	                                                               	              'Mb' => 'Mb', 
 	                                                               	              'Gb' => 'Gb'
 	                                                               	             },
 	                                                               NO_ID       => 1
                                                                } ),
                                         "$_ROWS: ", $html->form_input('rows', int($conf{list_max_recs}), { SIZE => 4, OUTPUT2RETURN => 1 } ),
                                         $html->form_input('show', $_SHOW, { TYPE => 'submit', OUTPUT2RETURN => 1 })
                                        ]],                                   
                        } );




#if (! defined($UID)) {
#	$UID=$FORM{UID};
#}

print $html->form_main({ CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
	                       HIDDEN  => { sid   => "$sid",
	                                    index => "$index",
	                                    UID   => "$UID",
	                                    UIDS  => "$FORM{UIDS}" }});



#dv_stats_calculation($sessions);

if (defined($FORM{show})) {
  $pages_qs .= "&show=y&fromD=$FORM{fromD}&fromM=$FORM{fromM}&fromY=$FORM{fromY}&toD=$FORM{toD}&toM=$FORM{toM}&toY=$FORM{toY}";
  $FORM{fromM} = sprintf("%.2d", $FORM{fromM}+1);
  $FORM{toM} = sprintf("%.2d", $FORM{toM}+1);
  $LIST_PARAMS{INTERVAL} = "$FORM{fromY}-$FORM{fromM}-$FORM{fromD}/$FORM{toY}-$FORM{toM}-$FORM{toD}";
 }
elsif (defined($FORM{PERIOD})) {
	$LIST_PARAMS{PERIOD} = int($FORM{PERIOD}); 
	$pages_qs .= "&PERIOD=$FORM{PERIOD}";
}

#Show rest of prepaid traffic
if ($sessions->prepaid_rest({ UID => $LIST_PARAMS{UID}, 
	                            UIDS => $LIST_PARAMS{UIDS} 
	                            })) {

	#Prepaid: period, traffic_type
  

  my $list = $sessions->{INFO_LIST};

  my $table = $html->table( { caption     => "$_PREPAID",
	                            width       => '100%',
                              title_plain => ["$_TRAFF $_TYPE", "$_BEGIN", "$_END", "$_START", "$_TOTAL (MB)", "$_REST (MB)", "$_OVERQUOTA (MB)"],
                              cols_align  => ['left', 'right', 'right', 'right', 'right', 'right', 'right'],
                              rowcolor    => $_COLORS[1],
                              ID          => 'DV_STATS_PREPAID'
                           } );
	
	foreach my $line  (@$list) {
	  $table->addrow($line->[0], 
      $line->[1], 
      $line->[2], 
      $line->[3], 
      $line->[4],
      ($line->[4] > 0 && $sessions->{REST}->{$line->[0]} > 0) ? $sessions->{REST}->{$line->[0]} : 0,
      ($line->[4] > 0 && $sessions->{REST}->{$line->[0]} < 0) ? abs($sessions->{REST}->{$line->[0]}) : 0
     );
   }

  print $table->show();	 
}


$pages_qs .= "&DIMENSION=$FORM{DIMENSION}"  if ($FORM{DIMENSION});

#Session List
$list = $sessions->list({ %LIST_PARAMS });	

$table = $html->table( {  caption     => "$_SUM",
	                        width       => '100%',
	                        rowcolor    => $_COLORS[1],
                         title_plain => ["$_SESSIONS", "$_DURATION", "$_TRAFFIC $_SENT", "$_TRAFFIC $_RECV",  "$_TRAFFIC $_SUM",
                           "$_TRAFFIC 2 $_SENT", "$_TRAFFIC 2 $_RECV",  "$_TRAFFIC $_SUM", "$_SUM"],

                          cols_align  => ['right', 'right', 'right', 'right'],
                          rows        => [ [ $sessions->{TOTAL}, $sessions->{DURATION}, 
                                            int2byte($sessions->{TRAFFIC_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC_OUT}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC_OUT}+$sessions->{TRAFFIC_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC2_IN}, { DIMENSION => $FORM{DIMENSION} }),
                                            int2byte($sessions->{TRAFFIC2_OUT}, { DIMENSION => $FORM{DIMENSION} }),
                                            int2byte($sessions->{TRAFFIC2_OUT}+$sessions->{TRAFFIC2_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            $sessions->{SUM} ] ]                               
                             } );
print $table->show();	

dv_sessions($list, $sessions) if ( $sessions->{TOTAL} > 0);


}



#**********************************************************
# dv_session_detail
#**********************************************************
sub dv_session_detail {
	my ($attr) = @_;
  my $user;

 
if (defined($attr->{USER}))	{
	$user = $attr->{USER};
	$LIST_PARAMS{LOGIN}=$user->{LOGIN};
}
elsif (defined($LIST_PARAMS{LOGIN}))	{

}
elsif($FORM{UID}) {
	dv_user();
	return 0;
}	


my %ACCT_TERMINATE_CAUSES = (
                      'Unknown'             =>     0,
                      'User-Request'        =>     1,
                      'Lost-Carrier'        =>     2,
                      'Lost-Service'        =>     3,
                      'Idle-Timeout'        =>     4,
                      'Session-Timeout'     =>     5,
                      'Admin-Reset'         =>     6,
                      'Admin-Reboot'        =>     7,
                      'Port-Error'          =>     8,
                      'NAS-Error'           =>     9,
                      'NAS-Request'         =>     10,
                      'NAS-Reboot'          =>     11,
                      'Port-Unneeded'       =>     12,
                      'Port-Preempted'      =>     13,
                      'Port-Suspended'      =>     14,
                      'Service-Unavailable' =>     15,
                      'Callback'            =>     16,
                      'User-Error'          =>     17,
                      'Host-Request'        =>     18,
                      'Supplicant-Restart'  =>     19,
                      'Reauthentication-Failure' => 20,
                      'Port-Reinit'         =>     21,
                      'Port-Disabled'       =>     22       
                    );

my %ACCT_TERMINATE_CAUSES_VALUE = reverse %ACCT_TERMINATE_CAUSES;

$sessions->session_detail({ %FORM });


$sessions->{ACCT_TERMINATE_CAUSE} = "$sessions->{ACCT_TERMINATE_CAUSE} : ". $ACCT_TERMINATE_CAUSES_VALUE{$sessions->{ACCT_TERMINATE_CAUSE}};

$sessions->{_SENT}=int2byte($sessions->{SENT}); 
$sessions->{_RECV}=int2byte($sessions->{RECV}); 
$sessions->{_SENT2}=int2byte($sessions->{SENT2});
$sessions->{_RECV2}=int2byte($sessions->{RECV2});

$html->tpl_show(_include('dv_session_detail', 'Dv'), $sessions);

my %ORDERS = (hours    => $_HOURS,
              days     => $_DAYS,
              sessions => $_SESSIONS  );


print $html->form_main({ CONTENT => $html->form_select('PERIOD', 
                                          { 
 	                                          SELECTED  => $FORM{PERIOD},
 	                                          SEL_HASH  => \%ORDERS,
 	                                          NO_ID     => 1
 	                                        }) .
 	                                                                                                                                                                                                                                                "SESSION_ID:".
 	                                        
 	                                        $html->form_select('SESSION_ID', 
                                          { 
                                          	SELECTED    => "$FORM{SESSION_ID}",
 	                                          SEL_OPTIONS => { $FORM{SESSION_ID} => "$FORM{SESSION_ID}",
 	                                          	                             '0' => "$_ALL" },
 	                                          NO_ID       => 1
 	                                        })
 	                                        
 	                                        
 	                                        ,
	                       HIDDEN  => { index => "$index",
	                       	            UID   => "$UID"
	                       	           },
	                       SUBMIT  => { SHOW   => "$_SHOW"} 
	                        });

$pages_qs .= "&PERIOD=$FORM{PERIOD}" if (defined($FORM{PERIOD})); 



#Log intervals
my $list = $sessions->list_log_intervals({ ACCT_SESSION_ID =>  $FORM{SESSION_ID} });
if ($sessions->{TOTAL} > 0) {
  my $table = $html->table({ width      => '100%',
                             caption    => "$_INTERVALS",
                             border     => 1,
                             title      => ["$_INTERVAL", "$_TRAFFIC", "$_SENT", "$_RECV", "$_DURATION", "$_SUM"],
                             cols_align => ['right', 'right', 'right', 'right', 'right', 'right'],
                             qs         => $pages_qs,
                             ID         => 'DV_SESSION_DETAIL'
                          } );

  foreach my $line (@$list) {
    $table->addrow($line->[0],  
       $line->[1],
       int2byte($line->[2]), 
       int2byte($line->[3]),  
       $line->[4], 
       $line->[5] 
    );
  }

  print $table->show();

}



#Log detail list
$list = $sessions->detail_list({ %LIST_PARAMS, %FORM });
my $table = $html->table({ width      => '100%',
                           border     => 1,
                           title      => ["LAST_UPDATE", "$_SESSION_ID", "NAS_ID", "SENT", "RECV", "SENT2", "RECV2"],
                           cols_align => ['right', 'right', 'right', 'right', 'right', 'right', 'right'],
                           pages      => $sessions->{TOTAL},
                           qs         => $pages_qs
                           } );

 foreach my $line (@$list) {
    $table->addrow($line->[0],  
    $html->button($line->[1], "index=$index&UID=$UID&SESSION_ID=$line->[1]"), 
    $line->[2], 
    int2byte($line->[3]),  
    int2byte($line->[4]), 
    int2byte($line->[5]), 
    int2byte($line->[6]));
  }
 print $table->show();


$table = $html->table( { width      => '100%',
                         cols_align => ['right', 'right'],
                         rows       => [ ["$_TOTAL:", $html->b($sessions->{TOTAL}) ] ]
                       } );
print $table->show();

}



#**********************************************************
# dv_user_info
#**********************************************************
sub dv_user_chg_tp {
  my ($attr) = @_;
# my $user;
 my $shedule = Shedule->new($db, $admin, \%conf);
 my $period = $FORM{period} || 0;
 
 if (! $conf{DV_USER_CHG_TP}) {
    $html->message('err', $_ERROR, "$_NOT_ALLOW");
    return 0;
  }

 if(defined($LIST_PARAMS{UID})) {
   #$user = $attr->{USER};
   $Dv = $Dv->info($LIST_PARAMS{UID});
   if($Dv->{TOTAL} < 1) {
 	   $html->message('info', $_INFO, "$_NOT_ACTIVE");
 	   return 0;
    }
  }
 else {
 	 $html->message('err', $_ERROR, "$_USER_NOT_EXIST");
 	 return 0;
  }

 #Get TP groups
 $tariffs->tp_group_info($Dv->{TP_GID});
 
 if (! $tariffs->{USER_CHG_TP}) {
 	  $html->message('err', $_ERROR, "$_NOT_ALLOW");
 	  return 0;
  }


if ($FORM{set}) {
	use POSIX;

  if ($conf{DV_USER_CHG_TP_NPERIOD}) {
  	 # Get next month
     my $Y;
     my $M;
     my $D;

     if ($user->{ACTIVATE} eq '0000-00-00') {
       # Get next month
       ($Y, $M, $D)=split(/-/, $DATE, 3);
       $D='01';
      }
     else {
       ($Y, $M, $D)=split(/-/, $user->{ACTIVATE}, 3);
      }

     $M++;
     if ($M == 13) {
         $M = 1;
         $Y++;
       }
     $M = sprintf("%02.d", $M);
    
     my $seltime = POSIX::mktime(0, 0, 0, $D, $M, ($Y - 1900));

    if ($seltime > time()) {
      $shedule->add( {UID     => $LIST_PARAMS{UID},
                   TYPE     => 'tp',
                   ACTION   => $FORM{TP_ID},
    	             D        => $D,
                   M        => $M,
                   Y        => $Y,
                   DESCRIBE => "$message<br>
                   $_FROM: '$Y-$M-$D'",
                   MODULE   => 'Dv'
                 } );
     }	
    else {
 	    $FORM{UID}=$LIST_PARAMS{UID};
      $Dv->change({ %FORM });

      if ($user->{errno}) {
        $html->message('err', $_ERROR, "[$Dv->{errno}] $err_strs{$Dv->{errno}}");
       }
      else {
        $html->message('info', $_CHANGED, "$_CHANGED");
        $Dv->info($user->{UID});
       }
     }
   }
  elsif ($period == 1 && $conf{DV_USER_CHG_TP_SHEDULE}) {
    
    my $seltime = POSIX::mktime(0, 0, 0, $FORM{date_D}, $FORM{date_M}, ($FORM{date_Y} - 1900));
    
    if ($seltime <= time()) {
      $html->message('info', $_INFO, "$ERR_WRONG_DATA");
      return 0;
     }

    $FORM{date_M}++;    
    $shedule->add( {UID     => $LIST_PARAMS{UID},
                   TYPE     => 'tp',
                   ACTION   => $FORM{TP_ID},
    	             D        => sprintf("%02.d", $FORM{date_D}),
                   M        => sprintf("%02.d", $FORM{date_M}),
                   Y        => $FORM{date_Y},
                   DESCRIBE => "$message<br>
                   $_FROM: '$FORM{date_Y}-$FORM{date_M}-$FORM{date_D}'",
                   MODULE   => 'Dv'
                 } );

    if ($shedule->{errno}) {
      $html->message('err', $_ERROR, "[$shedule->{errno}] $err_strs{$shedule->{errno}}");	
     }
    else {
      $html->message('info', $_CHANGED, "$_CHANGED");
      $Dv->info($user->{UID});
    }
   }
  else {
    if ($user->{CREDIT} + $user->{DEPOSIT} < 0) {
    	$html->message('err', "$_ERROR", "$ERR_SMALL_DEPOSIT - $_DEPOSIT: $user->{DEPOSIT} $_CREDIT: $user->{CREDIT}");
    	return 0;
     }
    
    $FORM{UID}=$LIST_PARAMS{UID};

    $Dv->{ABON_DATE}=undef;
    if ($Dv->{MONTH_ABON}> 0 && ! $Dv->{STATUS} && ! $users->{DISABLE}) {
    	  #&&
        #($users->{DEPOSIT}+$users->{CREDIT} > 0 || 
        # $Dv->{POSTPAID_ABON} || 
        # $Dv->{PAYMENT_TYPE} == 1 )) {
      if ($user->{ACTIVATE} ne '0000-00-00') {
        my ($Y, $M, $D)=split(/-/, $user->{ACTIVATE}, 3);
        $M--;
        $Dv->{ABON_DATE} = strftime "%Y-%m-%d", localtime(  (mktime(0, 0, 0, $D, $M, ($Y-1900), 0, 0, 0)  + 31 * 86400) );
       }
      else {
        my ($Y, $M, $D)=split(/-/, $DATE, 3);
        $M++;
        if ($M == 13) {
          $M = 1;
          $Y++;
         }
        $D='01';
        $M = sprintf("%02.d", $M);
        $Dv->{ABON_DATE} = "$Y-$M-$D";
       }
    }


    

    if ($Dv->{ABON_DATE}) {
      
      ($FORM{date_Y}, $FORM{date_M}, $FORM{date_D})=split(/-/, $Dv->{ABON_DATE}, 3);
      #print "--- $FORM{date_Y}, $FORM{date_M}, $FORM{date_D} // $Dv->{ABON_DATE}-- ";
 	    use POSIX;
    
      my $seltime = POSIX::mktime(0, 0, 0, $FORM{date_D}, $FORM{date_M}, ($FORM{date_Y} - 1900));
    
      if ($seltime <= time()) {
        $html->message('info', $_INFO, "$ERR_WRONG_DATA ($FORM{date_D}, $FORM{date_M}, $FORM{date_Y}  )/". $seltime . "-" . time());
        return 0;
       }

      $shedule->add( {UID     => $LIST_PARAMS{UID},
                     TYPE     => 'tp',
                     ACTION   => $FORM{TP_ID},
    	               D        => $FORM{date_D},
                     M        => $FORM{date_M},
                     Y        => $FORM{date_Y},
                     DESCRIBE => "$message<br>
                     $_FROM: '$FORM{date_Y}-$FORM{date_M}-$FORM{date_D}'",
                     MODULE   => 'Dv'
                    });

      if ($shedule->{errno}) {
        $html->message('err', $_ERROR, "[$shedule->{errno}] $err_strs{$shedule->{errno}}");	
       }
      else {
        $html->message('info', $_CHANGED, "$_CHANGED");
       }
     }
    else {
      $Dv->change({ %FORM });

      if ($Dv->{errno}) {
        $html->message('err', $_ERROR, "[$Dv->{errno}] $err_strs{$Dv->{errno}}");	
       }
      else {
        #Take fees
        if ($Dv->{TP_INFO}->{MONTH_FEE} > 0 && ! $Dv->{STATUS}) {
          dv_get_month_fee($Dv);
          $user->change($user->{UID}, { ACTIVATE => "$DATE",
          	                            UID      => $user->{UID} })
         }

    	  $html->message('info', $_CHANGED, "$_CHANGED");
        $Dv->info($Dv->{UID});
       }
     }

    $Dv->info($Dv->{UID});
  }
}
elsif($FORM{del}) {
  $shedule->del( { UID => $LIST_PARAMS{UID},
   	               ID  => $FORM{SHEDULE_ID}  } 
   	            );

  $html->message('info', $_DELETED, "$_DELETED [$FORM{SHEDULE_ID}]");
}



  $shedule->info( {UID      => $user->{UID},
                   TYPE     => 'tp',
                   DESCRIBE => "$message\n$_FROM: '$FORM{date_y}-$FORM{date_m}-$FORM{date_d}'",
                   MODULE   => 'Dv'
                   });


  if ($shedule->{TOTAL} > 0) {
  	$tariffs->info($shedule->{ACTION});
  	
  	$table = $html->table( { width      => '100%',
  		                       caption    => "$_SHEDULE",
                             cols_align => ['left', 'left'],
                             rows       => [ [ "$_TARIF_PLAN:", "$shedule->{ACTION} : $tariffs->{NAME}"   ],
                                             [ "$_DATE:",   "$shedule->{Y}-$shedule->{M}-$shedule->{D}" ],
                                             [ "$_ADDED:",  "$shedule->{DATE}"         ],
                                             [ "ID:",       "$shedule->{SHEDULE_ID}"   ]  
                                            ]
                               } );
  	$tariffs->{TARIF_PLAN_SEL} = $table->show({ OUTPUT2RETURN => 1 }). $html->form_input('SHEDULE_ID', "$shedule->{SHEDULE_ID}", { TYPE => 'HIDDEN', OUTPUT2RETURN => 1 });
  	$tariffs->{ACTION}='del';
  	$tariffs->{LNG_ACTION}=$_DEL;
  }
 else {
   $tariffs->{TARIF_PLAN_SEL}=$html->form_select('TP_ID', 
                                          { 
 	                                          SELECTED          => $Dv->{TP_ID},
 	                                          SEL_MULTI_ARRAY   => $tariffs->list({ TP_GID => $Dv->{TP_GID} }),
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });

   $tariffs->{PARAMS} .= form_period($period) if ($conf{DV_USER_CHG_TP_SHEDULE} && ! $conf{DV_USER_CHG_TP_NPERIOD});	
   $tariffs->{ACTION}='set';
   $tariffs->{LNG_ACTION}=$_CHANGE;
  }

   $tariffs->{UID}=$attr->{USER}->{UID};
   $tariffs->{m}=$m;
   $tariffs->{TP_ID}   = $Dv->{TP_ID};
   $tariffs->{TP_NAME} = "$Dv->{TP_ID}:$Dv->{TP_NAME}";

   $html->tpl_show(templates('form_chg_tp'), $tariffs);
}


#**********************************************************
# dv_user_info
#**********************************************************
sub dv_user_info {
  
  if ($conf{DV_ISG}) {
    print "Content-Type: text/html\n\n";
  	
  	my $nas = Nas->new($db, \%conf);
    my $list = $nas->nas_ip_pools_list();
    
    foreach my $line (@$list) {
    	if ($line->[3] <= ip2int($user->{REMOTE_ADDR}) && ip2int($user->{REMOTE_ADDR}) <= $line->[4]) {
    		$nas->info({ NAS_ID => $line->[0] });
    		next;
    	 }
     }

    if (! $nas->{NAS_ID}) {
    	$html->message('err', $_ERROR, "Can't find your NAS");
    	return 0;
     }
 	
  	#get mac from NAS and account info
  	#my $result = `/usr/bin/rsh -l snake 77.87.152.66 show arp`;

    my $isg_cmd = "/bin/echo \"User-Name=\\\"$user->{LOGIN}\\\",cisco-avpair=\\\"subscriber:command=account-status-query\\\",Cisco-Account-Info=\\\"S$user->{REMOTE_ADDR}\\\"\" | /usr/local/bin/radclient -x $nas->{NAS_MNG_IP_PORT} coa $nas->{NAS_MNG_PASSWORD}";

    print "<!-- $isg_cmd -->";

    my $result = `$isg_cmd`;

    #echo "User-Name=\"test\",cisco-avpair=\"subscriber:command=account-logon\",Cisco-Account-Info=\"S79.124.98.3\"" | /usr/local/bin/radclient -x 77.87.152.66:1700 coa cisco555

=comments
Sending CoA-Request of id 218 to 77.87.152.66 port 1700
        User-Name = "test"
        Cisco-AVPair = "subscriber:command=account-status-query"
        Cisco-Account-Info = "S79.124.98.3"
rad_recv: CoA-ACK packet from host 77.87.152.66:1700, id=218, length=211
        Cisco-Account-Info = "N1SERVICE_406_L4R;224;;0;0;0;0"
        Cisco-Account-Info = "N1PBHK_SERVICE;224;;0;0;0;0"
        Cisco-Account-Info = "$MA0018.f3f8.f85a"
        Cisco-Account-Info = "S79.124.98.3"
        Cisco-Command-Code = "\0040"
        Cisco-AVPair = "sg-version=1.0"
        NAS-Port = 0
        NAS-Port-Id = "nas-port:0.0.0.0:0/0/2/1416"
        Framed-IP-Address = 79.124.98.3
pROFILRE

        Cisco-Account-Info = "N1PBHK_SERVICE;399;chao;0;0;0;0"
        Cisco-Account-Info = "N1TP_214;399;chao;0;46;0;2867"
        User-Name = "chao"
        Cisco-Command-Code = "\0041"
        Cisco-Account-Info = "S79.124.99.40"
        Cisco-Account-Info = "ATP_214"
        Cisco-Account-Info = "NSERVICE_406_BOD1M"
        Cisco-Account-Info = "NBasic_Internet_Service"
        Cisco-Account-Info = "N1PBHK_SERVICE;399;chao;0;0;0;0"
        Idle-Timeout = 1800
        User-Name = "chao"
        Cisco-AVPair = "accounting-list=BH_ACCNT_LIST1"
        Cisco-AVPair = "sg-version=1.0"
        NAS-Port = 33555320
        NAS-Port-Id = "nas-port:0.0.0.0:0/0/2/888"
        Framed-IP-Address = 79.124.99.40

=cut

    #$result = "Cisco-Account-Info = \"N1TP_202;421;test;5887;5697;5108683;4021074\"";

  	my @arr = split(/\n/, $result);
  	my %RAD_PAIRS = ();
  	foreach my $line (@arr) {
        my($key, $val)=split(/ = /, $line);

        $val =~ s/\"//g;
        $key =~ s/\t//g;
        $key =~ s/ //g;
        
      	$RAD_PAIRS{$key}=$val;
        #Mac as ID
        if ($val =~ /\$MA(\S+)/) {
      	  $Dv->{ISG_CID_CUR}=$1;
      	 }
  	    #IP user ID
  	    elsif ($val =~ /^S(\S+)/) {
  	    	$Dv->{ISG_CID_CUR}=$1;
  	     }
            elsif ($val =~ /^N1TURBO_SPEED(\d+);(\d+)/) {
              $Dv->{TURBO_MODE}=$2;
             }
  	    elsif ($val =~ /^N1(TP_\d+)/) {
  	      $Dv->{CURE_SERVICE}=$1;
  	     }
  	 }
	
	
	  #$Dv->{ISG_CID_CUR} = '192.168.0.1';
	  #
 	  if ($RAD_PAIRS{'Error-Cause'}) {
 	  	$html->message('err', $_ERROR, "$RAD_PAIRS{'Error-Cause'} / $RAD_PAIRS{'Reply-Message'}");

 	   }
    elsif(! $Dv->{ISG_CID_CUR}) {
    	$html->message('err', $_ERROR, "$_NOT_EXIST ID: ");
     }
    elsif ($Dv->{ISG_CID_CUR} =~ /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/) {
    	$Dv->{ISG_CID_CUR} = dv_get_isg_mac($Dv->{ISG_CID_CUR});
    	if ($Dv->{ISG_CID_CUR} eq '') {
    		$html->message('err', $_ERROR, "Can't find MAC in DHCP");
    	 }
     }

    if ($Dv->{ISG_CID_CUR}) {


  	  #change speed 
   if ($FORM{SPEED}) {
        if ($Dv->{CURE_SERVICE} =~ /TP/ || ! $Dv->{TURBO_MODE} ) {
           my $service_name = 'TURBO_SPEED'. $FORM{SPEED};
           #Deactive cure service
           if ($Dv->{CURE_SERVICE} =~ /TP/) {
             my $isg_cmd = "/bin/echo \"User-Name=\\\"$user->{LOGIN}\\\",cisco-avpair=\\\"subscriber:command=deactivate-service\\\",cisco-avpair+=\\\"subscriber:service-name=$Dv->{CURE_SERVICE}\\\",Cisco-Account-Info=\\\"S$user->{REMOTE_ADDR}\\\",  \" | /usr/local/bin/radclient -x $nas->{NAS_MNG_IP_PORT} coa $nas->{NAS_MNG_PASSWORD}";
             print "<!-- $isg_cmd -->";
             my $result = `$isg_cmd`;
            }

 
           #Active service
           $isg_cmd = "/bin/echo \"User-Name=\\\"$user->{LOGIN}\\\",cisco-avpair=\\\"subscriber:command=activate-service\\\",cisco-avpair+=\\\"subscriber:service-name=$service_name\\\",Cisco-Account-Info=\\\"S$user->{REMOTE_ADDR}\\\",  \" | /usr/local/bin/radclient -x $nas->{NAS_MNG_IP_PORT} coa $nas->{NAS_MNG_PASSWORD}";
     
            print "<!-- $isg_cmd -->"; 
           my $result = `$isg_cmd`;
           $result = `/bin/echo \`date \"+ %Y-%m-%d %H:%M:%S\"\` \"$user->{LOGIN} $service_name \" >> /usr/abills/var/log/turbo.log`;

           my @arr = split(/\n/, $result);
  	       my %RAD_PAIRS = ();

  	       foreach my $line (@arr) {
             my($key, $val)=split(/ = /, $line);

             $val =~ s/\"//g;
             $key =~ s/\t//g;
             $key =~ s/ //g;
        
             $RAD_PAIRS{$key}=$val;
             #Mac as ID
             if ($val =~ /\$MA(\S+)/) {
      	        $Dv->{ISG_CID_CUR}=$1;
      	      }
  	         #IP user ID
  	         elsif ($val =~ /S(\S+)/) {
  	    	     $Dv->{ISG_CID_CUR}=$1;
  	          }
  	        }
	  
	     	  if ($RAD_PAIRS{'Error-Cause'}) {
 	        	$html->message('err', $_ERROR, "$RAD_PAIRS{'Error-Cause'} / $RAD_PAIRS{'Reply-Message'}");
 	         }
          else {
      	    $html->message('info', $_INFO, "TURBO $_ENABLE");
            return 0;
           }
       }
      elsif ($Dv->{TURBO_MODE}){
      	$html->message('info', $_INFO, "TURBO $_MODE $_ENABLE");
       }
  	 }
   }
 }
  
  if ($FORM{activate}) {
     $Dv->change({ UID    => $LIST_PARAMS{UID}, 
     	             STATUS => 0,
     	             CID    => ($Dv->{ISG_CID_CUR})  ? $Dv->{ISG_CID_CUR} : undef 
    	            });
  	  if (! $Dv->{errno}) {
  	  	$html->message('info', $_INFO, "$_ACTIVATE CID: $Dv->{ISG_CID_CUR}");

  	  	dv_get_month_fee($Dv) if (! $Dv->{STATUS});
  	   }
  	  else {
  	  	if ($Dv->{ISG_CID_CUR}) {
  	  	  my $res = `/bin/echo "User-Name=\"$user->{LOGIN}\",cisco-avpair=\"subscriber:commandmy=account-logon\",Cisco-Account-Info=\"S$user->{REMOTE_ADDR}\"" | /usr/local/bin/radclient -x  $nas->{NAS_MNG_IP_PORT} coa $nas->{NAS_MNG_PASSWORD}`;
         }

  	  	$html->message('err', $_ACTIVATE, "$_ERROR CID: $Dv->{ISG_CID_CUR}");
  	  	
  	  	
  	   }
  
   }
  
  $Dv->info($LIST_PARAMS{UID});
  
  if ($Dv->{TOTAL} < 1) {
  	$html->message('info', $_INFO, "$_NOT_ACTIVE");
    return 0;	
  }
  
  if ($Dv->{STATUS} == 2) {
    $Dv->{STATUS}    = $html->color_mark($service_status[$Dv->{STATUS}], $_COLORS[6]). ' '.
      $html->button($_ACTIVATE, "&index=$index&sid=$sid&activate=1");
   }  
  else {
  	$Dv->{STATUS}    = $service_status[$Dv->{STATUS}];
   }
  
  
  if ($conf{DV_USER_CHG_TP}) {
    $Dv->{TP_CHANGE} = $html->button("$_CHANGE", 'index='. ($index+2).'&sid='.$sid );
   }

  # Get next payment period
  if ($Dv->{MONTH_ABON}> 0 &&  ! $Dv->{STATUS} && ! $user->{DISABLE} &&
        ($user->{DEPOSIT}+$user->{CREDIT} > 0 || 
         $Dv->{POSTPAID_ABON} || 
         $Dv->{PAYMENT_TYPE} == 1 )) {
    if ($user->{ACTIVATE} ne '0000-00-00') {
      my ($Y, $M, $D)=split(/-/, $user->{ACTIVATE}, 3);
      $M--;
      $Dv->{ABON_DATE} = strftime "%Y-%m-%d", localtime(  (mktime(0, 0, 0, $D, $M, ($Y-1900), 0, 0, 0)  + 31 * 86400) );
     }
    else {
      my ($Y, $M, $D)=split(/-/, $DATE, 3);
      $M++;
      if ($M == 13) {
        $M = 1;
        $Y++;
       }
      $D='01';
      $M = sprintf("%02.d", $M);
      $Dv->{ABON_DATE} = "$Y-$M-$D";
     }
  }

  if ($conf{DV_ISG}) {
    if ($Dv->{CID} ne $Dv->{ISG_CID_CUR} || $Dv->{CID} eq '') {
      $html->message('info', $_INFO, "$_NOT_ACTIVE CID: $Dv->{ISG_CID_CUR} IP: $user->{REMOTE_ADDR} ");
      $html->form_main({ CONTENT => '',
  	                     HIDDEN  => { index => "$index",
  	                         	            CID   => "$Dv->{ISG_CID_CUR}",
  	                         	            sid   => $sid    },
	                       SUBMIT  => { activate => "$_ACTIVATE"  } 
 	                      });
  	
  	  $Dv->{CID} = $Dv->{ISG_CID_CUR};
  	  $Dv->{IP}  = $user->{REMOTE_ADDR};
  	  $Dv->{CID} .= ' '.$html->color_mark($_NOT_ACTIVE, $_COLORS[6]);
  	 }
    elsif($Dv->{TURBO_MODE}) {
       $html->message('info', $_INFO, "TURBO $_ENABLE $Dv->{TURBO_MODE} sec.");

     } 
    else {
      $Dv->{SPEED_SEL} = $html->form_select('SPEED', 
                                          { 
 	                                          SELECTED     => $FORM{SPEED},
 	                                          SEL_ARRAY    => ['', 
 	                                             '128b/s, 3000 sec', 
 	                                             '512b/s, 3000 sec', 
 	                                             '2048b/s, 3000 sec'],
 	                                          ARRAY_NUM_ID => 1
 	                                        });
      
      $html->tpl_show(_include('dv_user_speed', 'Dv'), $Dv);
     }

#    $Dv->{SPEED} = $html->form_main({ CONTENT => "$_SPEED: ".$html->form_select('SPEED', 
#                                          { 
# 	                                          SELECTED     => $FORM{SPEED},
# 	                                          SEL_ARRAY    => ['', '128b/s, 3000 sec', '512b/s, 3000 sec', '2048b/s, 3000 sec'],
# 	                                          ARRAY_NUM_ID => 1
# 	                                        }),
#                       HIDDEN  => { index => "$index",
#  	                   	            CID   => "$Dv->{ISG_CID_CUR}",
#  	                         	      sid   => $sid    },
#                       SUBMIT  => { change => "$_CHANGE"  } 
#                      });


   }


  $html->tpl_show(_include('dv_user_info', 'Dv'), $Dv);
}


#**********************************************************
# dv_periodic_ppp_clean
# Kill ppp deamons fot down interfaces 
#**********************************************************
sub dv_periodic_ppp_clean {
  #my $a = `count=\`ifconfig -d | grep PID | wc -l\`; if [ \${count} != 0 ]; thenecho \${count}; ifconfig -d | grep PID | awk '{ print \$4 }' | xargs kill -1; fi;`;
}

#**********************************************************
# dv_periodic_logrotate
#**********************************************************
sub dv_periodic_logrotate {
	my ($attr) = @_;
  my $debug = $attr->{DEBUG} || 0;

  # Clean s_detail table
  my ($y, $m, $d)=split(/-/, $ADMIN_REPORT{DATE}, 3);

  if ($d == 1 && $conf{DV_LOG_CLEAN_PERIOD}) {
    $DEBUG .= "Make log rotate\n" if ($debug > 0);

    $sessions->log_rotate({ TYPES  => [ 'SESSION_DETAILS', 'SESSION_INTERVALS'],
  	                        PERIOD => $conf{DV_LOG_CLEAN_PERIOD} });
   }
}

#**********************************************************
# daily_fees
#**********************************************************
sub dv_daily_fees {
  my ($attr) =@_;

	my $debug = $attr->{DEBUG} || 0;
  my $debug_output = '';

 $debug_output .= "Daily periodic payments\n" if ($debug > 1);

 my $list = $tariffs->list({ %LIST_PARAMS });
 $ADMIN_REPORT{DATE}=$DATE if (! $ADMIN_REPORT{DATE});

 foreach my $line (@$list) {
 	 if ($line->[5] > 0) {
 	   $LIST_PARAMS{TP}=$line->[0];
     my $TP_ID = $line->[0];

 	   $debug_output .= "TP ID: $TP_ID DF: $line->[5] MF: $line->[6] POSTPAID: $line->[12] REDUCTION: $line->[11] EXT_BILL: $line->[13] CREDIT: $line->[14]\n" if ($debug > 1);

 	   my $ulist = $Dv->list({
         ACTIVATE  => "<='$ADMIN_REPORT{DATE}'",
         EXPIRE    => ">'$ADMIN_REPORT{DATE}'",
         STATUS    => 0,
         LOGIN_STATUS => 0,
         TP_ID     => $TP_ID,
         SORT      => 1,
         PAGE_ROWS => 1000000,
         TP_CREDIT => '>=0'
 	   	 });


     foreach my $u (@$ulist) {
     	  #Check bill id and deposit 
         my %user = (
            LOGIN      => $u->[0],  
            UID        => $u->[8],
            BILL_ID    => ($line->[14] > 0) ? $u->[16] : $u->[14],
            REDUCTION  => $u->[15],
            ACTIVATE   => $u->[12],
            DEPOSIT    => $u->[2],
            CREDIT     => ($u->[3] > 0) ? $u->[3] : $line->[7]
           );

        if ($user{BILL_ID} > 0 && defined($user{DEPOSIT})) {
          #print "  UID: $u->[0] / $line->[5] / DEPOSIT: $user{DEPOSIT} / $u->[3] / BILL_ID: $user->{BILL_ID}\n"; 	

          #If deposit is above-zero or TARIF PALIN is POST PAID or PERIODIC PAYMENTS is POSTPAID
          if($user{DEPOSIT} + $user{CREDIT} > 0 || $line->[4] == 1 || $line->[12] == 1 ) {
             #print "  UID: $u->[0] / $line->[5] / DEPOSIT: $u->[2] / $u->[3] / BILL_ID: $u->[12]\n"; 	
             my $sum = $line->[5];
             # IF TP have PARIODIC PAYMENTS USER reduction
             if ($line->[11] == 1 && $user{REDUCTION} > 0) {
               $sum = $sum * (100 - $user{REDUCTION}) / 100;
              }

             my %PARAMS = ( 
               DESCRIBE => "$_DAY_FEE ($TP_ID)",
               DATE     => "$ADMIN_REPORT{DATE} $TIME",
               METHOD   => 1 );


             if ($debug > 4) {
                $debug_output .= " UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
              }
             else {
               $fees->take(\%user, $sum, { %PARAMS } );
               if ($fees->{errno}) {
               	 print "Error: [$fees->{errno}] $fees->{errstr} ";
               	 if ($fees->{errno} == 14 ) {
               	 	 print "[ $user{UID} ] $user{LOGIN} - Don't have money account";
               	  }
               	 print "\n";
               	}
               elsif($debug > 1) {
                 $debug_output .= " UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
                }
              }
           }
        }
       else {
       	  print "[ $user{UID} ] $user{LOGIN} - Don't have money account\n";
        }

      }
 	  }
  }


  $DEBUG .= $debug_output;
  return $debug_output;
}



#**********************************************************
# monthly_fees
#**********************************************************
sub dv_monthly_fees {
 my ($attr) = @_;

 my $debug = $attr->{DEBUG} || 0;
 my $debug_output = '';
 $debug_output .= "Monthly periodic payments\n" if ($debug > 1);
 
 
 use Users;
 
 $LIST_PARAMS{TP_ID} = $attr->{TP_ID} if ($attr->{TP_ID});

 my $users = Users->new($db, $admin, \%conf); 
 my $list = $tariffs->list({ %LIST_PARAMS });


 $ADMIN_REPORT{DATE}=$DATE if (! $ADMIN_REPORT{DATE});
 my ($y, $m, $d)=split(/-/, $ADMIN_REPORT{DATE}, 3);
 my $days_in_month=($m!=2?(($m%2)^($m>7))+30:(!($y%400)||!($y%4)&&($y%25)?29:28));

 $m--;
 my $date_unixtime =  mktime(0, 0, 0, $d, $m, $y - 1900, 0, 0, 0);

 #Get Preview month begin end days
 if ($m == 0) {
   $m = 12;
   $y--;
  }

 $m = sprintf("%02.d", $m);
 my $days_in_pre_month=($m!=2?(($m%2)^($m>7))+30:(!($y%400)||!($y%4)&&($y%25)?29:28));

 my $pre_month_begin = "$y-$m-01";
 my $pre_month_end = "$y-$m-$days_in_pre_month";

 foreach my $line (@$list) {
 	 my $TP_ID       = $line->[0];
 	 my $min_use_sum = $line->[15];
 	 my $abon_distrib= $line->[16];
 	 my $postpaid    = $line->[4];
   my $tp_postpaid = $line->[12];
   my $month_fee   = $line->[6];
   my $activate_date = "<='$ADMIN_REPORT{DATE}'";

   my %used_traffic = ();

   #Monthfee & min use
 	 if ($month_fee > 0 || $min_use_sum > 0) {
 	   $debug_output .= "TP ID: $line->[0] MF: $line->[6] POSTPAID: $line->[12] REDUCTION: $line->[11] EXT_BILL_ID: $line->[13] CREDIT: $line->[14] MIN_USE: $min_use_sum ABON_DISTR: $abon_distrib\n" if ($debug > 1);

 	   #get used  traffic for min use functions
 	   my %processed_users = ();
     if ($min_use_sum > 0 ) {
       next if ($d != $START_PERIOD_DAY && ! $conf{DV_MIN_USER_FULLPERIOD});
       my $interval = "$pre_month_begin/$pre_month_end";
       
       if ($conf{DV_MIN_USER_FULLPERIOD}) {
       	 $activate_date = strftime "%Y-%m-%d", localtime($date_unixtime - 86400 * 30);
       	 $interval      = "$activate_date/$ADMIN_REPORT{DATE}";
       	 $activate_date = "='$activate_date'";
        }
       
       my $report_list = $sessions->reports({ 
                     INTERVAL   => $interval,
                     TP_ID      => $TP_ID,
	   	              });
	  
	     foreach my $l (@$report_list) {
 	  	   $used_traffic{$l->[7]}=$l->[6];
        }
      }

     if ($abon_distrib) {
     	 $month_fee = $month_fee / $days_in_month;
      }    
     
	   my $ulist = $Dv->list({ 
         ACTIVATE   => $activate_date,
         EXPIRE     => ">'$ADMIN_REPORT{DATE}'",
         STATUS     => 0,
         LOGIN_STATUS => 0,
         TP_ID      => $TP_ID,
         SORT       => 1,
         PAGE_ROWS  => 1000000,
         TP_CREDIT  => '>=0'
 	   	 });
 
     my $extfield_count = $Dv->{SEARCH_FIELDS_COUNT};

     foreach my $u (@$ulist) {
       my %user = (
            LOGIN      => $u->[0],  
            UID        => $u->[6+ $extfield_count],
            BILL_ID    => ($line->[13] > 0) ? $u->[14 + $extfield_count] : $u->[12 + $extfield_count],
            REDUCTION  => $u->[13 + $extfield_count],
            ACTIVATE   => $u->[10 + $extfield_count],
            DEPOSIT    => $u->[2],
            CREDIT     => ($u->[3] > 0) ? $u->[3] : $line->[7],
            COMPANY_ID => $u->[7 + $extfield_count]
           );

       $debug_output .= " Login: $user{LOGIN} ($user{UID}) TP_ID: ". ($u->[9 +$extfield_count ]  ) ." Fees: $line->[6] REDUCTION: $user{REDUCTION} DEPOSIT: $u->[2] $u->[3] $u->[10] - $u->[11]\n" if ($debug > 3); 	

      
       if (($user{BILL_ID} && $user{BILL_ID} > 0) && defined($user{DEPOSIT})) {
         my %FEES_PARAMS = (
                            DATE     => $ADMIN_REPORT{DATE},
                            METHOD   => 1 );  

       
         my $sum = 0;
         $START_PERIOD_DAY = ($conf{START_PERIOD_DAY}) ? $conf{START_PERIOD_DAY} : 1;
         
         #***************************************************************
         #Min use Mkaes only 1 of month
         if ($min_use_sum > 0) {
           
           next if ($d != $START_PERIOD_DAY && ! $conf{DV_MIN_USER_FULLPERIOD});
           #Check activation dae
           my $min_use = $min_use_sum;

           if ($user{REDUCTION} > 0) {
             $min_use = $min_use * (100 - $user{REDUCTION}) / 100;
            }

           #Min use Alignment
           if (! $conf{DV_MIN_USER_FULLPERIOD} && $user{ACTIVATE} ne '0000-00-00') {
             	 my ($activated_y, $activated_m, $activated_d)=split(/-/, $user{ACTIVATE}, 3);
             	 my $days_in_month=($activated_m!=2?(($activated_m%2)^($activated_m>7))+30:(!($activated_y%400)||!($activated_y%4)&&($activated_y%25)?29:28)); 
     	         $min_use = sprintf("%.2f", $min_use / $days_in_month * ($days_in_month - $activated_d + $START_PERIOD_DAY));
           	}

           my $used = ($used_traffic{$user{UID}}) ? $used_traffic{$user{UID}} : 0;
           $FEES_PARAMS{DESCRIBE}="$_MIN_USE"; 
           #summary for all company users with same tarif plan
           if ($user{COMPANY_ID}>0 && $processed_users{$user{COMPANY_ID}}) {
           	 next;
            }

           if ($user{COMPANY_ID} > 0) {
             my $company_users = $Dv->list({ TP_ID      => $TP_ID,
                                             COMPANY_ID => $user{COMPANY_ID}
         	                                  });
             my @UIDS = ();
             foreach my $c_user ( @$company_users ) {
         	      push @UIDS, $c_user->[0];
         	      $used += $used_traffic{$user{UID}} if ($used_traffic{$user{UID}});
         	      $processed_users{$user{COMPANY_ID}}++;
              }

             $min_use = $min_use * $processed_users{$user{COMPANY_ID}};
             $FEES_PARAMS{DESCRIBE} .= "$_COMPANY $_LOGINS: ". join(', ', @UIDS);
            }

           #Get Fees sum for min_user
           if ($conf{MIN_USE_FEES_CONSIDE})	{
       	     $fees->list({ UID     => $user{UID},
       	     	             DATE    => ($user{ACTIVATE} ne '0000-00-00') ? ">=$user{ACTIVATE}" : $DATE,
       	     	             METHODS => "$conf{MIN_USE_FEES_CONSIDE}" 
       	     	             });
       	     $used += $fees->{SUM} if ($fees->{SUM});
            }

           $debug_output .=  "  USED: $used\n" if ($debug > 3);
           #Make payments
           next if ($used >= $min_use);

           $sum = $min_use - $used;
           if ($line->[11] == 1 && $user{REDUCTION} > 0) {
             $sum = $sum * (100 - $user{REDUCTION}) / 100;
            }
           
           
           if($postpaid == 1 || $user{DEPOSIT} + $user{CREDIT} > 0 || $tp_postpaid == 1) {
              
              if ($d == $START_PERIOD_DAY) {
                if ($debug > 4) {
                  $debug_output .= " UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
                 }
                else {
                  $fees->take(\%user, $sum, { %FEES_PARAMS } );  

                  $debug_output .= " $user{LOGIN}  UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n" if ($debug > 0);
                  if ( $user{ACTIVATE} ne '0000-00-00') {
                    $users->change($user{UID}, { 
         	                        UID      => $user{UID},
        	                        ACTIVATE => '0000-00-00' });
        	          }
                 }
               }
             }
           
                  
 
          }
         #***************************************************************
         #Month Fee
         else {
           #Make sum 
           $sum = $month_fee;
    
           if ($line->[11] == 1 && $user{REDUCTION} > 0) {
             $sum = $sum * (100 - $user{REDUCTION}) / 100;
            }


           #If deposit is above-zero or TARIF PALIN is POST PAID or PERIODIC PAYMENTS is POSTPAID
           if($postpaid == 1 || $user{DEPOSIT} + $user{CREDIT} > 0 || $tp_postpaid == 1){

              #take fees in first day of month
              $FEES_PARAMS{DESCRIBE}="$_MONTH_FEE ($TP_ID)";  
              
              $FEES_PARAMS{DESCRIBE} .= " - $_ABON_DISTRIBUTION" if ($abon_distrib);

              if (($user{ACTIVATE} eq '0000-00-00' and $d == $START_PERIOD_DAY) || $abon_distrib) {
                if ($debug > 4) {
                  $debug_output .= " UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
                 }
                else {
                  $fees->take(\%user, $sum, { %FEES_PARAMS } );  
                  $debug_output .= " $user{LOGIN}  UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n" if ($debug > 0);
                 }
               }
             # If activation set to monthly fees taken throught 30 days
              elsif($user{ACTIVATE} ne '0000-00-00') {
   	            my ($activate_y, $activate_m, $activate_d)=split(/-/, $user{ACTIVATE}, 3);
                $activate_m--;
                my $active_unixtime =  mktime(0, 0, 0, $activate_d, $activate_m, $activate_y - 1900, 0, 0, 0);
                if ($date_unixtime - $active_unixtime > 30 * 86400) {
                  if ($debug > 4) {
                    $debug_output .= " $user{LOGIN} UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
                   }
                  else {
                    $fees->take(\%user, $sum, { %FEES_PARAMS } );
                    $debug_output .= " $user{LOGIN} UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION} CHANGE ACTIVATE\n" if ($debug > 0);
                    if ($fees->{errno}) {
                    	print "Error: [$fees->{errno}] $fees->{errstr} ";
                    	if ($fees->{errno} == 14 ) {
                 	 	    print "[ $user{UID} ] $user{LOGIN} - Don't have money account";
               	       }
               	      print "\n";
               	     }
                    else {
                      $users->change($user{UID}, { 
                	                        UID      => $user{UID},
                	                        ACTIVATE => $ADMIN_REPORT{DATE} } 
                 	             );
                     }
                   }
                 }
                elsif ($abon_distrib) {
                	$fees->take(\%user, $sum, { %FEES_PARAMS } );
                  $debug_output .= " $user{LOGIN} UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION} CHANGE ACTIVATE\n" if ($debug > 0);
                 }
                 #print "   $user{LOGIN} $line->[6] $user{DEPOSIT} $USER{CREDIT} $u->[10] - $u->[11]\n"; 	
               }
             }
         
          }
        }
       else {
      	 print "[ $user{UID} ] Don't have money account\n";
        }
 	  }
  }
}


#=====================================

#Make traffic recalculation for expration
if ($d == 1) {
  $list = $tariffs->list({ %LIST_PARAMS });
  $debug_output .= "-- Total month price\n";
  use Billing;
  my $Billing = Billing->new($db, $CONF);

  #my %$processed_users = ();
  
  foreach my $tp_line (@$list) {
     my $ti_list = $tariffs->ti_list({ TP_ID => $tp_line->[0] });
     next if ($tariffs->{TOTAL} != 1);

     foreach my $ti (@$ti_list) {

       my $tt_list = $tariffs->tt_list({ TI_ID => $ti->[0] });
       next if ($tariffs->{TOTAL} != 1);
       
       my %expr_hash = ();
     	 foreach my $tt ( @$tt_list ) {
     	 	 my $expression = $tt->[8];
     	 	 next if ($expression !~ /MONTH_TRAFFIC_/);
         
         $expression =~ s/MONTH_TRAFFIC/TRAFFIC/g;

         $debug_output .= "TP: $tp_line->[0] TI: $ti->[0] TT: $tt->[0]\n";
         $debug_output .= "  Expr: $expression\n" if ($debug > 3);
         
         $expr_hash{$tt->[0]} = $expression;
         

     	  }

       next if (! defined($expr_hash{0}));

   	   $ulist = $Dv->list({ 
           ACTIVATE   => "<='$ADMIN_REPORT{DATE}'",
           EXPIRE     => ">'$ADMIN_REPORT{DATE}'",
           STATUS     => 0,
           LOGIN_STATUS => 0,
           TP_ID      => $tp_line->[0],
           SORT       => 1,
           PAGE_ROWS  => 1000000,
           TP_CREDIT  => '>=0',
           COMPANY_ID => '>=0',
 	     	 });

       my $extfield_count = $Dv->{SEARCH_FIELDS_COUNT};
       foreach my $u (@$ulist) {

         %user = (
            LOGIN      => $u->[0],  
            UID        => $u->[6+ $extfield_count],
            BILL_ID    => ($tp_line->[13] > 0) ? $u->[14 + $extfield_count] : $u->[12 + $extfield_count],

            REDUCTION  => $u->[13 + $extfield_count],
            ACTIVATE   => $u->[10 + $extfield_count],
            DEPOSIT    => $u->[2],
            CREDIT     => ($u->[3] > 0) ? $u->[3] : $line->[7],
            COMPANY_ID => $u->[7 + $extfield_count]
           );

         $debug_output .= " Login: $u->[0] ($u->[8])  TP_ID: $u->[11] Fees: - REDUCTION: $u->[15] $u->[2] $u->[3] $u->[10] - $user{ACTIVATE}\n" if ($debug > 3); 	

#Summary for company users
#         my @UIDS  = ();
#         if ($$processed_users{$user{COMPANY_ID}}) {
#         	 next;
#          }
#
#         if ($user{COMPANY_ID}) {
#           my $company_users = $ulist = $Dv->list({ TP_ID      => $tp_line->[0],
#                                                    COMPANY_ID => $user{COMPANY_ID}
#         	                                        });
#           $$processed_users{$user{COMPANY_ID}}=1;
#         
#           foreach my $c_user ( @$company_users ) {
#         	    push @UIDS, $c_user->[7];
#            }
#
#           print "$user{LOGIN} hello $user{COMPANY_ID} // ";
#           print @UIDS ,"\n";
#          }

         $Billing->{PERIOD_TRAFFIC}=undef;
         my $RESULT = $Billing->expression($user{UID}, \%expr_hash, 
                                                          { START_PERIOD => $user{ACTIVATE},
  	                                                        debug        => 0,
  	                                                        #UIDS         => ($#UIDS > -1) ? join(',', @UIDS) : '',
  	                                                        #ACCOUNTS_SUMMARY => $#UIDS+1
  	                                                        });
  	                                                        
         my $message = '';
         my $sum     = 0;
 
         my %FEES_PARAMS = (
                            DATE     => $ADMIN_REPORT{DATE},
                            METHOD   => 0 );  

         if ($RESULT->{TRAFFIC_IN}) {
         	 $FEES_PARAMS{DESCRIBE} = "$_USED $_TRAFFIC: $RESULT->{TRAFFIC_IN} SUM: $RESULT->{PRICE_IN}";
         	 $sum     = $RESULT->{TRAFFIC_IN} * $RESULT->{PRICE_IN};
          }

         if ($RESULT->{TRAFFIC_OUT}) {
         	 $FEES_PARAMS{DESCRIBE} = "$_USED $_TRAFFIC: $RESULT->{TRAFFIC_OUT} SUM: $RESULT->{PRICE_OUT}";
         	 $sum     = $RESULT->{TRAFFIC_OUT} * $RESULT->{PRICE_OUT};
          }
         elsif ($RESULT->{TRAFFIC_SUM}) {
         	 $FEES_PARAMS{DESCRIBE} = "$_USED $_TRAFFIC: $RESULT->{TRAFFIC_SUM} SUM: $RESULT->{PRICE}";
         	 $sum     = $RESULT->{TRAFFIC_SUM} * $RESULT->{PRICE};
          }

         $fees->take(\%user, $sum, { %FEES_PARAMS } );  
        }


      }
   } 	
  	
 }

  $DEBUG .= $debug_output;
  return $debug_output;
}

#**********************************************************
# user_warnings
# 
#**********************************************************
sub dv_users_warning_messages {

 $ADMIN_REPORT{USERS_WARNINGS} = sprintf("%-14s| %4s|%-20s| %9s| %8s|\n", $_LOGIN, 'TP', $_TARIF_PLAN, $_DEPOSIT, $_CREDIT).
   "---------------------------------------------------------------\n";
 if (defined($ADMIN_REPORT{NO_USERS_WARNINGS})) {
   return 0;
  }


my %LIST_PARAMS = (USERS_WARNINGS => 1 ) ;

my $list = $Dv->list( { %LIST_PARAMS } );

return 0 if ($Dv->{TOTAL} < 1);
my %USER_INFO = ();

foreach my $line (@$list) {
  #u.id, u.email, u.tp_id, u.credit, u.deposit, tp.name, tp.uplimit

  $USER_INFO{LOGIN}  = $line->[0];
  $USER_INFO{TP_NAME}= $line->[5];
  $USER_INFO{TP_ID}  = $line->[2];
  $USER_INFO{DEPOSIT}= $line->[4];
  $USER_INFO{CREDIT} = $line->[3];
  
  my $email = ((! defined($line->[1])) || $line->[1] eq '') ? "$line->[0]\@$conf{USERS_MAIL_DOMAIN}" : "$line->[1]";
  
 
  $ADMIN_REPORT{USERS_WARNINGS} .= sprintf ("%-14s| %4d|%-20s| %9.4f| %8.2f|\n", 
    $USER_INFO{LOGIN}, 
    $USER_INFO{TP_ID}, 
    $USER_INFO{TP_NAME},  
    $USER_INFO{DEPOSIT}, 
    $USER_INFO{CREDIT});
  
  my $message = $html->tpl_show(_include('dv_users_warning_messages', 'Dv'), \%USER_INFO, { notprint => 1 });

  sendmail("$conf{ADMIN_MAIL}", 
              "$email", 
              "$_BILL_INFO", 
              "$message", 
              "$conf{MAIL_CHARSET}", 
              "2 (High)");
}

$ADMIN_REPORT{USERS_WARNINGS} .= "---------------------------------------------------------------
$_TOTAL: $Dv->{TOTAL}\n";


}



#**********************************************************
# form_traf_tarifs()
#**********************************************************
sub dv_traf_tarifs {
  my ($attr) = @_;
  my $tarif_plan;

  
if (defined($FORM{tt})) {
  $tarif_plan = $attr->{TP};
  $tarif_plan->tt_defaults();
  $tarif_plan->{TI_ID} = $FORM{tt};



  if($FORM{add}) {
    $tarif_plan->tt_add({ %FORM });
    if(! $tarif_plan->{errno}) {
      $html->message('info', $_INFO, "$_ADDED");
     }
   }
  elsif($FORM{change}) {
    $FORM{TI_ID}=$FORM{tt};
    $tarif_plan->tt_change({ %FORM });
    
    if(! $tarif_plan->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED"); 
     }
   }
 	elsif(defined($FORM{chg})) {
    $tarif_plan->tt_info({ TI_ID => $FORM{tt}, TT_ID => $FORM{chg} });
    if(! $tarif_plan->{errno}) {
      $html->message('info', $_INFO, "$_CHANGING");  	
     }
    $tarif_plan->{ACTION}='change';
    $tarif_plan->{LNG_ACTION}=$_CHANGE;
   }
  elsif(defined($FORM{del}) && defined($FORM{is_js_confirmed}) ) {
    $tarif_plan->tt_del({ TI_ID => $FORM{tt}, TT_ID => $FORM{del} });
    if(! $tarif_plan->{errno}) {
    	$html->message('info', $_INFO, "$_DELETED"); 
     }
  }


  if ($tarif_plan->{errno}) {
    my $messages = "($tarif_plan->{errstr})" if($tarif_plan->{errstr});
    $html->message('err', $_ERROR, "[$tarif_plan->{errno}] $err_strs{$tarif_plan->{errno}} $messages");	
   }


  my $list = $tarif_plan->tt_list({ TI_ID => $FORM{tt}, form => 1 });
  $tarif_plan->{TT_ID}=$tarif_plan->{TOTAL} if (! defined($FORM{chg}));
  
 
   
 }
elsif($attr->{TP}) {
  $tarif_plan = $attr->{TP};
  $tarif_plan->tt_defaults();

  if ($FORM{change}) {

    
    $tarif_plan->tt_change( { 
    	TT_DESCRIBE_0  => $FORM{TT_DESCRIBE_0},
      TT_PRICE_IN_0  => $FORM{TT_PRICE_IN_0},
      TT_PRICE_OUT_0 => $FORM{TT_PRICE_OUT_0},
      TT_NETS_0      => $FORM{TT_NETS_0},
      TT_PREPAID_0   => $FORM{TT_PREPAID_0},
      TT_SPEED_0     =>     $FORM{TT_SPEED_0},

      TT_DESCRIBE_1  => $FORM{'TT_DESCRIBE_1'},
      TT_PRICE_IN_1  => $FORM{TT_PRICE_IN_1},
      TT_PRICE_OUT_1 => $FORM{TT_PRICE_OUT_1},
      TT_NETS_1      => $FORM{TT_NETS_1},
      TT_PREPAID_1   => $FORM{TT_PREPAID_1},
      TT_SPEED_1     => $FORM{TT_SPEED_1},

      TT_DESCRIBE_2 => $FORM{TT_DESCRIBE_2},
      TT_NETS_2     => $FORM{TT_NETS_2},
      TT_SPEED_2    => $FORM{TT_SPEED_2},

      EX_FILE_PATH  => "$conf{DV_EXPPP_NETFILES}"
    });


    if ($tarif_plan->{errno}) {
      my $messages = "($tarif_plan->{errstr})" if($tarif_plan->{errstr});
      $html->message('err', $_ERROR, "[$tarif_plan->{errno}] $err_strs{$tarif_plan->{errno}} $messages");	
     }
    else {
      $html->message('info', $_INFO, "$_INTERVALS");
     }
   }

   my $list = $tarif_plan->tt_list($FORM{ti});
 }
  


}

#***********************************************************
# dv_sheduler
#***********************************************************
sub dv_sheduler {
	my ($type, $action, $uid)=@_;

  my $user = $Dv->info($uid);  	
  if ($type eq 'tp') {
    $Dv->change({ UID   => $uid, 
    	            TP_ID => $action 
    	          });

    if ($Dv->{errno} && $Dv->{errno} == 15) {
    	return $Dv->{errno};
     }
   }

  return 0;
}


#***********************************************************
# dv_report
#***********************************************************
sub dv_report {
	my ($type, $attr)=@_;
  my $REPORT = "Module: DV\n";
  
  %LIST_PARAMS = %{$attr->{LIST_PARAMS}} if (defined($attr->{LIST_PARAMS}));

  
if ($type eq 'daily') {
	$REPORT .= sprintf ("%-14s| %5s| %9s| %9s| %10s| %9s|\n", $_LOGIN, $_SESSIONS, 
    $_TRAFFIC, "$_TRAFFIC 2", $_DURATION, $_SUM);
  $REPORT .= "---------------------------------------------------------\n";

  $list = $sessions->reports( { %LIST_PARAMS } );
  foreach my $line (@$list) {
   $REPORT .= sprintf ("%-14s| %5d| %9s| %9s| %8s| %9.4f|\n", 
     $line->[1], 
     $line->[2], 
     int2byte($line->[3]), 
     int2byte($line->[4]), 
     $line->[5], 
     $line->[6]);
   }

  $REPORT .= "---------------------------------------------------------\n";
  $REPORT .= sprintf("%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n", 
   $_USERS,       $sessions->{USERS}, 
   $_SESSIONS,    $sessions->{SESSIONS}, 
   $_TRAFFIC,     int2byte($sessions->{TRAFFIC}), 
   "$_TRAFFIC 2", int2byte($sessions->{TRAFFIC_2}), 
   $_DURATION,    $sessions->{DURATION}, 
   $_SUM,         $sessions->{SUM});

 }
elsif ($type eq 'monthly') {
  $REPORT .= sprintf (" %12s| %5s| %5s| %10s| %10s| %12s| %9s|\n", $_DATE, $_USERS, $_SESSIONS, 
    $_TRAFFIC, "$_TRAFFIC 2", $_DURATION, $_SUM);
  $REPORT .= "---------------------------------------------------------\n";
 
  my $list = $sessions->reports( { %LIST_PARAMS } );

  foreach my $line (@$list) {
#   u.id, count(l.id), sum(l.sent + l.recv), sum(l.sent2 + l.recv2), sec_to_time(sum(l.duration)), sum(l.sum), l.id
    $REPORT .= sprintf (" %12s| %5s| %5s| %10s| %10s| %12s| %9.4f|\n", 
     $line->[0], 
     $line->[1], 
     $line->[2], 
     int2byte($line->[3]), 
     int2byte($line->[4]), 
     $line->[5], 
     $line->[6]);
   }

  $REPORT .= "---------------------------------------------------------\n";
  $REPORT .= sprintf("%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n", 
    $_USERS,       $sessions->{USERS}, 
    $_SESSIONS,    $sessions->{SESSIONS}, 
    $_TRAFFIC,     int2byte($sessions->{TRAFFIC}), 
    "$_TRAFFIC 2", int2byte($sessions->{TRAFFIC_2}), 
    $_DURATION,    $sessions->{DURATION}, 
    $_SUM,         $sessions->{SUM});
}

 
  return $REPORT;
}










#*******************************************************************
# Make cards
#*******************************************************************
sub dv_cards {
	require "Abills/modules/Cards/webinterface";

  my $dv_tpl = dv_wizard_user({ OUTPUT2RETURN => 1,
  	                            NO_EXTRADATA  => 1,
  	                            TPLS          => { '2:' => '',
                                                   '3:' => '' } 
                              });

	my $return = cards_users_add({ EXTRA_TPL => $dv_tpl  });
  

  $FORM{add}=1;
  if (scalar keys %FORM_BASE < 1) {
  	%FORM_BASE=%FORM;
   }

  my $CREATED = '';
  my $added_count = 0;


  my $table = $html->table({ width      => '100%',
                             border     => 1,
                             title      => ["$_LOGIN", "ID", "$_INFO"],
                             cols_align => ['left', 'right', 'right'],
                            });



  if (ref($return) eq 'ARRAY') {
  	 foreach my $line (@$return) {
        %FORM = ();
     	  %FORM = %FORM_BASE;

  	 	  while(my($k, $v)= each %$line) {
  	 	  	 $FORM{$k}=clearquotes($v);
  	 	    }

  	 	  $FORM{'1.LOGIN'}      = $line->{LOGIN};
  	 	  $FORM{'1.PASSWORD'}   = $line->{PASSWORD};
  	 	  $FORM{'1.CREATE_BILL'}= 1;
        
        $line->{UID} = dv_wizard_user({ SHORT_REPORT => 1 });
       
  	 	  if ( $line->{UID} < 1) {
  	 	  	 $html->message('err', "$_ERROR", "$_LOGIN: '$line->{LOGIN}'");
  	 	  	 
  	 	  	 last if (! $line->{SKIP_ERRORS} );
  	 	   }
  	 	  else {
  	 	    #Confim card creation
  	 	    $added_count++;
  	 	    $table->addrow("$FORM{'1.LOGIN'}", "$UID", "$FORM{ex_message}");
  	 	  	if(cards_users_gen_confim({ %$line, SUM => ($FORM{'5.SUM'}) ? $FORM{'5.SUM'} : 0  }) == 0) {
  	 	  		 return 0;
  	 	  		}
  	 	   }
  	  }

   }
  

if ($added_count > 0) {
  $html->message('info', $_INFO, "$_ADDED:  $added_count");
  print $table->show();
}

}


#*******************************************************************
#
#*******************************************************************
sub dv_wizard_user {
	my ($attr) = @_;

  my $fees     = Finance->fees($db, $admin, \%conf);
  my $payments = Finance->payments($db, $admin, \%conf);
  my $users    = Users->new($db, $admin, \%conf); 


  if ($FORM{print}) {
    require "Abills/modules/Docs/webinterface";
    if ($FORM{PRINT_CONTRACT}) {
#    $Dv->info($FORM{UID});
#    $tariffs->info($Dv->{TP_ID});
#    
#    
#    #Order1 Section
#    $Dv->{ORDER_NUM}   = 1;
#    $Dv->{ORDER_NAME}  = $_ABON;
#    $Dv->{ORDER_COUNT} = 1;
#    $Dv->{ORDER_PRICE} = $tariffs->{MONTH_FEE};
#    $Dv->{ORDER_SUM}   = $tariffs->{MONTH_FEE};
#    $Dv->{ORDER_PRICE_WITHOUT_VAT} = $tariffs->{MONTH_FEE};
#    $Dv->{ORDER_SUM_WITHOUT_VAT}   = $tariffs->{MONTH_FEE};
     docs_contract({ %$Dv });
    } 
   else {
     docs_account();
    }
   return 0;
  }

  my %add_values = ();

  if ($FORM{add}) {

  	foreach my $k ( sort %FORM) {
      if ($k =~ m/^[0-9]+\.[_a-zA-Z0-9]+$/) { #  && $k !~ /__|[a-z]/) {
        $k =~ s/%22//g;
        my ($id, $main_key)=split(/\./, $k, 2);
        $add_values{$id}{$main_key}=$FORM{$k};
       }
  	 }

    #print $table->show();
    # Password
    $add_values{1}{GID} = $admin->{GID} if ($admin->{GID});
    my $user=$users->add({ %{$add_values{1}} });
    my $message = '';
    if (! $user->{errno}) {
   	  $UID = $user->{UID};
   	  $user = $user->info($UID);
      
      #2 
      if (defined($FORM{'2.newpassword'}) && $FORM{'2.newpassword'} ne '') {
        if (length($FORM{'2.newpassword'}) < $conf{PASSWD_LENGTH}) {
          $html->message('err', "$_PASSWD : $_ERROR", "$err_strs{6}");
         }
        elsif ($FORM{'2.newpassword'} eq $FORM{'2.confirm'}) {
          $add_values{2}{PASSWORD}=$FORM{'2.newpassword'};
          $add_values{2}{UID}=$UID;
          $add_values{2}{DISABLE}=$FORM{'1.DISABLE'};
         }
        elsif($FORM{'2.newpassword'} ne $FORM{'2.confirm'}) {
          $html->message('err', "$_PASSWD : $_ERROR", "$err_strs{5}");
         }

        $user->change($UID, { %{$add_values{2}} });
        
        if ($conf{external_useradd}) {
          if (! _external($conf{external_useradd}, { LOGIN => $add_values{1}{LOGIN}, %{$add_values{2}} }) ) {
       	    return 0;
           }
         }
       }
      
      #3 personal info
      $user->pi_add({ UID => "$UID", %{$add_values{3}} });

      #5 Payments section
      if ($FORM{'5.SUM'}) {
        if($FORM{'5.SUM'} + 0 > 0) {
          my $er = ($FORM{'5.ER'}) ? $payments->exchange_info($FORM{'5.ER'}) : { ER_RATE => 1 } ;  
          $payments->add($user, { %{$add_values{5}}, ER => $er->{ER_RATE} } );  

          if ($payments->{errno}) {
            $html->message('err', "$_PAYMENTS : $_ERROR", "[$payments->{errno}] $err_strs{$payments->{errno}}");	
            return 0;
           }
          else {
            $message = "$_SUM: $FORM{'5.SUM'} $er->{ER_SHORT_NAME}";
           }
         }
        elsif($FORM{'5.SUM'} + 0 < 0) {
          my $er = ($FORM{'5.ER'}) ? $payments->exchange_info($FORM{'5.ER'}) : { ER_RATE => 1 } ;  
          
          
          $fees->take($user, abs($FORM{'5.SUM'}), { DESCRIBE => 'MIGRATION',  ER => $er->{ER_RATE} } );  

          if ($fees->{errno}) {
            $html->message('err', "$_ERROR : $_FEES", "[$fees->{errno}] $err_strs{$fees->{errno}}");	
            return 0;
           }
          else {
            $message = "$_SUM: $FORM{'5.SUM'} $er->{ER_SHORT_NAME}";
           }
         }
       }

      #4 Dv
   	  $Dv->add({ UID => $UID, %{$add_values{4}} });
      if ($Dv->{errno}) {
        $html->message('err', "Dv:$_ERROR", "Dv Modules [$Dv->{errno}] $err_strs{$Dv->{errno}}");	
        return 0;
       }
      else {
        if (! $add_values{4}{STATUS} && $Dv->{TP_INFO}->{MONTH_FEE} > 0) {
          $Dv->{UID}=$UID;
          $Dv->{ACTIVATE}=$add_values{1}{ACTIVATE};
          dv_get_month_fee($Dv);
         }
       }


      # Add E-Mail account
      my $Mail;
      if (in_array('Mail', \@MODULES) && $FORM{'6.USERNAME'}) {
        require "Abills/modules/Mail/webinterface";
        $Mail = Mail->new($db, $admin, \%conf);
        
        $FORM{'6.newpassword'} = $FORM{'6.PASSWORD'} if ($FORM{'6.PASSWORD'});

        $Mail->mbox_add({ UID => "$UID", 
        	                %{$add_values{6}}, 
        	                PASSWORD => $FORM{'6.newpassword'},
        	             });
        $Mail->{PASSWORD}=$FORM{'6.newpassword'};

        if ($Mail->{errno}) {
          $html->message('err', "E-MAIL : $_ERROR", "[$Mail->{errno}] $err_strs{$Mail->{errno}}");	
          return 0;
         }
        elsif ($FORM{'6.SEND_MAIL'}) {
      	  my $message =  $html->tpl_show(_include('mail_test_msg', 'Mail'), $Mail, { notprint => 1 });
      	  sendmail("$conf{ADMIN_MAIL}", 
      	   "$Mail->{USER_EMAIL}", 
      	   "Test mail", 
      	   "$message", 
      	   "$conf{MAIL_CHARSET}", 
      	   "");
        
         }

        $Mail = $Mail->mbox_info({ MBOX_ID => $Mail->{MBOX_ID} });
       	$Mail->{EMAIL_ADDR} = $Mail->{USERNAME} . '@' . $Mail->{DOMAIN};
       }
      
      # Info
      my $dv = $Dv->info($UID);
      my $pi = $user->pi({ UID => $UID });
      $user  = $user->info($UID, { SHOW_PASSWORD => 1 });
      
     
      
      if (! $attr->{SHORT_REPORT}) {
        $FORM{ex_message}=$message;
        $html->message('info', $_ADDED, "LOGIN: $add_values{1}{LOGIN} UID: $UID  $message");
        $html->tpl_show(templates('form_user_info'), { %$user, %$pi, DATE => $DATE, TIME => $TIME } );
        $dv->{STATUS}=$service_status[$dv->{STATUS}];
        $html->tpl_show(_include('dv_user_info', 'Dv'), $dv);
        $html->tpl_show(_include('mail_user_info', 'Mail'), $Mail) if ($Mail);

        if (in_array('Docs', \@MODULES) ) {
          $html->message('info', $_INFO, "$_PRINT ". $html->button("$_CONTRACT", "qindex=$index&UID=$UID&PRINT_CONTRACT=$UID&print=1". (($conf{DOCS_PDF_PRINT}) ? '&pdf=1' : '' ), {ex_params => 'target=_new'  }) );
         }
        
        #If docs module enable make account
        if (in_array('Docs', \@MODULES)) {
          $tariffs->info($dv->{TP_ID});
          $LIST_PARAMS{UID} = $UID;

          if ($tariffs->{MONTH_FEE} + $tariffs->{ACTIV_PRICE} > 0) {
            require "Abills/modules/Docs/lng_$html->{language}.pl";
            require "Abills/modules/Docs/webinterface";

            $FORM{DATE}      = $DATE;
            $FORM{CUSTOMER}  = $pi->{FIO} || '-';
            $FORM{PHONE}     = $pi->{PHONE};
            $FORM{UID}       = $UID;

            $FORM{'IDS'}     = '1, 2';
            $FORM{'ORDER_1'}= "$_DV";
            $FORM{'COUNT_1'}= 1;
            $FORM{'UNIT_1'}  = 0;
            $FORM{'SUM_1'}   = $tariffs->{MONTH_FEE};

            if ($tariffs->{ACTIV_PRICE}) {
              $FORM{'ORDER_2'}= "$_ACTIVATE";
              $FORM{'COUNT_2'}= 1;  
              $FORM{'UNIT_2'}  = 0;
              $FORM{'SUM_2'}   = $tariffs->{ACTIV_PRICE};
             }

            $FORM{'create'}  = 1;
        	  docs_account();
        	}
        }
       }

      return $UID;
    }
   else {
     $html->message('err', "[$users->{errno}] $err_strs{$users->{errno}}", "$_LOGIN: '$add_values{1}{LOGIN}'");	
     return 0 if ($attr->{SHORT_REPORT});
    }
   
  } 


  my $users_defaults = $users->defaults();
  $users_defaults->{DISABLE}=($users_defaults->{DISABLE} == 1) ? ' checked' : '';
  $users_defaults->{GID} = sel_groups();
  #Info fields
  
  
  if (! $attr->{NO_EXTRADATA}) {
    $users_defaults->{EXDATA}  =  $user_info->{EXDATA} .=  $html->tpl_show(templates('form_user_exdata_add'), { CREATE_BILL => ' checked' }, { notprint => 1 });
    $users_defaults->{EXDATA} .=  $html->tpl_show(templates('form_ext_bill_add'), { CREATE_EXT_BILL => ' checked' }, { notprint => 1 }) if ($conf{EXT_BILL_ACCOUNT});
    
#    $html->tpl_show(templates('form_user_exdata'), 
#       { CREATE_BILL  => ' checked' }, 
#       { notprint => 1 });
   }
  
  my $dv_defaults = $Dv->defaults();
  $dv_defaults->{STATUS_SEL}=$html->form_select('STATUS', 
                                          { 
 	                                          SELECTED     => $FORM{STATUS} || undef,
 	                                          SEL_ARRAY    => \@service_status,
 	                                          ARRAY_NUM_ID => 1
 	                                        });

  $payments->{SEL_METHOD} =  $html->form_select('METHOD', 
                                { SELECTED      => $FORM{METHOD} || undef,
 	                                SEL_ARRAY     => \@PAYMENT_METHODS,
 	                                ARRAY_NUM_ID  => 1
 	                               });
  $payments->{SUM} = '0.00';

  my $er = $payments->exchange_list();
  $payments->{SEL_ER} = "<select name=ER>\n";
  $payments->{SEL_ER} .= "<option value=''>\n";
  foreach my $line (@$er) {
    $payments->{SEL_ER} .= "<option value=$line->[4]";
    $payments->{SEL_ER} .= ">$line->[1] : $line->[2]\n";
   }
  $payments->{SEL_ER} .= "</select>\n";

  $dv_defaults->{TP_ID} = $html->form_select('TP_ID', 
                                         { 
 	                                         SELECTED  => $user->{TP_ID},
 	                                         SEL_MULTI_ARRAY   => $tariffs->list(),
 	                                         MULTI_ARRAY_KEY   => 0,
 	                                         MULTI_ARRAY_VALUE => 1,
 	                                        });
  $dv_defaults->{CALLBACK} = '';
 	             
 my $password_form;                           
 $password_form->{GEN_PASSWORD}=mk_unique_value(8);
 
 #Info fields
  my %pi_form = ();
   
  my $i=0; 
  
  my $list = $users->config_list({ PARAM => 'ifu*', SORT => 2});

  foreach my $line (@$list) {
    my $field_id   = '';
    if ($line->[0] =~ /ifu(\S+)/) {
    	$field_id = "3.".$1;
      my($position, $type, $name)=split(/:/, $line->[1]);

      my $input = '';
      if ($type == 2) {
        $input = $html->form_select("$field_id", 
                                { SELECTED          => $FORM{$field_id},
 	                                SEL_MULTI_ARRAY   => $users->info_lists_list( { LIST_TABLE => $field_id.'_list' }), 
 	                                MULTI_ARRAY_KEY   => 0,
 	                                MULTI_ARRAY_VALUE => 1,
 	                                SEL_OPTIONS       => { 0 => '-N/S-'},
 	                                NO_ID             => 1
 	                               });
    	
       }
      elsif ($type == 4) {
      	$input = $html->form_input($field_id, 1, { TYPE  => 'checkbox', STATE => ($FORM{$field_id}) ? 1 : undef  });
       }
      else {
    	  $input = $html->form_input($field_id, "", { SIZE => 40 });
       }
    
  	  $pi_form{INFO_FIELDS}.= "<tr><td>$name:</td><td>$input</td></tr>\n";
      $i++;
     }
   }
 
 $dv_defaults->{JOIN_SERVICE}='';
 my %tpls = (
	            "1:$_LOGIN::"    => $html->tpl_show(templates('form_user'), $users_defaults,    { notprint => 1, ID => 'FORM_USER'     }),  
	            "2:$_PASSWD::"   => $html->tpl_show(templates('form_password'), $password_form, { notprint => 1, ID => 'FORM_PASSWORD' }),
	            "3:$_INFO::"     => $html->tpl_show(templates('form_pi'), \%pi_form,            { notprint => 1, ID => 'FORM_PI'       }), 
	            "4:Dialup/VPN::" => $html->tpl_show(_include('dv_user', 'Dv'), $dv_defaults,    { notprint => 1, ID => 'DV_USER'       }),
 	            "5:$_PAYMENTS::" => $html->tpl_show(templates('form_payments'), $payments,      { notprint => 1, ID => 'FORM_PAYMENTS' }),
             );
 
 #If mail module added
 if (in_array('Mail', \@MODULES)) {
   require "Abills/modules/Mail/webinterface";
   my $Mail = Mail->new($db, $admin, \%conf);

   $Mail->{PASSWORD} = qq{  
	<tr><td>$_PASSWD:</td><td><input type="password" id="text_pma_pw_mail" name="newpassword" title="$_PASSWD" onchange="pred_password.value = 'userdefined';" /></td></tr>
  <tr><td>$_CONFIRM_PASSWD:</td><td><input type="password" name="confirm" id="text_pma_pw2_mail" title="$_CONFIRM" onchange="pred_password.value = 'userdefined';" /></td></tr>
  <tr><td>  <input type="button" id="button_generate_password_mail" value="$_GET $_USER $_PASSWD" onclick="CopyInputField('text_pma_pw', 'generated_pw_mail');" />
          <input type="button" id="button_copy_password_mail" value="Copy" onclick="CopyInputField('generated_pw_mail', 'text_pma_pw_mail'); CopyInputField('generated_pw_mail', 'text_pma_pw2_mail')" />
    </td><td><input type="text" name="generated_pw" id="generated_pw_mail" /></td></tr>
     };

   $Mail->{SEND_MAIL}='checked';

   $Mail->{DOMAINS_SEL}=$html->form_select('DOMAIN_ID', 
                                { 
 	                                SELECTED          => $Mail->{DOMAIN_ID},
 	                                SEL_MULTI_ARRAY   => $Mail->domain_list(),
 	                                MULTI_ARRAY_KEY   => 8,
 	                                MULTI_ARRAY_VALUE => 0,
 	                                SEL_OPTIONS       => { 0 => '-N/S-'},
 	                                NO_ID             => 1
 	                               });


    $tpls{"6:E-Mail::"}=$html->tpl_show(_include('mail_box', 'Mail'), $Mail,  { notprint => 1, ID => 'MAIL_BOX' });
  } 
 
 if ($attr->{TPLS}) {
   while(my($k, $v)=each %{ $attr->{TPLS} } ) {
   	  $tpls{$k}=$v;
   	  #print "$k, $v<br>";   	
     }
  }

	my $wizard;
	
  my $template='';
  my @sorted_templates = sort keys %tpls;;
 
 foreach my $key (@sorted_templates) {
     my($n, $descr, $pre, $post)=split(/:/, $key, 4);

     $template .= "<tr bgcolor=\"$_COLORS[0]\"><th>$descr</th></tr>\n";
     #$wizard = $pre;
     my $sub_tpl .= $html->tpl_show($tpls{"$key"}, $wizard, { notprint => 1, ID => "$descr" });
     $sub_tpl =~ s/(<input .*?UID.*?>)//gi;
     $sub_tpl =~ s/(<input .*?index.*?>)//gi;
     $sub_tpl =~ s/name=([A-Z_]+)/name=$n.$1/gi;
     $sub_tpl =~ s/name="([A-Z_]+)"/name=$n.$1/gi;
     $sub_tpl =~ s/name='([A-Z_]+)'/name=$n.$1/gi;

     $template .= "<tr><th align=\"center\">". $sub_tpl . "</th></tr>\n";
   }



  $template =~ s/(<form .*?>)//gi;
  $template =~ s/<\/form>//ig;
  $template =~ s/(<input .*?type=submit.*?>)//gi;
  $template =~ s/<hr>//gi;
  
#  print "<textarea cols=120 rows=3>$1 / $2 / $3</textarea><br>\n";



  $template = "<table width=\"100%\">$template</table>";
  if ($attr->{OUTPUT2RETURN}) {
    return $template;	
   }

  print $html->form_main({ CONTENT => $template,
  	                       HIDDEN  => { index => "$index" },
	                         SUBMIT  => { add   => "$_ADD"  } 
	                        });
	
}


#**********************************************************
#
#**********************************************************
sub dv_registration  {
	my ($attr) = @_;
	if ($FORM{registration}) {
		
		
	 }
	else {
		$html->message('info', $_INFO, "$_REGISTRATION");
	 }
	
  $html->tpl_show(_include('dv_registration', 'Dv'), $Dv, { ID => 'DV_REGISTRATION' });
	return 0;
}


#**********************************************************
#
#Make month feee
#**********************************************************
sub dv_get_month_fee {
  my ($Dv, $attr) = @_;


  if ($Dv->{TP_INFO}->{ACTIV_PRICE}) {
    my $users = Users->new($db, $admin, \%conf); 
    my $user  = $users->info($Dv->{UID});

    $fees->take($user, $Dv->{TP_INFO}->{ACTIV_PRICE}, 
                              { DESCRIBE  => "$_ACTIVATE $_TARIF_PLAN", 
   	                            DATE      => "$DATE $TIME"
  	                           });  

    $html->message('info', $_INFO, "$_ACTIVATE $_TARIF_PLAN");	
   }


  if ($Dv->{TP_INFO}->{MONTH_FEE} > 0) {

     my $sum     = $Dv->{TP_INFO}->{MONTH_FEE};

     my $users = Users->new($db, $admin, \%conf); 
     my $user  = $users->info($Dv->{UID});

     if ($Dv->{TP_INFO}->{EXT_BILL_ACCOUNT})  {
     	 $user->{BILL_ID}=$user->{EXT_BILL_ID} if ($user->{EXT_BILL_ID});
      }



     my $message = ''; 
     #Current Month
     my ($y, $m, $d)=split(/-/, $DATE, 3);
     my ($active_y, $active_m, $active_d)=split(/-/, $Dv->{ACTIVATE}, 3);	 

        if ($Dv->{TP_INFO}->{PERIOD_ALIGNMENT}) {
        	$message = "$_MONTH_ALIGNMENT, ";
          my $days_in_month=($m!=2?(($m%2)^($m>7))+30:(!($y%400)||!($y%4)&&($y%25)?29:28));

          if ($Dv->{ACTIVATE} && $Dv->{ACTIVATE} ne '0000-00-00') {
            $days_in_month=($active_m!=2?(($active_m%2)^($active_m>7))+30:(!($active_y%400)||!($active_y%4)&&($active_y%25)?29:28)); 
            $d = $active_d;
           }

          $conf{START_PERIOD_DAY} = 1 if (! $conf{START_PERIOD_DAY});
          $sum = sprintf("%.2f", $sum / $days_in_month * ($days_in_month - $d + $conf{START_PERIOD_DAY}));
         }
       
        return 0 if ($sum == 0);
        
        my $periods = 0;
        if ($active_m > 0 && $active_m < $m) {
        	$periods = $m - $active_m;
         }
        elsif ($active_m > 0 && ( $active_m >= $m  && $active_y < $y)) {
        	$periods = 12 - $active_m + $m - 1; 
         }
        
        $message .= "$_MONTH_FEE: $sum ($Dv->{TP_INFO}->{TP_ID})";
        
        if ($Dv->{TP_INFO}->{ABON_DISTRIBUTION}) {
        	$sum = $sum / ( ($m!=2?(($m%2)^($m>7))+30:(!($y%400)||!($y%4)&&($y%25)?29:28)) );
        	$message .= " - $_ABON_DISTRIBUTION";
         }
        
        

        for (my $i=0; $i<=$periods; $i++) {

          if ($active_m+$i > 12) {
          	$active_m=0;
          	$active_y=$active_y+1;
           }
          
          $m = sprintf("%.2d", $active_m+$i);

          if ( $i > 0 ) {
  	        $sum     = $Dv->{TP_INFO}->{MONTH_FEE};
            $message = "$_MONTH_FEE: $sum ($Dv->{TP_INFO}->{TP_ID})";
            $DATE    = "$active_y-$m-01";
            $TIME    = "00:00:00";
           }
          elsif ($Dv->{ACTIVATE} && $Dv->{ACTIVATE} ne '0000-00-00'){
            $DATE    = "$active_y-$m-$active_d";
            $TIME    = "00:00:00";
            
            if ($Dv->{TP_INFO}->{PERIOD_ALIGNMENT}) {
              $users->change($Dv->{UID}, { ACTIVATE => '0000-00-00',
              	                           UID      => $Dv->{UID} });
             }
           }
         
          $fees->take($users, $sum, { DESCRIBE  => $message, 
        	                            METHOD    => 1, 
        	                            DATE      => "$DATE $TIME"
        	                           });  
        
          if ($fees->{errno}) {
        	  $html->message('err', $_ERROR, "[$fees->{errno}] $fees->{errstr}");	
           }
          else {
            $html->message('info', $_INFO, $message);	
           }
         }


      }


}


#**********************************************************
# Get MAC from hcl leaseds
#**********************************************************
sub dv_get_isg_mac {
	my ($ip) = @_;

 my $logfile = $conf{DHCPHOSTS_LEASES} || '/var/db/dhcp.leaseds';
 my %list = ();
 my $l_ip = '';

 open (FILE, $logfile) or $html->message('err', $_ERROR, "Can't read file '$logfile' $!");

   while (<FILE>) {
      next if /^#|^$/;

      if (/^lease (\d+\.\d+\.\d+\.\d+)/) {
         $l_ip = $1; 
         $list{$ip}{ip}=sprintf("%-17s", $ip);
       }
      elsif (/^\s*hardware ethernet (.*);/) {
      	my $mac = $1;
      	if ($ip eq $l_ip) {
      	  $list{$ip}{hardware}=sprintf("%s", $mac); 
      	  last if ($list{$ip}{active}); 
      	 }
       }
      elsif (/^\s+binding state active/) {
         $list{$ip}{active}=1;
       }
   }
 close FILE;

	
	return ($list{$ip}{hardware}) ?  $list{$ip}{hardware} : '';
}

1


