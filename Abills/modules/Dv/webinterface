# Dialup vpn web functions



use Dv;
use Finance;
use Fees;
use Dv_Sessions;
use Shedule;
use Tariffs;
use Nas;


my $Dv       = Dv->new($db, $admin, \%conf);
my $fees     = Fees->new($db, $admin, \%conf);
my $payments = Payments->new($db, $admin, \%conf);
my $tariffs  = Tariffs->new($db, \%conf, $admin);
my $sessions = Dv_Sessions->new($db, $admin, \%conf);


my %FORM_BASE = ();

my @service_status_colors = ("$_COLORS[9]", "$_COLORS[6]", '#808080', '#0000FF', '#FF8000');
my @service_status = ( "$_ENABLE", "$_DISABLE", "$_NOT_ACTIVE", "$_HOLD_UP", "$_DISABLE: $_NON_PAYMENT" );


#*******************************************************************
# Change user variant form
# form_chg_vid()
#*******************************************************************
sub dv_chg_tp {
 my ($attr) = @_;

 my $user;

 if(defined($attr->{USER})) {
   $user = $attr->{USER};
   $Dv = $Dv->info($user->{UID});
   if($Dv->{TOTAL} < 1) {
 	   $html->message('info', $_INFO, "$_NOT_ACTIVE");
 	   return 0;
    }
  }
 else {
 	 $html->message('err', $_ERROR, "$_USER_NOT_EXIST");
 	 return 0;
  }

 my $TARIF_PLAN = $FORM{tarif_plan} || $_DEFAULT_TARIF_PLAN;
 my $period = $FORM{period} || 0;

 my $shedule = Shedule->new($db, $admin, \%conf);

  
if ($Dv->{MONTH_ABON}> 0 && ! $Dv->{STATUS} && ! $users->{DISABLE} &&
        ($users->{DEPOSIT}+$users->{CREDIT} > 0 || 
         $Dv->{POSTPAID_ABON} || 
         $Dv->{PAYMENT_TYPE} == 1 )) {

      if ($users->{ACTIVATE} ne '0000-00-00') {
        my ($Y, $M, $D)=split(/-/, $users->{ACTIVATE}, 3);
        $M--;
        $Dv->{ABON_DATE} = strftime "%Y-%m-%d", localtime(  (mktime(0, 0, 0, $D, $M, ($Y-1900), 0, 0, 0)  + 31 * 86400 + ( ($conf{START_PERIOD_DAY}) ? $conf{START_PERIOD_DAY} * 86400 : 0 ) ) );

       }
      else {
        my ($Y, $M, $D)=split(/-/, $DATE, 3);
        $M++;
        if ($M == 13) {
          $M = 1;
          $Y++;
         }

        if ($conf{START_PERIOD_DAY}) {
          $D=sprintf("%02d", $conf{START_PERIOD_DAY}); 
         }
        else {
          $D='01';
         }

        $M = sprintf("%02d", $M);
        $Dv->{ABON_DATE} = "$Y-$M-$D";
       }
 }



if ($FORM{set}) {
  if ($period > 0) {

    my ($year, $month, $day);

    if ($period == 1) {
      ($year, $month, $day)=split(/-/, $Dv->{ABON_DATE}, 3);
     }
    else {
    	($year, $month, $day)=split(/-/, $FORM{DATE}, 3);
     }

 	  use POSIX;
    
    my $seltime = POSIX::mktime(0, 0, 0, $day, ($month - 1), ($year - 1900));
    
    if ($seltime <= time()) {
      $html->message('info', $_INFO, "$ERR_WRONG_DATA ($year-$month-$day)/". $seltime . "-" . time());
      return 0;
     }
    elsif($FORM{date_D} > ($month!=2?(($month%2)^($month>7))+30:(!($year%400)||!($year%4)&&($year%25)?29:28))) {
      $html->message('info', $_INFO, "$ERR_WRONG_DATA ($year-$month-$day)");
      return 0;
     }

    $shedule->add( {UID     => $Dv->{UID},
                   TYPE     => 'tp',
                   ACTION   => $FORM{TP_ID},
    	             D        => $day,
                   M        => $month,
                   Y        => $year,
                   DESCRIBE => "$message<br>
                   $_FROM: '$year-$month-$day'",
                   MODULE   => 'Dv'
                    });

    if ($shedule->{errno}) {
      $html->message('err', $_ERROR, "[$shedule->{errno}] $err_strs{$shedule->{errno}}");	
     }
    else {
      $html->message('info', $_CHANGED, "$_CHANGED");
      $Dv->info($Dv->{UID});
    }
   }
  else {
    $Dv->change({ %FORM });

    if ($Dv->{errno}) {
      $html->message('err', $_ERROR, "[$Dv->{errno}] $err_strs{$Dv->{errno}}");	
     }
    else {
      #Take fees
      if ($Dv->{TP_INFO}->{MONTH_FEE} > 0 && ! $Dv->{STATUS}) {
        dv_get_month_fee($Dv);
       }

    	
      $html->message('info', $_CHANGED, "$_CHANGED");
      $Dv->info($Dv->{UID});
    }

  }
}
elsif($FORM{del}) {
  $shedule->del( { UID => $Dv->{UID},
   	               ID  => $FORM{SHEDULE_ID}  } 
   	            );

  $html->message('info', $_DELETED, "$_DELETED [$FORM{SHEDULE_ID}]");
}

  $shedule->info( {UID      => $Dv->{UID},
                   TYPE     => 'tp',
                   DESCRIBE => "$message\n$_FROM: '$FORM{date_y}-$FORM{date_m}-$FORM{date_d}'",
                   MODULE   => 'Dv'
                   });


  if ($shedule->{TOTAL} > 0 && ! $conf{DV_TP_MULTISHEDULE} ) {
  	  $table = $html->table( { width      => '100%',
  		                       caption    => "$_SHEDULE",
                             cols_align => ['left', 'left'],
                             rows       => [ [ "$_TARIF_PLAN:", "$shedule->{ACTION}"   ],
                                             [ "$_DATE:",   "$shedule->{D}-$shedule->{M}-$shedule->{Y}" ],
                                             [ "$_ADMIN:",  "$shedule->{ADMIN_NAME}"   ],
                                             [ "$_ADDED:",  "$shedule->{DATE}"         ],
                                             [ "ID:",       "$shedule->{SHEDULE_ID}"   ]  
                                            ]
                               } );
  	  $tariffs->{TARIF_PLAN_SEL} = $table->show(). $html->form_input('SHEDULE_ID', "$shedule->{SHEDULE_ID}", {TYPE => 'HIDDEN' });
  	  $tariffs->{ACTION}         = 'del';
  	  $tariffs->{LNG_ACTION}     = $_DEL;
  }
 else {
  
   my $tp_list = $tariffs->list({ MODULE => 'Dv', DOMAIN_ID => $admin->{DOMAIN_ID} });

   #Sheduler fot TP change
   if($conf{DV_TP_MULTISHEDULE}) {
   	  if ($FORM{del_shedule} && $FORM{is_js_confirmed}) {
   	  	$shedule->del({ ID => $FORM{del_shedule} });
   	  	if (! $shedule->{errno}) {
   	  		$html->message('info', $_INFO, "$_DELETED $FORM{del_shedule}");
   	  	 }
   	    $shedule->{TOTAL}=1;
   	   }
   	  
   	  $table = $html->table( { width      => '100%',
  		                       caption    => "$_SHEDULE",
                             cols_align => ['right', 'left', 'left'],
                             title      => [$_DATE, "$_TARIF_PLAN", '-'],                             
                             } );
   	  
   	  if ($shedule->{TOTAL} > 0) {
   	    my $list = $shedule->list( {UID      => $Dv->{UID},
                   TYPE     => 'tp',
                   DESCRIBE => "$message\n$_FROM: '$FORM{date_y}-$FORM{date_m}-$FORM{date_d}'",
                   MODULE   => 'Dv'
                   });
      

        my %TP_HASH = ();
        foreach my $line (@$tp_list) {
        	$TP_HASH{$line->[0]}=$line->[1];
         }                
                   
   	    foreach my $line (@$list) {
   	  	  $table->addrow("$line->[3]-$line->[2]-$line->[1]", 
   	  	   "$line->[7] : $TP_HASH{$line->[7]}",
   	  	   $html->button($_DEL, "index=$index&del_shedule=$line->[13]&UID=$FORM{UID}", { MESSAGE => "$_DEL $line->[3]-$line->[2]-$line->[1]?" }) 
   	  	   );
   	     }
   	  
   	    $tariffs->{SHEDULE_LIST} .= $table->show();
   	  }
    }

   $tariffs->{TARIF_PLAN_SEL}=$html->form_select('TP_ID', 
                                          { 
 	                                          SELECTED          => $Dv->{TP_ID},
 	                                          SEL_MULTI_ARRAY   => $tp_list,
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });

   $tariffs->{PARAMS} .= form_period($period, { ABON_DATE => $Dv->{ABON_DATE} });	


   
   $tariffs->{ACTION}='set';
   $tariffs->{LNG_ACTION}=$_CHANGE;
  }

 

my $tp_index = $index + 6;

$tariffs->{UID}     = $attr->{USER}->{UID};
$tariffs->{m}       = $m;
$tariffs->{TP_ID}   = $Dv->{TP_NUM};

$tariffs->{TP_NAME} = "$Dv->{TP_ID}:$Dv->{TP_NAME} ". $html->button("$_TARIF_PLANS", "index=$tp_index&TP_ID=$Dv->{TP_NUM}", { TITLE => "$_TP", BUTTON => 1 });


print $html->tpl_show(templates('form_chg_tp'), $tariffs);


}


#**********************************************************
# user_dv
#**********************************************************
sub dv_users_list {
 my ($attr)=@_;

 if (! $permissions{0}{2}) {
	 return 0;
  }

 if ($attr->{TP}) {
 	 $FORM{TP_ID} = $FORM{TP_NUM} if ($FORM{TP_NUM});
   $LIST_PARAMS{TP_ID} = $FORM{TP_ID};
   #$pages_qs .= "&TP_ID=$FORM{TP_ID}";
  }
 elsif($FORM{TP_ID} || $FORM{TP_NUM}) {
 	 $FORM{TP_ID} = $FORM{TP_NUM} if ($FORM{TP_NUM});
   $FORM{subf}=$index;
   dv_tp();
   return 0;
  }
 
 
 $Dv->{GROUP_SEL}    = sel_groups();
 $Dv->{STATUS_SEL}   = $html->form_select('STATUS', 
                                          { 
 	                                          SELECTED     => $FORM{STATUS},
 	                                          SEL_HASH     => { '' => "$_ALL",
 	                                          	                0  => $service_status[0],
 	                                          	                1  => $service_status[1],
 	                                          	                2  => $service_status[2],
 	                                          	                3  => $service_status[3],  
 	                                          	                4  => $service_status[4]    
 	                                          	                },
                                            NO_ID       => 1,
                                            STYLE        => \@service_status_colors,
 	                                        });

 
 form_search({ SEARCH_FORM => $html->tpl_show(_include('dv_users_search', 'Dv'),
 	                                            { %$Dv, %FORM },
 	                                            { notprint => 1 })    });


 print $html->letters_list({ pages_qs => $pages_qs  }); 

 if ($FORM{letter}) {
   $LIST_PARAMS{FIRST_LETTER} = $FORM{letter};
   $pages_qs .= "&letter=$FORM{letter}";
  } 


my $list = $Dv->list( { %LIST_PARAMS } );

my @TITLE = ($_LOGIN, $_FIO, $_DEPOSIT, $_CREDIT, $_TARIF_PLANS, $_STATUS, '-', '-');
my @EX_TITLE_ARR  = split(/, /, $Dv->{SEARCH_FIELDS});

my %SEARCH_TITLES = ('INET_NTOA(dv.ip)'      => 'IP',
                     'INET_NTOA(dv.netmask)' => 'NETMASK',
                     'dv.speed'              => $_SPEED,
                     'dv.port'               => $_PORT,
                     'dv.cid'                => 'CID',
                     'dv.filter_id'          => 'Filter ID',
                     'tp.name'               => "$_TARIF_PLAN"
                   );


for(my $i=0; $i<$Dv->{SEARCH_FIELDS_COUNT}; $i++){
	push @TITLE, '-';
	$TITLE[6+$i] = $SEARCH_TITLES{$EX_TITLE_ARR[$i]} || "$_SEARCR";
}

if ($Dv->{errno}) {
  $html->message('err', $_ERROR, "[$Dv->{errno}] $err_strs{$Dv->{errno}}");	
  return 0;
 }
elsif ($Dv->{TOTAL} == 1) {
	form_users({  USER => user_info($list->[0]->[6+$Dv->{SEARCH_FIELDS_COUNT}]) });
	return 0;
}



my $table = $html->table( { width      => '100%',
                            caption    => "Internet - $_USERS",
                            border     => 1,
                            title      => \@TITLE,
                            cols_align => ['left', 'left', 'right', 'right', 'left', 'center', 'center:noprint', 'center:noprint'],
                            qs         => $pages_qs,
                            pages      => $Dv->{TOTAL}
                           });

foreach my $line (@$list) {
  my $payments = ($permissions{1}) ?  $html->button("$_PAYMENTS", "index=2&UID=". $line->[6+$Dv->{SEARCH_FIELDS_COUNT}]) : ''; 
  
  my @fields_array  = ();
  for(my $i=0; $i<$Dv->{SEARCH_FIELDS_COUNT}; $i++){
     push @fields_array, $line->[6+$i];
   }

  $table->addrow(
   $html->button("$line->[0]", "index=15&UID=". $line->[6+$Dv->{SEARCH_FIELDS_COUNT}]), 
   "$line->[1]",
   "$line->[2]", 
   "$line->[3]", 
   "$line->[4]", 
   ($line->[5] > 0) ? $html->color_mark($service_status[$line->[5]], $service_status_colors[$line->[5]]) : "$service_status[$line->[5]]",
   @fields_array, 
   $payments, 
   $html->button("$_STATS", "index=". ((! $FORM{TP_SHOW}) ? $index + 3 : $index - 9 ) ."&UID=". $line->[6+$Dv->{SEARCH_FIELDS_COUNT}])

   );
}
print $table->show();

if (! $admin->{MAX_ROWS}) {
  $table = $html->table( { width      => '100%',
                         cols_align => ['right', 'right'],
                         rows       => [ [ "$_TOTAL:", $html->b($Dv->{TOTAL}) ] ]
                        } );
  print $table->show();
 }

  return 0;
}


#**********************************************************
# user_dv
#**********************************************************
sub dv_user {
 	my ($attr) = @_;

 	$Dv->{UID}=$FORM{UID} || $LIST_PARAMS{UID} ;	  
  
  
  if ($FORM{REGISTRATION_INFO}) {
     # Info
     my $users = Users->new($db, $admin, \%conf); 
     my $dv    = $Dv->info($Dv->{UID});
     my $pi    = $users->pi({ UID => $Dv->{UID} });
     my $user  = $users->info($Dv->{UID}, { SHOW_PASSWORD => $permissions{0}{3} });
     $pi->{ADDRESS_FULL}="$pi->{ADDRESS_STREET} $pi->{ADDRESS_BUILD}, $pi->{ADDRESS_FLAT}";
 
     if ($FORM{pdf}) {
       print "Content-type: application/pdf\n";
       print "Content-disposition: inline; name=".int(rand(32768)).".pdf\n\n";
       

     	 $html->tpl_show(_include('dv_user_info', 'Dv', { pdf => 1 }), { %$user, 
     	 	                                                               %$pi, 
     	 	                                                               DATE => $DATE, 
     	 	                                                               TIME => $TIME, 
     	 	                                                               %$dv,
     	 	                                                               });
      }
     else {
       $html->tpl_show(templates('form_user_info'), { %$user, %$pi, DATE => $DATE, TIME => $TIME } );
       $html->tpl_show(_include('dv_user_info', 'Dv'), $dv);


       if (in_array('Mail', \@MODULES)) {
         require "Abills/modules/Mail/webinterface";
         my $Mail = Mail->new($db, $admin, \%conf);

         my $list = $Mail->mbox_list({ UID => $Dv->{UID} });
         foreach my $line (@$list) {
      	   $Mail->{EMAIL_ADDR} = $line->[0] . '@' . $line->[1];
    	     $html->tpl_show(_include('mail_user_info', 'Mail'), $Mail);
      	  }
       }
     }

    return 0;
   }
  elsif ($FORM{shedule}) {

   }
  elsif ($FORM{add}) {
    if (! $permissions{0}{1} ) {
      $html->message('err', $_ERROR, "Access Deny");  	
    	return 0;
     }

    if (( $FORM{IP} eq '0.0.0.0' || $FORM{IP} eq '' ) && $FORM{STATIC_IP_POOL}) {
    	$FORM{IP}=dv_get_static_ip($FORM{STATIC_IP_POOL});
     }

    if ($FORM{IP} =~ /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/ && $FORM{IP} ne '0.0.0.0') {
    	my $list = $Dv->list({ IP => $FORM{IP} });
    	if ($Dv->{TOTAL} > 0 && $list->[0][6+$Dv->{SEARCH_FIELDS_COUNT}] != $FORM{UID}) {
    	  $html->message('err', $_ERROR, "IP: $FORM{IP} $_EXIST. $_LOGIN: ". $html->button("$list->[0][0]", "index=15&UID=". $list->[0][6+$Dv->{SEARCH_FIELDS_COUNT}]));
      	return 0;
    	 }
     }
 
    $Dv->add({ %FORM });
    if (! $Dv->{errno}) {
  	  #Make month feee
  	  $Dv->{ACTIVATE}=$attr->{USER}->{ACTIVATE};
   	  dv_get_month_fee($Dv) if (! $FORM{STATUS});
      $html->message('info', $_INFO, "$_ADDED");	
     }

   }
	elsif($FORM{set}) {
    if (! $permissions{0}{4} ) {
      $html->message('err', $_ERROR, "Access Deny");  	
    	return 0;
     }

    if ($FORM{IP} eq '0.0.0.0' && $FORM{STATIC_IP_POOL}) {
    	$FORM{IP}=dv_get_static_ip($FORM{STATIC_IP_POOL});
     }

    if ($FORM{IP} =~ /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/ && $FORM{IP} ne '0.0.0.0') {
    	my $list = $Dv->list({ IP => $FORM{IP} });
    	if ($Dv->{TOTAL} > 0 && $list->[0][6+$Dv->{SEARCH_FIELDS_COUNT}] != $FORM{UID}) {
    	  $html->message('err', $_ERROR, "IP: $FORM{IP} $_EXIST. $_LOGIN: ". $html->button("$list->[0][0]", "index=15&UID=". $list->[0][6+$Dv->{SEARCH_FIELDS_COUNT}]));
      	return 0;
    	 }
     }

    $Dv->change({ %FORM });

    if (! $Dv->{errno}) {
      $Dv->{ACTIVATE}=$attr->{USER}->{ACTIVATE};
      dv_get_month_fee($Dv) if (! $FORM{STATUS});

      $html->message('info', $_INFO, "$_CHANGED");	
     }
   }
	elsif($FORM{del}) {
    $Dv->del();
    if (! $Dv->{errno}) {
      $html->message('info', $_INFO, "$_DELETED");	
     }
	 }

  if ($Dv->{errno}) {
    $html->message('err', $_ERROR, "[$Dv->{errno}] $err_strs{$Dv->{errno}}");
   }

  $Dv->info($Dv->{UID});


  if($Dv->{TOTAL} < 1) {
	  $html->message('info', $_INFO, $_NOT_ACTIVE);
	  #$Dv = $Dv->defaults();
	  
    $Dv->{TP_ID}=$html->form_select('TP_ID', 
                                         { 
 	                                          SELECTED          => $Dv->{TP_ID},
 	                                          SEL_MULTI_ARRAY   => $tariffs->list({ MODULES => 'Dv' }),
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });

	  
	  
	  $Dv->{ACTION}='add';
	  $Dv->{LNG_ACTION}=$_ACTIVATE;
	 }
	else {
	  $Dv->{ACTION}='set';
	  $Dv->{LNG_ACTION}=$_CHANGE;
	  $Dv->{CHANGE_TP_BUTTON}=$html->button($_CHANGE, 'UID='.$Dv->{UID}.'&index='. ($index + 1), { BUTTON => 1 });

    # Get next payment period
    if ($Dv->{MONTH_ABON} > 0 &&  ! $Dv->{STATUS} && ! $users->{DISABLE} &&
        ($users->{DEPOSIT}+$users->{CREDIT} > 0 || 
         $Dv->{POSTPAID_ABON} || 
         $Dv->{PAYMENT_TYPE} == 1 )) {

      if ($users->{ACTIVATE} ne '0000-00-00') {
        my ($Y, $M, $D)=split(/-/, $users->{ACTIVATE}, 3);
        $M--;
        $Dv->{ABON_DATE} = strftime "%Y-%m-%d", localtime(  (mktime(0, 0, 0, $D, $M, ($Y-1900), 0, 0, 0)  + 31 * 86400 ) );
       }
      else {
        my ($Y, $M, $D)=split(/-/, $DATE, 3);
        $M++;
        if ($M == 13) {
          $M = 1;
          $Y++;
         }
        if ($conf{START_PERIOD_DAY}) {
          $D=sprintf("%02d", $conf{START_PERIOD_DAY}); 
         }
        else {
          $D='01';
         }

        $M = sprintf("%02d", $M);
        $Dv->{ABON_DATE} = "$Y-$M-$D";
       }
      }
      
    $Dv->{NETMASK_COLOR} = ($Dv->{NETMASK} ne '255.255.255.255') ? $_COLORS[0] : $_COLORS[1];
    $Dv->{SHEDULE}=$html->button("$_SHEDULE", "UID=$FORM{UID}&shedule=status&index=". ($index+4), { BUTTON => 1 });
	} 


  $Dv->{STATUS_SEL}          = $html->form_select('STATUS', 
                                          { 
 	                                          SELECTED     => $Dv->{STATUS},
 	                                          SEL_ARRAY    => \@service_status,
 	                                          STYLE        => \@service_status_colors,
 	                                          ARRAY_NUM_ID => 1
 	                                        });
   
  if ($Dv->{STATUS} > 0) { 
    $Dv->{STATUS_COLOR} = $service_status_colors[$Dv->{STATUS}] ;
   }

  $Dv->{CALLBACK}         = ($Dv->{CALLBACK} == 1) ? ' checked' : '';
  $Dv->{REGISTRATION_INFO}= $html->button("$_REGISTRATION", "index=$index&UID=$Dv->{UID}&REGISTRATION_INFO=1", { BUTTON => 1 });

  if ($conf{DOCS_PDF_PRINT}) {
    $Dv->{REGISTRATION_INFO_PDF}= '('. $html->button("PDF", "qindex=$index&UID=$Dv->{UID}&REGISTRATION_INFO=1&pdf=1", { ex_params => 'target=_new' } ) .')';
   }


  $Dv->{TURBO_MODE_SEL} = $html->form_select('TURBO_MODE', 
                                          { 
 	                                          SELECTED     => $Dv->{TURBO_MODE} || 0,
 	                                          SEL_ARRAY    => [ $_ENABLE,
 	                                             $_DISABLE, 
 	                                             $_NOT_ACTIVE, 
 	                                             ],
 	                                          ARRAY_NUM_ID => 1
 	                                        });


  #Join Service
  if($attr->{USER}->{COMPANY_ID}) {
    my $list  = $Dv->list({ JOIN_SERVICE => 1, 
                            COMPANY_ID   => $attr->{USER}->{COMPANY_ID}   
                         });
    
    $Dv->{JOIN_SERVICES_SEL}= $html->form_select('JOIN_SERVICE', 
                                          { 
 	                                          SELECTED          => $Dv->{JOIN_SERVICE},
 	                                          SEL_MULTI_ARRAY   => [['', '', '', '', '', '', '', 0], [$_MAIN, '', '', '', '', '', '', 1], @$list ],
 	                                          MULTI_ARRAY_KEY   => $Dv->{SEARCH_FIELDS_COUNT} + 6,
 	                                          MULTI_ARRAY_VALUE => 0,
 	                                          NO_ID             => undef
 	                                          
 	                                        });

     if ($Dv->{JOIN_SERVICE} == 1) {
   	   my $list = $Dv->list({ JOIN_SERVICE => $Dv->{UID}, 
                              COMPANY_ID   => $attr->{USER}->{COMPANY_ID} ,
                              PAGE_ROWS    => 1000
                             });

       foreach my $line (@$list) {
     	   $Dv->{JOIN_SERVICES_USERS} .= $html->button("$line->[0]", "&index=15&UID=". $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6]) . ' ';
        }
      }
     elsif($Dv->{JOIN_SERVICE}  > 1) {
     	 $Dv->{JOIN_SERVICES_USERS} = $html->button("$_MAIN", "index=15&UID=$Dv->{JOIN_SERVICE}");
      }


 	   $Dv->{JOIN_SERVICE} = $html->tpl_show(_include('dv_user_join_service', 'Dv'), $Dv, { OUTPUT2RETURN => 1 });
 	 }                                    
 	else {
 		$Dv->{JOIN_SERVICE}='';
 	}                                        


  my $nas = Nas->new($db, \%conf);  
  $list = $nas->ip_pools_list({ STATIC => 1 });
  
  $Dv->{STATIC_IP_POOL}=$html->form_select('STATIC_IP_POOL', 
                                          { 
 	                                          SELECTED          => $FORM{STATIC_POOL},
 	                                          SEL_MULTI_ARRAY   => [['', ''], @$list ],
 	                                          MULTI_ARRAY_KEY   => 8,
 	                                          MULTI_ARRAY_VALUE => '1',
 	                                          NO_ID             => 1
 	                                        });
 
  
  $html->tpl_show(_include('dv_user', 'Dv'), $Dv);
  
  return 0; 
}

#**********************************************************
# Get static ip from pool
# form_tp
#**********************************************************
sub dv_get_static_ip {
	my ($pool_id)=@_;
	my $ip = '0.0.0.0';
	
  my $nas = Nas->new($db, \%conf);  
  $nas->ip_pools_info($pool_id);
  
  
  my $start_ip = ip2int($nas->{NAS_IP_SIP});
  my $end_ip   = $start_ip + $nas->{NAS_IP_COUNT};

  my %users_ips = ();
  
  my $list = $Dv->list({ PAGE_ROWS => 100000, 
  	                     IP        => ">=$nas->{NAS_IP_SIP}" 
  	                   });


  foreach my $line (@$list) {
    $users_ips{$line->[6]}=1;
   }
  
  for(my $ip_cur=$start_ip; $ip_cur<=$end_ip; $ip_cur++) {
  	if (! $users_ips{int2ip($ip_cur)}) {
  		 return int2ip($ip_cur);
  	 }
   }
  
	$html->message('err', $_ERROR, "$ERR_NO_FREE_IP_IN_POOL");
	
	
	return $ip;
}

#**********************************************************
# Tarif plans
# form_tp
#**********************************************************
sub dv_tp {
 
 my $tarif_info;

 my @Octets_Direction = ("$_RECV + $_SEND", $_RECV, $_SEND);
 my @Payment_Types    = ($_PREPAID, $_POSTPAID); 

 $tarif_info = $tariffs->defaults();
 $tarif_info->{LNG_ACTION} = $_ADD;
 $tarif_info->{ACTION}     = 'ADD_TP';




if($FORM{ADD_TP}) {
  $FORM{TP_ID} = $FORM{CHG_TP_ID};
  $tariffs->add( { %FORM, MODULE => 'Dv' });
  if (! $tariffs->{errno}) {
     $html->message('info', $_ADDED, "$_ADDED $tariffs->{ID}");
   }
 }
elsif (defined($FORM{TP_ID})) {
  $tarif_info = $tariffs->info( $FORM{TP_ID}, { ID => $FORM{TP_NUM}  } );
  $FORM{TP_SHOW}=1;

  if ($tariffs->{errno}) {
    if ($tariffs->{errno} == 2) {
      $html->message('err', $_ERROR, "$_TARIF_PLAN $_NOT_EXIST");	
     }
    else {
    	$html->message('err', $_ERROR, "$_TARIF_PLAN [$tariffs->{errno}] $err_strs{$tariffs->{errno}}");	
     }
    return 0;
   }

  $pages_qs       .= "&TP_ID=$FORM{TP_ID}&subf=$FORM{subf}";
  $LIST_PARAMS{TP} = $FORM{TP_ID};
  $FORM{TP_NUM}    = $tarif_info->{ID};
  %F_ARGS          = ( TP => $tariffs );
  
  $tariffs->{NAME_SEL} = $html->form_main({ CONTENT => $html->form_select('TP_ID', 
                                          { 
 	                                          SELECTED          => $FORM{TP_ID},
 	                                          SEL_MULTI_ARRAY   => $tariffs->list({ %LIST_PARAMS }),
 	                                          MULTI_ARRAY_KEY   => 18,
 	                                          MULTI_ARRAY_VALUE => '0,1',
 	                                          NO_ID             => 1
 	                                        }),
	                                          HIDDEN  => { index => "$index" },
	                                          SUBMIT  => { show  => "$_SHOW" } 
	                                       });
  
  func_menu({ 
  	         'ID' =>   $tariffs->{ID}, 
  	         $_NAME => $tariffs->{NAME_SEL}
  	       }, 
  	{ 
#  	 $_INFO          => ":TP_ID=$tariffs->{TP_ID}",
#     $_USERS         => "11:TP_ID=$tariffs->{TP_ID}",
#     $_INTERVALS     => "73:TP_ID=$tariffs->{TP_ID}",
#     $_NAS           => "72:TP_ID=$tariffs->{TP_ID}"
  	 },
  	{
  		f_args => { %F_ARGS }
  	 });

  if ($FORM{subf}) {

  	return 0;
   }
  elsif($FORM{change}) {
    $tariffs->change( $FORM{TP_ID}, { %FORM  } );  
     
    if (! $tariffs->{errno}) {
       $html->message('info', $_CHANGED, "$_CHANGED $tariffs->{ID}");
     }
   }

  $tarif_info->{LNG_ACTION}=$_CHANGE;
  $tarif_info->{ACTION}='change';
 }
elsif(defined($FORM{del}) && $FORM{is_js_confirmed}) {
  $tariffs->del($FORM{del});

  if (! $tariffs->{errno}) {
    $html->message('info', $_DELETE, "$_DELETED $FORM{del}");
   }
}



if ($tariffs->{errno}) {
    $html->message('err', $_ERROR, "[$tariffs->{errno}] $err_strs{$tariffs->{errno}}");	
 }


#my $i=0;
$tarif_info->{SEL_OCTETS_DIRECTION} = $html->form_select('OCTETS_DIRECTION', 
                                          { 
 	                                          SELECTED     => $tarif_info->{OCTETS_DIRECTION},
 	                                          SEL_ARRAY    => \@Octets_Direction,
 	                                          ARRAY_NUM_ID => 1
 	                                        });

$tarif_info->{PAYMENT_TYPE_SEL} = $html->form_select('PAYMENT_TYPE', 
                                          { 
 	                                          SELECTED     => $tarif_info->{PAYMENT_TYPE},
 	                                          SEL_ARRAY    => \@Payment_Types,
 	                                          ARRAY_NUM_ID => 1
 	                                        });



$tarif_info->{GROUPS_SEL} = $html->form_select('TP_GID', 
                                          { 
 	                                          SELECTED          => $tarif_info->{TP_GID},
 	                                          SEL_MULTI_ARRAY   => [[ '', ''],  @{ $tariffs->tp_group_list( ) } ],
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });


my $nas = Nas->new($db, \%conf);

$tarif_info->{IP_POOLS_SEL} = $html->form_select('IPPOOL', 
                                          { 
 	                                          SELECTED          => $tarif_info->{IPPOOL},
 	                                          SEL_MULTI_ARRAY   => [['', ''],  @{ $nas->ip_pools_list({ %LIST_PARAMS })	 } ],
 	                                          MULTI_ARRAY_KEY   => 8,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });



$tarif_info->{REDUCTION_FEE}     = ($tarif_info->{REDUCTION_FEE})     ? 'checked' : '';
$tarif_info->{POSTPAID_DAY_FEE}  = ($tarif_info->{POSTPAID_DAY_FEE})  ? 'checked' : '';
$tarif_info->{POSTPAID_MONTH_FEE}= ($tarif_info->{POSTPAID_MONTH_FEE})? 'checked' : '';
$tarif_info->{PERIOD_ALIGNMENT}  = ($tarif_info->{PERIOD_ALIGNMENT})  ? 'checked' : ''; 
$tarif_info->{ABON_DISTRIBUTION} = ($tarif_info->{ABON_DISTRIBUTION}) ? 'checked' : ''; 


if ($conf{EXT_BILL_ACCOUNT}) {
  my $checked = ($tarif_info->{EXT_BILL_ACCOUNT}) ? ' checked' : '';
  $tarif_info->{EXT_BILL_ACCOUNT}="<tr><td>$_EXTRA $_BILL:</td><td><input type='checkbox' name='EXT_BILL_ACCOUNT' value='1' $checked></td></tr>\n";
}
else {
	$tarif_info->{EXT_BILL_ACCOUNT}='';
}

$html->tpl_show(_include('dv_tp', 'Dv'), $tarif_info, { SKIP_VARS => 'IP' });

my $list = $tariffs->list({ %LIST_PARAMS });	

# Time tariff Name Begin END Day fee Month fee Simultaneously - - - 
my $table = $html->table( { width      => '100%',
                            caption    => "$_TARIF_PLANS",
                            border     => 1,
                            title      => ['#', $_NAME,  $_HOUR_TARIF, $_TRAFIC_TARIFS, $_PAYMENT_TYPE, $_DAY_FEE, $_MONTH_FEE, $_SIMULTANEOUSLY, 
                             $_AGE, $_GROUP,
                                    '-', '-', '-'],
                            cols_align => ['right', 'left', 'center', 'center', 'center', 'right', 'right', 'right', 'right', 'center:noprint', 'center:noprint', 'center:noprint'],
                            ID         => 'DV_TARIF_PLANS'
                                  } );

my ($delete, $change);
foreach my $line (@$list) {
  if ($permissions{4}{1}) {
    $delete = $html->button($_DEL, "index=$index&del=$line->[18]", { MESSAGE => "$_DEL $line->[0]?" }); 
    $change = $html->button($_CHANGE, "index=$index&TP_ID=$line->[18]");
   }
  
  if($FORM{TP_ID} eq $line->[18]) {
  	$table->{rowcolor}=$_COLORS[0];
   }
  else {
  	undef($table->{rowcolor});
   }
  
  $table->addrow($html->b($line->[0]), 
   $html->button($line->[1], "index=$index&TP_ID=$line->[18]"),
   $bool_vals[$line->[2]], $bool_vals[$line->[3]], $Payment_Types[$line->[4]], 
   $line->[5], 
   $line->[6], 
   $line->[7], 
   $line->[8], 
   $line->[9],
   $html->button($_INTERVALS, "index=". ($index+2) ."&subf=73&TP_ID=$line->[18]"),
   $change,
   $delete);
}

print $table->show();

$table = $html->table( { width      => '100%',
                         cols_align => ['right', 'right'],
                         rows       => [ [ "$_TOTAL:", $html->b($tariffs->{TOTAL}) ] ]
                     } );
print $table->show();

}




#*******************************************************************
# online users
#*******************************************************************
sub dv_online {

my $nas = Nas->new($db, \%conf);

my $message;
if ($FORM{ping}) {
  if ($FORM{ping} =~ /^(\d){1,3}\.(\d){1,3}\.(\d){1,3}\.(\d){1,3}$/) {
    my $res = `/sbin/ping -c 5 $FORM{ping}`;
    $html->message('info', $_INFO,  "Ping  $FORM{ping}<br>Result:<br><pre>$res</pre>");
   }
  else {
    $html->message('err', $_ERROR,  "$ERR_WRONG_DATA");
   }
 }
elsif ($FORM{hangup}) {
  my ($nas_id, $nas_port_id, $acct_session_id, $user_name) = split(/ /, $FORM{hangup}, 4);
  $nas->info({ NAS_ID => $nas_id });
  
  if ($nas->{errno}) {
    $html->message('err', $_NAS, "$nas->{errstr}");
  	return 0;
   }

  require "Abills/nas.pl";
  
  my $ret = hangup($nas, "$nas_port_id", "$user_name", { ACCT_SESSION_ID   => "$acct_session_id",
  	                                                     FRAMED_IP_ADDRESS => "$FORM{FRAMED_IP_ADDRESS}",
  	                                                     UID               => $FORM{UID} });

  if ($ret == 0) {
    my $table = $html->table( { width   => '100%',
                                caption => $_HANGUPED,
                                rows    => [ 
                                            [ "$_NAS ID",   $nas_id          ],
                                            [ "$_NAS IP",   $nas->{NAS_IP}   ],
                                            [ "$_PORT",     $nas_port_id     ],
                                            [ "SESSION_ID", $acct_session_id ],
                                            [ "",           $ret             ] 
                                           ]
                               } );


     $message = $table->show();
     sleep 3;
     
     weblog('hangup', "$user_name");
   }
  elsif ($ret == 1) {
   	$message = 'NAS NOT supported yet';
   }

  $html->message('info', $_INFO, "$message");
 }
if ($FORM{zapall}) {
  $sessions->zap(0, 0, 0, { ALL => 1, %FORM });
  $html->message('info', $_INFO, "Zapped all sessions");
 }
elsif($FORM{zap}) {
  
  
  
  my($nas_id, $nas_port_id, $acct_session_id)=split(/ /, $FORM{zap}, 3);
  $sessions->zap($nas_id, $nas_port_id, $acct_session_id, { %FORM });

  if ($sessions->{errno}) {
  	 $html->message('err', $_ERROR, "[$sessions->{errno}] $err_strs{$sessions->{errno}}");
  	 return 0;
   }

  $nas->info({NAS_ID => $nas_id });

  my $table = $html->table( { width   => '100%',
                              caption => $_CLOSED,
                              rows    => [ 
                                          [ "$_NAS ID",   $nas_id],
                                          [ "$_NAS IP",   $nas->{NAS_IP} ],
                                          [ "$_PORT",     $nas_port_id   ],
                                          [ "SESSION_ID", $acct_session_id ],
                                        ]
                               } );

  $message = $table->show();

  
  $sessions->list({ ACCT_SESSION_ID => $acct_session_id, 
  	                NAS_PORT        => $nas_port_id,
  	                NAS_ID          => $nas->{NAS_ID} });  
  
  if ($sessions->{TOTAL} < 1) {
    $message .= "<p align=center>".
    $html->button('Add To log', "index=$index&tolog=$acct_session_id&nas_id=$nas_id&nas_port_id=$nas_port_id&ZAPED=1", { BUTTON => 1 }). 
    $html->button($_DEL, "index=$index&del=$acct_session_id&nas_id=$nas_id&nas_port_id=$nas_port_id&ZAPED=1", { BUTTON => 1 }). "</p>\n";
   }
  else {
  	$message .= "$_EXIST";
  	$sessions->online_del({ NAS_ID          => $nas_id,
                            NAS_PORT        => $nas_port_id,
                            ACCT_SESSION_ID => $acct_session_id
                          });

    #my ($sum, $variant, $time_t, $traf_t) = session_sum("$RAD{USER_NAME}", $ACCT_INFO{LOGIN}, $ACCT_INFO{ACCT_SESSION_TIME}, \%ACCT_INFO);
   }

  $html->message('info', $_INFO, $message);
}
elsif($FORM{tolog}) {
  require Acct;
  Acct->import();
  my $Acct = Acct->new($db, \%conf);


  if ($FORM{dellist}) {
  	$sessions->online( { SESSION_IDS  => $FORM{dellist},
  		                   ZAPED        => 1,
  		                   FIELDS_NAMES => [ 

                         INPUT_OCTETS,
                         OUTPUT_OCTETS,

                         INPUT_OCTETS2,
                         OUTPUT_OCTETS2,
                                                  
                         ACCT_SESSION_TIME,
                         ACCT_SESSION_ID,

                         NAS_PORT_ID,
                         NAS_IP,
                         CLIENT_IP,

                         CONNECT_INFO,
                         CID,

                         USER_NAME,

                         
                         SESSION_START
                         
  		                   ] } );	

   my $online_list = $sessions->{nas_sorted}; 
   my $nas_list = $nas->list();
   my @results = ();
   foreach my $nas_row (@$nas_list) {
     next if (! defined($online_list->{$nas_row->[0]}));

      foreach my $line ( @{ $online_list->{$nas_row->[0]} } ) {
        $ACCT_INFO->{INBYTE}           = $line->[0];
        $ACCT_INFO->{OUTBYTE}          = $line->[1];
        $ACCT_INFO->{INBYTE2}          = $line->[2];
        $ACCT_INFO->{OUTBYTE2}         = $line->[3];

        $ACCT_INFO->{ACCT_SESSION_TIME} = $line->[4];
 
        $ACCT_INFO->{ACCT_SESSION_ID}   = $line->[5];
        $ACCT_INFO->{NAS_PORT}          = $line->[6];
        $ACCT_INFO->{NAS_IP_ADDRESS}    = $nas_row->[3];
        $ACCT_INFO->{FRAMED_IP_ADDRESS} = $line->[8];

        $ACCT_INFO->{CONNECT_INFO}      = $line->[9];
  
        $ACCT_INFO->{CALLING_STATION_ID}= $line->[10];
        $ACCT_INFO->{USER_NAME}         = $line->[11];
        $ACCT_INFO->{SESSION_START}     = $line->[12];
  
        $ACCT_INFO->{ACCT_TERMINATE_CAUSE} = 3;
        $ACCT_INFO->{ACCT_STATUS_TYPE}  = 'Stop';    	
        
        #while(my($k,$v) = each   %$ACCT_INFO ) {
  	    #  print "$k./ $v,<br>";
        #} 	

        my $r = $Acct->accounting($ACCT_INFO, $nas);
  

        if ($Acct->{errno}) {
          push @results, "$ACCT_INFO->{USER_NAME} $_ERROR";
         }
        else {
        	push @results, "$ACCT_INFO->{USER_NAME} $_ADDED";
         }

     }
 	 }

    $table = $html->table( { width      => '100%',
                          } );

    foreach my $val (@results) {
      $table->addrow($val);
    }


    $html->message('info', $_REPORTS, $table->show());	
    my @del_arr = split(/, /, $FORM{dellist});
	  $sessions->online_del({ SESSIONS_LIST => \@del_arr });
   }
  else {
    $nas->info({ NAS_ID => $FORM{nas_id} });
    my $ACCT_INFO = $sessions->online_info({ NAS_ID        => $FORM{nas_id},
                                           NAS_PORT        => $FORM{nas_port_id},
                                           ACCT_SESSION_ID => $FORM{tolog}
                                       });

  if ($ACCT_INFO->{TOTAL} < 1) {
    $html->message('err', $_ERROR, "$_NOT_EXIST");	
    return 0;
   }


  $ACCT_INFO->{INBYTE}           = $ACCT_INFO->{ACCT_INPUT_OCTETS};
  $ACCT_INFO->{OUTBYTE}          = $ACCT_INFO->{ACCT_OUTPUT_OCTETS};
  $ACCT_INFO->{INBYTE2}          = $ACCT_INFO->{ACCT_EX_INPUT_OCTETS};
  $ACCT_INFO->{OUTBYTE2}         = $ACCT_INFO->{ACCT_EX_OUTPUT_OCTETS};
  $ACCT_INFO->{ACCT_STATUS_TYPE} = 'Stop';
  $ACCT_INFO->{ACCT_TERMINATE_CAUSE} = 3;



  # Exppp VENDOR params           
  my $r = $Acct->accounting($ACCT_INFO, $nas);
  

  if ($Acct->{errno}) {
    $html->message('err', $_ERRNO, "$Acct->{errno} $Acct->{errstr}");	
   }
  else {
  	my $table = $html->table( { width => '100%'} );
  	foreach my $k (sort keys %$ACCT_INFO) {
 		  $table->addrow($k, $ACCT_INFO->{$k});
  	 }

    $table->addrow('-', '-');
  	foreach my $k (sort keys %$Acct) {
 		    $table->addrow($k, $Acct->{$k});
  	  }

  	$html->message('info', $_ADDED, $table->show());	
   }
  
  $sessions->online_del({ NAS_ID          => $ACCT_INFO->{NAS_ID},
                          NAS_PORT        => $ACCT_INFO->{NAS_PORT},
                          ACCT_SESSION_ID => $ACCT_INFO->{ACCT_SESSION_ID}
                        });
   }
 }
elsif($FORM{del} || $FORM{dellist}) {
  if ($FORM{dellist}) {
    my @sessions_list = split(/, /, $FORM{dellist});
    $sessions->online_del({ SESSIONS_LIST => \@sessions_list });
    $FORM{del} = $FORM{dellist};
   }
  else {
    $sessions->online_del({
   	            NAS_ID          => $FORM{nas_id},
                NAS_PORT        => $FORM{nas_port_id},
                ACCT_SESSION_ID => $FORM{del}
                           });
   }

  if (! $sessions->{errno}) {
    my $table = $html->table( { width => '100%',
                                rows => [ [ "NAS_ID",          $FORM{nas_id}     ],
                                          [ "NAS_PORT",        $FORM{nas_port_id}],
                                          [ "ACCT_SESSION_ID", $FORM{del}        ]
                                        ]
                               } );
   

    my $MODULE = (defined($self->{MODULE})) ? $self->{MODULE} : '';
    my $action_type = ($attr->{TYPE}) ? $attr->{TYPE} : '';

    
    $html->message('info', $_DELETED, $table->show());	
   }

}






# online count
my $list = $sessions->online_count( { %LIST_PARAMS, FIELDS => \@ACTIVE_FIELDS } );	
my $nas_list = $nas->list();

$form_link = '';
my $cure = '';
if($FORM{ZAPED}) {
	$LIST_PARAMS{ZAPED}=1;
	$form_link = $html->button("On line", "index=$index", { BUTTON => 1 });
	$cure = 'Zap';
	$pages_qs .= "&ZAPED=1";
 } 
else {
	$sessions->{ZAPED}=0 if (! $sessions->{ZAPED});
 	$form_link = $html->button("$_ZAPED ($sessions->{ZAPED})", "index=$index&ZAPED=1", { BUTTON => 1 });
 	$cure='Online';
}


my $table2 = $html->table( { width      => '100%',
                             cols_align => ['left', 'right', 'right', 'right']
                         } );

$table2->addtd(   $table2->td($_TOTAL, { bgcolor => $_COLORS[0] }), 
                  $table2->td($sessions->{ONLINE}, { bgcolor => $_COLORS[0] }), 
                  $table2->td($form_link) 
               );

print $table2->show();

#Field formed section
my @FIELDS_ALL = ("$_USER", "$_FIO", "$_PORT", "IP", "$_DURATION", "$_RECV", "$_SENT",
                             "Ex_IN", "Ex_OUT", 
                             "CID",  "SESSION_ID", "$_TARIF_PLAN", "CONNECT_INFO", 
                             "$_SPEED",
                             "$_SUM",
                             "$_STATUS",
                             "$_ADDRESS",
                             "$_GROUP",
                             "TURBO",
                             "$_JOIN_SERVICE"
                             );


if ($sessions->{TOTAL} > 500)  {
	
  my $table = $html->table( { width      => '100%',
                            caption    => "Online $_TOTAL",
                            border     => 1,
                            title      => [ "NAS ID", "NAS $_NAME", "NAS IP", "$_TYPE", "$_SESSIONS", "$_USERS", "ZAPPED", "$_ERROR", "-"  ],
                            cols_align => ['right', 'left', 'right', 'right', 'right', 'right', 'right', 'right',  'right', 'center:noprint' ],
                            qs         => $pages_qs,
                            ID         => 'ONLINE'
                            
                         } );

  foreach my $line (@$list) {
    $table->{rowcolor}= ($line->[0] == $FORM{NAS_ID}) ?  $_COLORS[0] : undef;

    $table->addrow($line->[0],
    $line->[1],
    $line->[2],
    $line->[3],
    $line->[4],
    $line->[5],
    ($line->[6] > 0) ? $html->button("$line->[6]", "index=$index&NAS_ID=$line->[0]&ZAPED=1") : 0,
    $line->[7],
    $html->button("$_SHOW", "index=$index&NAS_ID=$line->[0]", { BUTTON => 1 })
   );
  }

  print $table->show();
  
  
  if (! $FORM{NAS_ID} && ! $FORM{ZAPED} && ! $FORM{FILTER}) {
  	print dv_online_search({ FIELDS_ALL => \@FIELDS_ALL }); 
  	
  	return 0;
   }
  else {
  	$pages_qs .= "&NAS_ID=$FORM{NAS_ID}";
  	$LIST_PARAMS{NAS_ID}=$FORM{NAS_ID};
   }
}





my @CAPTION = (); 
my @ACTIVE_FIELDS = (0,1,2,3,4,5,6,7,8);

if ($FORM{'fields'}) {
 @ACTIVE_FIELDS = split(/, /, $FORM{'fields'});
 $FORM{'fields'}=~s/ //g;
 $admin->{WEB_OPTIONS} =~ s/;DV_MONITOR=(.+);//g;
 $admin->change({ AID => $admin->{AID}, WEB_OPTIONS => "$admin->{WEB_OPTIONS};DV_MONITOR=$FORM{'fields'};"})
}
elsif ($admin->{WEB_OPTIONS} =~ /DV_MONITOR=(.+);/) {
	@ACTIVE_FIELDS = split(/,/, $1);
}

foreach my $field_id (@ACTIVE_FIELDS) {
	push @CAPTION, $FIELDS_ALL[$field_id];
}





if (defined($FORM{FILTER})) {
	$LIST_PARAMS{FILTER_FIELD}=$FORM{FILTER_FIELD};
	$LIST_PARAMS{FILTER}=$FORM{FILTER};
}


$sessions->online( { %LIST_PARAMS, FIELDS => \@ACTIVE_FIELDS } );	
my $dub_ports  = $sessions->{dub_ports};
my $dub_logins = $sessions->{dub_logins};

$table = $html->table( { width      => '100%',
                         caption    => "$cure",
                         border     => 1,
                         title      => [ @CAPTION, '-', '-', '-' ],
                         cols_align => ['left', 'left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'center:noprint', 'center:noprint', 'center:noprint'],
                         qs         => $pages_qs,
                         ID         => 'ONLINE',
                         header     => ($FORM{ZAPED}) ? "<script language=\"JavaScript\" type=\"text/javascript\">
<!-- 
function CheckAllINBOX() {
  for (var i = 0; i < document.users_list.elements.length; i++) {
    if(document.users_list.elements[i].type == 'checkbox' && document.users_list.elements[i].name == 'dellist'){
      document.users_list.elements[i].checked =         !(document.users_list.elements[i].checked);
    }
  }
}
//-->
</script>\n<a href=\"javascript:void(0)\" onClick=\"CheckAllINBOX();\">$_SELECT_ALL</a>\n" : undef

                         } );

my $online = $sessions->{nas_sorted};
#my $nas_list = $nas->list();

foreach my $nas_row (@$nas_list) {
  next if (! defined($online->{$nas_row->[0]}));
  next if (($FORM{NAS_ID} && $FORM{NAS_ID} != $nas_row->[0]) && ! $FORM{ZAPED});

  my $l = $online->{$nas_row->[0]};
  my $total = $#{@$l} + 1;  
  $table->{rowcolor}=$_COLORS[0];
  $table->{extra}="colspan='". ($#CAPTION +1 ) . "' class='small'";
  $table->addrow("$nas_row->[0]:". $html->b($nas_row->[1]) .":$nas_row->[3]:$_TOTAL: $total (". $html->button("Zap $_SESSIONS", "index=$index&zapall=1&NAS_ID=$nas_row->[0]", { MESSAGE => "Do you realy want zap all sessions on NAS '$nas_row->[0]' ?" }) .')'  );
  
  foreach my $line (@$l) {
    undef($table->{rowcolor});
    undef($table->{extra});

    my @rows  = ();
    for(my $i=0; $i<=$#ACTIVE_FIELDS; $i++) {
    	  my $value=$line->[$i]; 
    	  
    	  if ($ACTIVE_FIELDS[$i]==5 || $ACTIVE_FIELDS[$i] == 6 
    	     ||  $ACTIVE_FIELDS[$i]==7 || $ACTIVE_FIELDS[$i] ==8) {
    	  	$value = int2byte($line->[$i]);
    	   }
    	  elsif ($ACTIVE_FIELDS[$i] == 0) {
          my $user_info =  "$_FIO: $line->[1]\n$_PHONE: $line->[$#ACTIVE_FIELDS+1]\n".
                           "$_TARIF_PLAN: $line->[$#ACTIVE_FIELDS+15]\n".
                           "$_DEPOSIT: $line->[$#ACTIVE_FIELDS+5]\n".
                           "$_CREDIT: $line->[$#ACTIVE_FIELDS+6]\n".
                           "$_SPEED: \n".
                           "SESSION_ID: $line->[$#ACTIVE_FIELDS+13]\n".
                           "CID: $line->[$#ACTIVE_FIELDS+14]\n".
                           "CONNECT_INFO: \n".
                           "UPDATES: $line->[$#ACTIVE_FIELDS+8]";

    	  	$value = "<acronym title='$user_info'>".$html->button($line->[0], "index=15&UID=$line->[$#ACTIVE_FIELDS+3]")."</acronym>";
          #Dublicate logins color yelow
 	  	    if (defined($dub_logins->{$line->[0]}) && $dub_logins->{$line->[0]} > 1) { $table->{rowcolor}='#FFFF00'; }
    	   }	
    	  # Dub ports color green
    	  elsif ($ACTIVE_FIELDS[$i] == 2) {
           if (defined($dub_ports->{$nas_row->[0]}{$line->[$i]}) && $dub_ports->{$nas_row->[0]}{$line->[$i]} > 1) { $table->{rowcolor}='#00FF40';    }    	  	
    	   }
    	  elsif ($ACTIVE_FIELDS[$i] == 3) {
    	  	$value = int2ip($line->[$i]);
    	   }
    	  
    	  push @rows, $value;
      }


    if ($line->[$#ACTIVE_FIELDS + 9] > 3)  { $table->{rowcolor}='#FF0000';  }
    my $zap = $html->button('Z', "index=$index&zap=$nas_row->[0]+".$line->[$#ACTIVE_FIELDS + 12]."+". $line->[($#ACTIVE_FIELDS + 13)].$pages_qs, { TITLE => 'Zap', BUTTON => 1 });
    my $hangup = ($FORM{ZAPED}) ? $html->form_input('dellist', "$line->[$#ACTIVE_FIELDS + 13]", { TYPE => 'checkbox', BUTTON => 1  } ) : $html->button('H', "index=$index&FRAMED_IP_ADDRESS=$line->[$#ACTIVE_FIELDS+2]&hangup=$nas_row->[0]+$line->[$#ACTIVE_FIELDS + 12]+$line->[$#ACTIVE_FIELDS + 13]+$line->[$#ACTIVE_FIELDS + 11]&UID=$line->[$#ACTIVE_FIELDS+3]$pages_qs", { TITLE => 'Hangup', BUTTON => 1 });


    $table->addrow(@rows,
     $html->button('P', "index=$index&NAS_ID=$FORM{NAS_ID}&ping=$line->[$#ACTIVE_FIELDS+2]$pages_qs", { TITLE => 'ping', BUTTON => 1 }),
     "$zap",
     "$hangup");
  }
}


my $output = $table->show();





if ($FORM{ZAPED}) {
  $output = $html->form_main({ CONTENT => $output,
	                             HIDDEN  => { index => "$index",
	                       	                  ZAPED => 1,
	                       	                  NAS_ID => $FORM{NAS_ID} },
	                             SUBMIT  => { go    => "$_DEL",
	                             	            tolog => "$_ADD to LOG" },
	                             METHOD  => 'POST',
	                             NAME    => 'users_list'
                            });
 }
else {
  $output .= dv_online_search({ FIELDS_ALL    => \@FIELDS_ALL, 
  	                            ACTIVE_FIELDS => \@ACTIVE_FIELDS 
  	                            }); 

  $output .= $html->button('Zap All', "index=$index&zapall=1", { MESSAGE => "Do you realy want ZAP all sessions ?", BUTTON => 1 });
 }
 
 print  $output;
}


#**********************************************************
#
#**********************************************************
sub dv_online_search {
	my ($attr) = @_;
	
	my $FIELDS_ALL    = $attr->{FIELDS_ALL};
	my $ACTIVE_FIELDS = $attr->{ACTIVE_FIELDS};
my $table2 = $html->table({ width => '100%' });
my @arr = ();
my $i=0;
foreach my $name ( @$FIELDS_ALL ) {
  my $ex_info = ''; #($attr->{OIDS_EXINFO}->{$name}{DESCRIBE}) ?  " ($attr->{OIDS_EXINFO}->{$name}{ACCESS})<br>$attr->{OIDS_EXINFO}->{$name}{DESCRIBE}" : '';
  push @arr, $html->form_input('fields', "$i", { TYPE => 'checkbox', STATE => (in_array($i, $ACTIVE_FIELDS)) ? 1 : undef  }). ' '. $html->b($name) ." $ex_info";

  if ($#arr > 2) {
    $table2->addrow(@arr);
    @arr = ();
  }
$i++;
}


if ($#arr > -1 ) {
  $table2->addrow(@arr);
 }


my $FIELDS_SEL = $html->form_select('FILTER_FIELD', 
                                { SELECTED      => $FORM{FILTER_FIELD},
 	                                SEL_ARRAY     => $FIELDS_ALL,
 	                                ARRAY_NUM_ID  => 1
 	                               });

my $table = $html->table( { width       => '100%',
                            title_plain => [ 
                                           " $_FILTERS: ". $html->form_input('FILTER', $FORM{FILTER}) .
                                           " $_FIELDS: $FIELDS_SEL".
                                           " $_REFRESH (sec): ".   $html->form_input('REFRESH', int($FORM{REFRESH}), { SIZE => 4 } ),
                                           $html->form_input('SHOW',  $_SHOW, { TYPE => 'SUBMIT'})  
                                         ],
                             cols_align => ['center:noprint', 'center:noprint'],
                           });
	
	return $html->form_main({ CONTENT => $table2->show(). $table->show(),
	                          HIDDEN  => { index  => "$index",
	                              	       NAS_ID => $FORM{NAS_ID}},
	                          METHOD  => 'GET'
                           });
}

#**********************************************************
# Whow sessions from log
# dv_sessions()
#**********************************************************
sub dv_sessions {
  my ($list, $sessions) = @_;
#Session List

if (! $list) {
  if (! defined($FORM{sort})) {
	  $LIST_PARAMS{SORT} = 2;
	  $LIST_PARAMS{DESC} = 'DESC';
  }

  my $nas = Nas->new($db, \%conf);
  $sessions->{SEL_NAS} = $html->form_select('NAS_ID', 
                                          { 
 	                                          SELECTED          => $FORM{NAS_ID},
 	                                          SEL_MULTI_ARRAY   => [['', $_ALL], @{ $nas->list({ %LIST_PARAMS }) } ],
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });

  $sessions->{TERMINATE_CAUSE_SEL} = $html->form_select('TERMINATE_CAUSE', 
                                          { 
 	                                          SELECTED          => $FORM{TERMINATE_CAUSE},
 	                                          SEL_HASH          => {
                      '' => '',
                      0  => 'Unknown',
                      1  => 'User-Request',
                      2  => 'Lost-Carrier',
                      3  => 'Lost-Service',
                      4  => 'Idle-Timeout',
                      5  => 'Session-Timeout',
                      6  => 'Admin-Reset',
                      7  => 'Admin-Reboot',
                      8  => 'Port-Error',
                      9  => 'NAS-Error',
                      10 => 'NAS-Request',
                      11 => 'NAS-Reboot',
                      12 => 'Port-Unneeded',
                      13 => 'Port-Preempted',
                      14 => 'Port-Suspended',
                      15 => 'Service-Unavailable',
                      16 => 'Callback',
                      17 => 'User-Error',
                      18 => 'Host-Request',
                      19 => 'Supplicant-Restart',
                      20 => 'Reauthentication-Failure',
                      21 => 'Port-Reinit',
                      22 => 'Port-Disabled'
                    }

 	                                        });

  form_search({ SEARCH_FORM => $html->tpl_show(_include('dv_sessions_search', 'Dv'),
 	                                            { %FORM, %$sessions },
 	                                            { notprint => 1 })  	
                                            });
  if ($FORM{search}) { 
    $sessions = Dv_Sessions->new($db, $admin, \%conf);
    $list = $sessions->list({ %LIST_PARAMS });	
   }
  else {
    return 0;
   }
}


if ($sessions->{TOTAL} < 1) {
	$html->message('info', $_INFO, "$_NO_RECORD");
	return 0;
}



my $table = $html->table( { width      => '100%',
                            caption    => "$_SESSIONS",
                            border     => 1,
                            title      => ["$_USER", "$_START", "$_DURATION", "$_TARIF_PLAN", "$_SENT", "$_RECV", 
                             "CID", "NAS", "IP", "$_SUM", "-", "-"],
                            cols_align => ['left', 'right', 'right', 'RIGHT', 'right', 'right', 'right', 'right', 'right', 'right', 'center:noprint', 'center:noprint'],
                            qs         => $pages_qs,
                            pages      => $sessions->{TOTAL},
                            recs_on_page => $LIST_PARAMS{PAGE_ROWS},
                            ID         => 'DV_SESSIONS'
                         } );

my $delete = '';
use Billing;
my $Billing = Billing->new($db, \%conf);	



foreach my $line (@$list) {
  if ($permissions{3}{1} && $LIST_PARAMS{UID}) {
    $delete = $html->button($_DEL, "index=". $index ."$pages_qs&del=$line->[12]+$line->[11]+$line->[7]+$line->[1]+$line->[9]+$line->[0]", 
       { MESSAGE => "$_DEL Session SESSION_ID $line->[11]?" }
      );
   }

#  my($UID, 
#     $SUM, 
#     $BILL_ID, 
#     $TARIF_PLAN, 
#     $TIME_TARIF, 
#     $TRAF_TARIF) = $Billing->session_sum("$line->[0]", 
#                                            $line->[13], 
#                                            $line->[14], 
#                                            {  OUTBYTE  =>  $line->[4],
#                                               INBYTE   =>  $line->[5],
#                                               OUTBYTE2 =>  $line->[15],
#                                               INBYTE2  =>  $line->[16]
#                                             });
  
# = $Billing->session_sum("$RAD->{USER_NAME}", 
#                                                 $RAD->{SESSION_START}, 
#                                                 $RAD->{ACCT_SESSION_TIME}, 
#                                                 $RAD);
#
  
  $SUM = ''; #sprintf("%.6f", $SUM);
  #my $n = ($SUM != $line->[9])  ? '!!!' : '';
  #my $test = "<br>$n <b>$SUM</b>";
#  , 
#     $BILL_ID, 
#     $TARIF_PLAN, 
#     $TIME_TARIF, 
#     $TRAF_TARIF\n";

  $table->addrow(
     $html->button("$line->[0]", "index=11&UID=$line->[12]"),
     $line->[1], 
     $line->[2],  
     $line->[3],  
     int2byte($line->[4], { DIMENSION => $FORM{DIMENSION} }), 
     int2byte($line->[5], { DIMENSION => $FORM{DIMENSION} }), 
     $line->[6],
     $line->[7], 
     $line->[10], 
     "$line->[9]", 
     "(". 
        $html->button("D", "index=$index&UID=$line->[12]&SESSION_ID=$line->[11]", { TITLE => "$_DETAIL" } )
      . ")", 
     $delete);
}

print $table->show();
}


#**********************************************************
# dv_use_all_monthes();
#**********************************************************
sub dv_use_allmonthes {

  $FORM{allmonthes}=1;
  dv_use();
}


#**********************************************************
# dv_use();
#**********************************************************
sub dv_use {

my %CAPTIONS_HASH = ('1:DATE:right'            => $_DATE,  	
                     '2:USERS:left'            => $_USERS,
                     '3:USERS_FIO:left'        => $_FIO,
                     '4:TP:left'               => $_TARIF_PLAN,
                     '5:SESSIONS:right'        => $_SESSIONS,
                     '6:TRAFFIC_RECV:right'    => "$_TRAFFIC $_RECV",
                     '7:TRAFFIC_SENT:right'    => "$_TRAFFIC $_SENT",
                     '8:TRAFFIC_SUM:right'     => $_TRAFFIC,
                     '9:TRAFFIC_2_SUM:right'   => $_TRAFFIC." 2",
                     '91:DURATION:right'       => $_DURATION,
                     '92:SUM:right'            => $_SUM);


my %ACCT_TERMINATE_CAUSES = (
                      'Unknown'             =>     0,
                      'User-Request'        =>     1,
                      'Lost-Carrier'        =>     2,
                      'Lost-Service'        =>     3,
                      'Idle-Timeout'        =>     4,
                      'Session-Timeout'     =>     5,
                      'Admin-Reset'         =>     6,
                      'Admin-Reboot'        =>     7,
                      'Port-Error'          =>     8,
                      'NAS-Error'           =>     9,
                      'NAS-Request'         =>     10,
                      'NAS-Reboot'          =>     11,
                      'Port-Unneeded'       =>     12,
                      'Port-Preempted'      =>     13,
                      'Port-Suspended'      =>     14,
                      'Service-Unavailable' =>     15,
                      'Callback'            =>     16,
                      'User-Error'          =>     17,
                      'Host-Request'        =>     18,
                      'Supplicant-Restart'  =>     19,
                      'Reauthentication-Failure' => 20,
                      'Port-Reinit'         =>     21,
                      'Port-Disabled'       =>     22       
                    );

my %ACCT_TERMINATE_CAUSES_REV = reverse %ACCT_TERMINATE_CAUSES;

    my $i=1; 
    my $list = $users->config_list({ PARAM => 'ifu*'  });
    my %INFO_LISTS = (); 

    

    foreach my $line (@$list) {
      my $field_id       = '';
      if ($line->[0] =~ /ifu(\S+)/) {
    	  $field_id = $1;
       }

      my($position, $type, $name)=split(/:/, $line->[1]);

      $CAPTIONS_HASH{(90+$i).':'.$field_id.':left'}=$name;

      if ($type == 2) {
        my $list = $users->info_lists_list( { LIST_TABLE => $field_id.'_list' });
        foreach my $line (@$list) {
          $INFO_LISTS{$field_id}{$line->[0]}=$line->[1];
         }
    	
       }
      $i++;
     }



#  $FORM{FIELDS} = 'DATE, USERS_COUNT, SESSIONS, TRAFFIC_SUM, TRAFFIC_2_SUM, DURATION, SUM' if (! $FORM{FIELDS});

  my %HIDDEN = ();

  $HIDDEN{COMPANY_ID}=$FORM{COMPANY_ID} if ($FORM{COMPANY_ID});
  $HIDDEN{sid}=$sid if ($FORM{sid}); 


  reports({ DATE          => $FORM{DATE}, 
  	        REPORT        => '',
  	        HIDDEN        => \%HIDDEN,
  	        EX_PARAMS     => { HOURS => "$_HOURS",
  	        	                 USERS => "$_USERS"
  	        	                 }, 
  	        EXT_TYPE      => { TP              => "$_TARIF_PLANS",
  	        	                 GID             => "$_GROUPS",
  	        	                 TERMINATE_CAUSE => 'TERMINATE_CAUSE'
  	        	                 }, 
  	        PERIOD_FORM		=> 1,
  	        FIELDS        => { %CAPTIONS_HASH },
  	        XML           => 1,
  	        EX_INPUTS     => [ $html->form_select('DIMENSION', { SELECTED   => $FORM{DIMENSION},
 	                                                               SEL_HASH   => {'' => 'Auto', 
 	                                                               	              'Bt' => 'Bt',
 	                                                               	              'Kb' => 'Kb', 
 	                                                               	              'Mb' => 'Mb', 
 	                                                               	              'Gb' => 'Gb'
 	                                                               	             },
 	                                                               NO_ID       => 1
                                                                } )
                               ]
  	       });


if ($FORM{TP_ID}) {
  $LIST_PARAMS{TP_ID}=$FORM{TP_ID} ;
  $pages_qs .= "&TP_ID=$FORM{TP_ID}" ;
 }

if ($FORM{COMPANY_ID}) {
 	$LIST_PARAMS{COMPANY_ID}=$FORM{COMPANY_ID};
  $pages_qs .= "&COMPANY_ID=$FORM{COMPANY_ID}";
 }


my ($tables_sessions);
my $output = '';

my %TP_NAMES    = ();
my %GROUP_NAMES = ();

my %DATA_HASH = ();
my %CHART = ();
my %AVG = (MONEY    => 0,
           TRAFFIC  => 0,
           DURATION => 0);

my @CHART_TYPE  = ('column', 'line');
my @CHART_TYPE2 = ('area', 'area');
my $graph_type='';

#Day reposrt
if (defined($FORM{DATE})) {



  #Used Traffic
  $table_sessions = $html->table({ width      => '100%',
	                                 caption    => "$_SESSIONS", 
                                   title      => ["$_DATE", "$_USERS", "$_SESSIONS", "$_TRAFFIC ", "$_TRAFFIC 2", $_DURATION, $_SUM],
                                   cols_align => ['right', 'left', 'right', 'right', 'right', 'right', 'right'],
                                   qs         => $pages_qs,
                                   ID         => 'DV_REPORTS_SESSIONS'
                                });

  if ($FORM{EX_PARAMS} && $FORM{EX_PARAMS} eq 'HOURS') {

 	  my $list = $sessions->reports({ %LIST_PARAMS });
    foreach my $line (@$list) {
      $table_sessions->addrow($html->b($line->[0]), 
        $line->[1], 
        $line->[2], 
        int2byte($line->[3], { DIMENSION => $FORM{DIMENSION} }),  
        int2byte($line->[4], { DIMENSION => $FORM{DIMENSION} }),  
        $line->[5], 
        $html->b($line) );

      $AVG{USERS}    = $line->[1] if ($AVG{USERS} < $line->[1]);
      $AVG{TRAFFIC}  = $line->[3] if ($AVG{TRAFFIC} < $line->[3]);

      $AVG{DURATION} = time2sec($line->[5]) if ($AVG{DURATION} < time2sec($line->[5]));
      $AVG{MONEY}    = $line->[6] if ($AVG{MONEY} < $line->[6]);

      if ($line->[0] =~ /(\d+)-(\d+)-(\d+) (\d+)/) {
      	 $num = $4+1;
        }
      elsif ($line->[0] =~ /(\d+)-(\d+)/) {
      	 $CHART{X_LINE}[$num]=$line->[0];
       	 $num++;
       }
     
      $DATA_HASH{USERS}[$num]     = $line->[1];      
      $DATA_HASH2{TRAFFIC}[$num]  = $line->[3];
      $DATA_HASH2{DURATION}[$num] = time2sec($line->[5]);
      $DATA_HASH{MONEY}[$num]     = $line->[6];

     }

    $graph_type='day_stats';
    $output = $html->make_charts({  
	        PERIOD     => $graph_type,
	        DATA       => \%DATA_HASH2,
	        AVG        => \%AVG,
	        TYPE       => ['area', 'area'],
	        TRANSITION => 1,
          OUTPUT2RETURN => 1	 
       });

   }
  else {
    my $list = $sessions->reports({ %LIST_PARAMS });
    foreach my $line (@$list) {
      $table_sessions->addrow($html->b($line->[0]), 
        $html->button("$line->[1]", "index=15&UID=$line->[7]&DATE=$line->[0]"), 
        $line->[2], 
        int2byte($line->[3], { DIMENSION => $FORM{DIMENSION} }),  
        int2byte($line->[4], { DIMENSION => $FORM{DIMENSION} }),  
        $line->[5], 
        $html->b($line->[6]) );
     }
  }

 }
else {
  #Used Traffic
  my @caption     = ();  
  my @field_align = ();
 
  my %fields_hash = (); 
  my @fields_arr  = ();
  if ($FORM{FIELDS}) {
  	@fields_arr = split(/, /, $FORM{FIELDS});
   	foreach my $line (@fields_arr) {
   		$fields_hash{$line}=1;
   	 }

    my $i = 0;
    foreach my $line (sort keys %CAPTIONS_HASH) {
      my($k, $val, $align)=split(/:/, $line);

      if ($fields_hash{$val}) {
  	    push @caption, $CAPTIONS_HASH{$line};
  	    push @field_align, $align;
  	    $fields_arr[$i]=$val;
  	    $i++;
  	   }
      
     }
   }
  else {
  	@caption     = ("$_DATE", "$_USERS", "$_SESSIONS", "$_TRAFFIC ", "$_TRAFFIC 2", $_DURATION, $_SUM); 
  	@field_align = ('right', 'right', 'right', 'right', 'right', 'right', 'right');
   }

    $graph_type='month_stats';

    if ($FORM{TYPE} eq 'USER') {
    	$caption[0]="$_USER";
  	  $caption[1]="$_LOGINS";
     }
    elsif ($FORM{TYPE} eq 'TERMINATE_CAUSE') {
    	$caption[0]="$_ERROR";
    	@CHART_TYPE=('pie');
    	$graph_type='pie';
     }
    elsif ($FORM{TYPE} eq 'TP') {
    	$caption[0]="$_TARIF_PLAN";

    	@CHART_TYPE2  = ('column', 'line');
    	$CHART{AXIS_CATEGORY_skip}=0;

    	my $list = $tariffs->list();
   	
    	foreach my $line (@$list) {
    		$TP_NAMES{$line->[0]}=$line->[1];
    	 }
     }
    elsif($FORM{TYPE} eq 'GID') {
    	@CHART_TYPE2  = ('column', 'line');
    	$CHART{AXIS_CATEGORY_skip}=0;

    	$caption[0]="$_GROUPS";
    	my $list = $users->groups_list();
   	
    	foreach my $line (@$list) {
    		$GROUP_NAMES{$line->[0]}=$line->[1];
    	 }

     }
    elsif ($FORM{TP_ID}) {
    	$caption[0]="$_LOGINS";
    	$field_align[0]='left';
     }
  
  $table_sessions = $html->table({ width      => '100%',
	                                 caption    => "$_SESSIONS", 
                                   title      => \@caption,
                                   cols_align => \@field_align,
                                   qs         => $pages_qs,
                                   ID         => 'DV_REPORTS_SESSIONS'
                               } );


  
  my $num = 0;

  
  my $list = $sessions->reports({ %LIST_PARAMS });
  
  
  foreach my $line (@$list) {
    my @rows = ();
    
    if ($FORM{FIELDS}) {
      for(my $i=0; $i<=$#caption; $i++) {
        if ($fields_arr[$i] =~ /TRAFFIC/) {
          push @rows, int2byte($line->[$i], { DIMENSION => $FORM{DIMENSION} });
         }
        elsif ($fields_arr[$i] =~ /USERS/ || $fields_arr[$i] =~ /USERS_FIO/) {
          push @rows, $html->button("$line->[$i]", "index=11&UID=". ($line->[$#fields_arr+1]));
         }
        elsif ($fields_arr[$i] =~ /^_/ && ref ($INFO_LISTS{$fields_arr[$i]}) eq 'HASH' ) {
        	push @rows, ($INFO_LISTS{$fields_arr[$i]}{$line->[$i]}) ? $INFO_LISTS{$fields_arr[$i]}{$line->[$i]} : '';
         }
        elsif ($fields_arr[$i] =~ 'TP') {
        	push @rows, $button = $line->[0].'. ' .$html->button($TP_NAMES{$line->[0]}, "index=$index&TP_ID=$line->[0]$pages_qs");
         }
        elsif ($fields_arr[$i] =~ 'GID') {
        	push @rows, $button = $line->[0].'. ' .$html->button($GROUP_NAMES{$line->[0]}, "index=$index&GID=$line->[0]$pages_qs");
         }
        else {
          push @rows, $line->[$i];
         }
      }
     }
    else {
    	 my $button = '';
    	 if ($FORM{TYPE} eq 'USER') {
    	 	 $button = $html->button("$line->[0]", "index=11&UID=$line->[7]");
    	  }
    	 elsif ($FORM{TYPE} eq 'TP') {
    	 	 $button = $line->[0].'. ' .$html->button($TP_NAMES{$line->[0]}, "index=$index&TP_ID=$line->[0]$pages_qs");
    	  }
    	 elsif ($FORM{TYPE} eq 'GID') {
    	 	 $button = $line->[0].'. ' .$html->button($GROUP_NAMES{$line->[0]}, "index=$index&GID=$line->[0]$pages_qs");
    	  }
    	 elsif ($FORM{TP_ID}) {
    	 	 $button = $html->button("$line->[0]", "index=11&$type=$line->[0]&UID=$line->[7]");
    	  }
       elsif ($FORM{TYPE} eq 'TERMINATE_CAUSE') {
         $button = $html->button($ACCT_TERMINATE_CAUSES_REV{$line->[0]}, "index=$index&$type=$line->[0]&TERMINATE_CAUSE=$line->[0]$pages_qs");

         $DATA_HASH{TYPE}[$num+1]  = $line->[3];
         $CHART{X_TEXT}[$num]      = $line->[0];

         $num++;
        }
    	 else {
    	 	 $button = $html->button("$line->[0]", "index=$index&$type=$line->[0]$pages_qs");
    	  }
    	  
    	 @rows = ($button, 
       $line->[1], 
       $line->[2], 
       int2byte($line->[3], { DIMENSION => $FORM{DIMENSION} }),  
       int2byte($line->[4], { DIMENSION => $FORM{DIMENSION} }),  
       $line->[5], 
       $html->b($line->[6]) );


      if ($FORM{TYPE} ne 'TERMINATE_CAUSE')  {
        $AVG{USERS}    = $line->[1] if ($AVG{USERS} < $line->[1]);
        $AVG{TRAFFIC}  = $line->[3] if ($AVG{TRAFFIC} < $line->[3]);

        $AVG{DURATION} = time2sec($line->[5]) if ($AVG{DURATION} < time2sec($line->[5]));
        $AVG{MONEY}    = $line->[6] if ($AVG{MONEY} < $line->[6]);

        if ($line->[0] =~ /(\d+)-(\d+)-(\d+)/) {
        	 $num = $3;
          }
        elsif ($line->[0] =~ /(\d+)-(\d+)/) {
        	 $CHART{X_LINE}[$num]=$line->[0];
        	 $num++;
         }
        else {
        	$CHART{X_TEXT}[$num]=$line->[0];
        	$num++;
         }
     
        $DATA_HASH{USERS}[$num]     = $line->[1];      
        $DATA_HASH2{TRAFFIC}[$num]  = $line->[3];
        $DATA_HASH2{DURATION}[$num] = time2sec($line->[5]);
        $DATA_HASH{MONEY}[$num]     = $line->[6];
      }

     }

    $table_sessions->addrow(@rows);


   }


if ($graph_type ne 'pie') {
	
$output = $html->make_charts({  
	 PERIOD     => $graph_type,
	 DATA       => \%DATA_HASH2,
	 AVG        => \%AVG,
	   
	 TYPE       => \@CHART_TYPE2,
	 TRANSITION => 1,
   OUTPUT2RETURN => 1,
   %CHART
  });

  #%CHART = ();
}

}



$table = $html->table( { width      => '100%',
                         cols_align => ['right', 'right', 'right', 'right', 'right', 'right'],
                         rows       => [ [ "$_USERS: ".       $html->b( $sessions->{USERS} ),
                                           "$_SESSIONS: ".    $html->b( $sessions->{SESSIONS} ), 
                                           "$_TRAFFIC: ".     $html->b( int2byte($sessions->{TRAFFIC}) ) ."<BR>".
                                           "$_TRAFFIC IN: ".  $html->b( int2byte($sessions->{TRAFFIC_IN}) ) ."<BR>".
                                           "$_TRAFFIC OUT: ". $html->b( int2byte($sessions->{TRAFFIC_OUT}) ) 
                                           , 
                                           
                                           "$_TRAFFIC 2: ". $html->b(int2byte($sessions->{TRAFFIC_2})) ."<br>".
                                           "$_TRAFFIC 2 IN: ". $html->b( int2byte($sessions->{TRAFFIC_2_IN}) ) ."<BR>".
                                           "$_TRAFFIC 2 OUT: ". $html->b( int2byte($sessions->{TRAFFIC_2_OUT}) )
                                          , 
                                           
                                           "$_DURATION: ". $html->b($sessions->{DURATION}), 
                                           "$_SUM: ". $html->b($sessions->{SUM}) ] ],
                         rowcolor   => $_COLORS[2]
                               } );

print $table_sessions->show() . $table->show();

$table = $html->table({ rows => [[ $output  ]] });
print $table->show();


if ($graph_type ne '') {
  $html->make_charts({  
	   PERIOD     => $graph_type,
	   DATA       => \%DATA_HASH,
	   AVG        => \%AVG,
	   TYPE       => \@CHART_TYPE,
	   TRANSITION => 1,
	   %CHART 
    });

}


}



#**********************************************************
# dv_error
#**********************************************************
sub dv_error {
	my ($attr) = @_;
  my $PAGE_ROWS = 25;
  my $login  = ''; 

  my %log_levels_rev = reverse %log_levels;

if ($attr->{USER}) {
  my $user = $attr->{USER};
  $login = $user->{LOGIN};
  $LIST_PARAMS{LOGIN_EXPR} = $user->{LOGIN};
}
elsif ($FORM{LOGIN_EXPR}) {
  $login = $FORM{LOGIN_EXPR};
  $LIST_PARAMS{LOGIN_EXPR} = $FORM{LOGIN_EXPR};
  $pages_qs .= "&LOGIN_EXPR=$FORM{LOGIN_EXPR}";
 }
elsif($FORM{UID}) {
  dv_users();
  return 0;
}

#Sql Part
if ($conf{ERROR2DB}) {
  my $Nas = Nas->new($db, \%conf);
  
  my %nas_ids = ( '' => '',
                  0  => 'UNKNOWN',
                 );

  my $list = $Nas->list();
  foreach my $line (@$list) {
    $nas_ids{$line->[0]} = $line->[1];
   }

  $Dv->{LOG_TYPE_SEL} = $html->form_select('LOG_TYPE', 
                          { 
 	                         SELECTED  => $FORM{LOG_TYPE},
 	                         SEL_HASH  => { '' => '', %log_levels_rev},
                           NO_ID     => 1
   	                      }) ;

  $Dv->{NAS_ID_SEL} = $html->form_select('NAS_ID', 
                          { 
 	                         SELECTED  => $FORM{NAS_ID},
 	                         SEL_HASH  => \%nas_ids,
                           NO_ID     => 1
   	                      }) ;


  form_search({ SEARCH_FORM => $html->tpl_show(_include('dv_errors_search', 'Dv'),
 	                                            { %FORM, %$Dv },
 	                                            { notprint => 1 })    });

  
	if (! $FORM{sort}) {
	  $LIST_PARAMS{SORT}=1;
	  $LIST_PARAMS{DESC}=DESC;
   }


  if ($FORM{search}) {
    $LIST_PARAMS{INTERVAL} = "$FORM{FROM_DATE}/$FORM{TO_DATE}";
   }


  $list = $Nas->log_list({ %LIST_PARAMS  });

  my $table = $html->table( { 
  	                    caption    => $_TOTAL,
	                      width      => '100%',
	                      cols_align => ['right', 'right'],
	                       } );



  my $total = 0;
	foreach my $line (@{ $Nas->{list} }) {
		$table->addrow(
		$log_levels_rev{$line->[0]},
		$line->[1]
		);
    $total += $line->[1];
	 }

	$table->addrow(
		$_TOTAL, $total
		);


  print $table->show();


  $table = $html->table( { caption => "$_ERROR",
	                            width   => '100%',
	                            title   => [ $_DATE, "$_TYPE", "$_ACTION", "$_USER", "$_TEXT", "NAS"],
	                            pages   => $total,
	                            qs      => $pages_qs,
	                            ID      => 'DV_ERRORS'
	                         } );

	foreach my $line (@$list) {
		$table->addrow($line->[0],
		$log_levels_rev{$line->[1]},
		$line->[2],
		$html->button($line->[3], "index=11&LOGIN=$line->[3]"),
		($line->[1] < 5) ? $html->color_mark($line->[4], "#FF0000") : $line->[4],
		$nas_ids{$line->[5]}
		);
	 }

  print $table->show();
  
}


#File part
if (! -f $conf{LOGFILE}) {
	$html->message('info', $_INFO, "'$conf{LOGFILE}' $_NOT_EXIST");
	return 0;
}


if (defined($FORM{LOG_TYPE})) {
	$pages_qs .= "&LOG_TYPE=$FORM{LOG_TYPE}";
}


my ($list, $types, $totals) = show_log("$login", "$conf{LOGFILE}", { DATE      => $FORM{DATE},
	                                                                   LOG_TYPE  => $log_levels_rev{$FORM{LOG_TYPE}},
	                                                                   PG        => $PG,
	                                                                   PAGE_ROWS => 25 #$PAGE_ROWS
	                                                                 });
	                                                                   

	                                                                   
my $table = $html->table( { caption => "System $_ERROR",
	                          width   => '100%',
	                          pages   => $totals,
	                          qs      => $pages_qs,
	                          ID      => 'DV_ERRORS'
	                         } );

foreach my $line (@$list) {
  if ($line =~ m/LOG_WARNING/i) {
     $line = $html->color_mark($line, '#FF0000');
   }

  $table->addrow($line);
}
print $table->show();


$table = $html->table( { 
	                      width      => '100%',
	                      cols_align => ['right', 'right'] } );

$table->addrow($html->button("$_TOTAL", "index=$index&$pages_qs"), $totals);
while(my($k,$v)=each %$types) {
  $table->addrow($html->button($k, "index=$index&LOG_TYPE=$k$pages_qs"), $v);
}


$table->addrow($_SIZE, int2byte((-s $conf{LOGFILE}))) if ($login eq '');

print $table->show();

}


#**********************************************************
# stats
#**********************************************************
sub dv_stats {
	my ($attr) = @_;
 
if (defined($attr->{USER}))	{
	my $user = $attr->{USER};

	$UID = $user->{UID};
	$LIST_PARAMS{UID} = $UID;
	if (! defined($FORM{sort})) {
	  $LIST_PARAMS{SORT}=2;
	  $LIST_PARAMS{DESC}=DESC;
   }

  if (defined($FORM{OP_SID}) and $FORM{OP_SID} eq $COOKIES{OP_SID}) {
 	  $html->message('err', $_ERROR, "$_EXIST $FORM{OP_SID} eq $COOKIES{OP_SID}");
   }
  elsif ($FORM{bm}) {
    use Bills;
    my $Bill = Bills->new($db);
    $Bill->action('add', "$FORM{BILL_ID}", $FORM{sum});
    if($bill->{errno}) {
      $html->message('err', $_ERROR, "[$bill->{errno}] $err_strs{$bill->{errno}}");
     }
    else {
      $html->message('info', $_INFO, "$_ADDED: SUM $FORM{sum}, BILL_ID: $FORM{BILL_ID}");  	
     }
   }
  elsif($FORM{SESSION_ID}) {
  	$pages_qs .= "&SESSION_ID=$FORM{SESSION_ID}";
  	dv_session_detail({ USER => $attr->{USER} });
  	
  	return 0;
  }
}


if ($FORM{del} && $FORM{is_js_confirmed}) {
	if(! defined($permissions{3}{1})) {
     $html->message('err', $_ERROR, 'ACCESS DENY');
     return 0;
	 } 

	my ($UID, $session_id, $nas_id, $session_start_date, $session_start_time, $sum, $login)=split(/ /, $FORM{del}, 7);
	$sessions->del($UID, $session_id, $nas_id, "$session_start_date $session_start_time");
  if (! $sessions->{errno})	 {
  	my $table = $html->table( { 
	                          width => '100%',
                            rows  => [["$_LOGIN",        $login ],
                                     ['SESSION_ID',      $session_id ],
                                     ['NAS_ID',          $nas_id ],
                                     ['SESSION_START',   "$session_start_date $session_start_time" ],
                                     [$_SUM, $sum]
                                    ]
                           } );
  	
  	$html->message('info', $_DELETED, $table->show());
    form_back_money('log', $sum, { UID => $UID }); #
    return 0;
   }
}

if ($sessions->{errno})	 {
	$html->message('err', $_ERROR, "[$sessions->{errno}] $err_strs{$sessions->{errno}}");
 }

#Join Service
  if($users->{COMPANY_ID}) {
     $Dv->info($FORM{UID});

     if ($Dv->{JOIN_SERVICE}) {
       if ($Dv->{JOIN_SERVICE} == 1) {
         my @uids = ();
   	     my $list = $Dv->list({ JOIN_SERVICE => $Dv->{UID}, 
                                COMPANY_ID   => $attr->{USER}->{COMPANY_ID} ,
                                PAGE_ROWS    => 10000
                               });

         foreach my $line (@$list) {
     	     $Dv->{JOIN_SERVICES_USERS} .= $html->button("$line->[0]", "&index=$index&UID=". $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6]) . ' :: ';
     	     push @uids, $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6];
          }
      
         $LIST_PARAMS{UIDS}=$FORM{UID};
         $LIST_PARAMS{UIDS} .= ',' .join(', ', @uids) if ($#uids > -1);
        }
       elsif($Dv->{JOIN_SERVICE}  > 1) {
       	 $Dv->{JOIN_SERVICES_USERS} .= $html->button("$_MAIN", "index=$index&UID=$Dv->{JOIN_SERVICE}") .' :: ';
        }

       my $table = $html->table( { 
	                          width => '100%',
                            rows  => [
                                  ["$_JOIN_SERVICE:",  $Dv->{JOIN_SERVICES_USERS} ]
                                    ]
                           } );

       print $table->show();
    }
	   
 	 }                                    


if ($FORM{rows}) {
  $LIST_PARAMS{PAGE_ROWS}=$FORM{rows};
  $conf{list_max_recs}=$FORM{rows};
  $pages_qs .= "&rows=$conf{list_max_recs}";
 }


if (! $LIST_PARAMS{UID} && $FORM{LOGIN_EXPR}) {
  my $users = Users->new($db, $admin, \%conf); 
  my $list = $users->list( { LOGIN_EXPR => $FORM{LOGIN_EXPR} } );
  if ($users->{TOTAL} == 1) {
	  $LIST_PARAMS{UID}=$list->[0]->[5+$users->{SEARCH_FIELDS_COUNT}];
	  $FORM{UID}=$LIST_PARAMS{UID};
	  $UID = $LIST_PARAMS{UID};
	  $LIST_PARAMS{ACTIVATE}=$list->[0]->[8+$users->{SEARCH_FIELDS_COUNT}];
   }
  else {
  	$html->message('err', $_ERROR, "'$FORM{LOGIN_EXPR}' $_NOT_EXIST");
  	return 0;
   }

  $pages_qs .= "&UID=$LIST_PARAMS{UID}";
}




my $list = $sessions->periods_totals({ %LIST_PARAMS });


my $table = $html->table( { caption     => "$_PERIOD",
	                          width       => '100%',
                            title_plain => ["$_PERIOD", "$_DURATION", "$_SEND", "$_RECV", "$_SUM"],
                            cols_align  => ['left', 'right', 'right', 'right', 'right'],
                            rowcolor    => $_COLORS[1],
                            ID          => 'DV_STATS_PERIOD'
                           } );


for(my $i = 0; $i < 5; $i++) {
	$table->addrow($html->button("$PERIODS[$i]", "index=$index&PERIOD=$i$pages_qs"), 
	  "$sessions->{'duration_'. $i}",
	  int2byte($sessions->{'sent_'. $i}), 
	  int2byte($sessions->{'recv_'. $i}), 
	  int2byte($sessions->{'sum_'. $i})
	 );
 }

print $table->show();


$table = $html->table( { width       => '100%',
	                       rowcolor    => $_COLORS[0],
                         rows        => [[ "$_FROM: ", $html->date_fld2('FROM_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'stats', WEEK_DAYS => \@WEEKDAYS }),
                                            "$_TO: ",  $html->date_fld2('TO_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'stats', WEEK_DAYS => \@WEEKDAYS } ),
                                          $html->form_select('DIMENSION', { SELECTED   => $FORM{DIMENSION},
 	                                                               SEL_HASH   => {'' => 'Auto', 
 	                                                               	              'Kb' => 'Kb', 
 	                                                               	              'Mb' => 'Mb', 
 	                                                               	              'Gb' => 'Gb'
 	                                                               	             },
 	                                                               NO_ID       => 1
                                                                } ),
                                          "$_ROWS: ",  $html->form_input('rows', int($conf{list_max_recs}), { SIZE => 4 } ),
                                          $html->form_input('show', $_SHOW, { TYPE => 'submit' })
                                         ]],
                         ID         => 'STATS_PERIODS_SEARCH'
                      });



print $html->form_main({ CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
	                       HIDDEN  => { sid   => "$sid",
	                                    index => "$index",
	                                    UID   => "$UID",
	                                    },
	                       NAME    => 'stats'
	                      });



if (defined($FORM{show})) {
  $pages_qs .= "&show=1&FROM_DATE=$FORM{FROM_DATE}&TO_DATE=$FORM{TO_DATE}";
  $LIST_PARAMS{INTERVAL} = "$FORM{FROM_DATE}/$FORM{TO_DATE}";
 }
elsif (defined($FORM{PERIOD})) {
	$LIST_PARAMS{PERIOD} = $FORM{PERIOD}; 
	$pages_qs .= "&PERIOD=$FORM{PERIOD}";
}
elsif($FORM{DATE}) {
	$LIST_PARAMS{DATE} = $FORM{DATE}; 
	$pages_qs .= "&DATE=$FORM{DATE}";
}

#Show rest of prepaid traffic
if ($sessions->prepaid_rest({ 
	                            UID  => $LIST_PARAMS{UID},
	                            UIDS => $LIST_PARAMS{UIDS}
	                           })) {

	#Prepaid: period, traffic_type
  my $list = $sessions->{INFO_LIST};

  my $table = $html->table( { caption     => "$_PREPAID",
	                          width       => '100%',
                            title_plain => ["$_TRAFF $_TYPE", "$_BEGIN", "$_END", "$_START", "$_TOTAL (MB)", "$_REST (MB)", "$_OVERQUOTA (MB)"],
                            cols_align  => ['left', 'right', 'right', 'right', 'right', 'right', 'right'],
                            rowcolor    => $_COLORS[1]
                           } );
	
	foreach my $line  (@$list) {
	  $table->addrow(
	    $line->[0], 
      $line->[1], 
      $line->[2], 
      $line->[3], 
      $line->[4],
      ($line->[4] > 0 && $sessions->{REST}->{$line->[0]} > 0) ? $sessions->{REST}->{$line->[0]} : 0,
      ($line->[4] > 0 && $sessions->{REST}->{$line->[0]} < 0) ? abs($sessions->{REST}->{$line->[0]}) : 0
     );
   }

  print $table->show();	 
}


$pages_qs .= "&DIMENSION=$FORM{DIMENSION}"  if ($FORM{DIMENSION});

if (! defined($FORM{sort})) {
  $LIST_PARAMS{SORT}=2;
  $LIST_PARAMS{DESC}=DESC;
 }

dv_stats_calculation($sessions);

#Session List
$list = $sessions->list({ %LIST_PARAMS });	

if ($sessions->{TOTAL} < 1) {
	$html->message('info', $_INFO, "$_NO_RECORD");
	return 0;
}

$table = $html->table( { caption     => "$_SUM",
	                       width       => '100%',
	                       rowcolor    => $_COLORS[1],
                         title_plain => ["$_SESSIONS", "$_DURATION", "$_TRAFFIC $_SENT", "$_TRAFFIC $_RECV", "$_TRAFFIC $_SUM",
                           "$_TRAFFIC 2 $_SENT", "$_TRAFFIC 2 $_RECV",  "$_TRAFFIC $_SUM", "$_SUM"],
                         cols_align  => ['right', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right'],
                         rows        => [ [ $sessions->{TOTAL}, $sessions->{DURATION}, 
                                            int2byte($sessions->{TRAFFIC_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC_OUT}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC_OUT}+$sessions->{TRAFFIC_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC2_IN}, { DIMENSION => $FORM{DIMENSION} }),
                                            int2byte($sessions->{TRAFFIC2_OUT}, { DIMENSION => $FORM{DIMENSION} }),
                                            int2byte($sessions->{TRAFFIC2_OUT}+$sessions->{TRAFFIC2_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            $sessions->{SUM} ] ],
                     } );
print $table->show();

dv_sessions($list, $sessions);
}


#*******************************************************************
# WHERE period
# base_state($where, $period);
#*******************************************************************
sub dv_stats_calculation  {
 my ($sessions) = @_;

$sessions->calculation({ %LIST_PARAMS }); 


my $table = $html->table( { width       => '640',
	                          rowcolor    => $_COLORS[1],
                            title_plain => ["-", "$_MIN", "$_MAX", "$_AVG", "$_TOTAL"],
                            cols_align  => ['left', 'right', 'right', 'right', 'right'],
                            rows        => [ [ $_DURATION,  $sessions->{min_dur}, $sessions->{max_dur}, $sessions->{avg_dur},  $sessions->{total_dur} ],
                                             [ "$_TRAFFIC $_RECV", int2byte($sessions->{min_recv}), int2byte($sessions->{max_recv}), int2byte($sessions->{avg_recv}),  int2byte($sessions->{total_recv})],
                                             [ "$_TRAFFIC $_SENT", int2byte($sessions->{min_sent}), int2byte($sessions->{max_sent}), int2byte($sessions->{avg_sent}), int2byte($sessions->{total_sent})],
                                             [ "$_TRAFFIC $_SUM",  int2byte($sessions->{min_sum}),  int2byte($sessions->{max_sum}),  int2byte($sessions->{avg_sum}),  int2byte($sessions->{total_sum})]
                                           ],
                            ID           => 'DV_TRAFFIC_CALCULATIONS'
                        } );

print $table->show();
}

#**********************************************************
# form_stats
#**********************************************************
sub dv_user_stats {



 if(defined($FORM{SESSION_ID})) {
  	$pages_qs .= "&SESSION_ID=$FORM{SESSION_ID}";
  	dv_session_detail({ LOGIN => $LIST_PARAMS{LOGIN} });
  	return 0;
  }



if ($sessions->{errno})	{
	$html->message('err', $_ERROR, "[$sessions->{errno}] $err_strs{$sessions->{errno}}");
 }

#Join Service
  if($user->{COMPANY_ID}) {

     if ($FORM{COMPANY_ID}) {
     	  $users=Users->new($db, $admin, \%conf); 
     	  dv_use();
     	  return 0;
     	}

     use Customers;	

     my $customer = Customers->new($db, $admin, \%conf);
     my $company = $customer->company();

     my $ulist = $company->admins_list({ COMPANY_ID => $user->{COMPANY_ID}, 
	                                       UID        => $UID });


     if ($company->{TOTAL} > 0 && $ulist->[0]->[0] > 0) {
     	 $Dv->{JOIN_SERVICES_USERS} = $html->button("$_COMPANY", "&sid=$sid&index=$index&COMPANY_ID=$user->{COMPANY_ID}").' ::';

      }

     $Dv->info($UID);

     if ($Dv->{JOIN_SERVICE} == 1) {
   	   my $list = $Dv->list({ JOIN_SERVICE => $UID, 
                              COMPANY_ID   => $attr->{USER}->{COMPANY_ID} ,
                              PAGE_ROWS    => 1000
                             });

       $Dv->{JOIN_SERVICES_USERS} .= (! $FORM{JOIN_STATS}) ? $html->b("$_ALL $_USERS") .' :: ' :
  	    $html->button("$_ALL", "&sid=$sid&index=$index&JOIN_STATS=". $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6]) . ' ::';

       foreach my $line (@$list) {
     	   if ($FORM{JOIN_STATS} && $FORM{JOIN_STATS}==$line->[$Dv->{SEARCH_FIELDS_COUNT} + 6]) {
     	     $Dv->{JOIN_SERVICES_USERS} .=  $html->b($line->[0]). ' :: ';
     	     $UID = $FORM{JOIN_STATS};
     	    }
     	   else {
     	     $Dv->{JOIN_SERVICES_USERS} .= $html->button("$line->[0]", "&sid=$sid&index=$index&JOIN_STATS=". $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6]) . ' ::';
          }

     	   push @uids, $line->[$Dv->{SEARCH_FIELDS_COUNT} + 6];
        }
      
       $LIST_PARAMS{UIDS} = $UID;
       $LIST_PARAMS{UIDS}.= ',' .join(', ', @uids) if ($#uids > -1 && ! $FORM{JOIN_STATS});
      }
     elsif($Dv->{JOIN_SERVICE}  > 1) {
     	 $Dv->{JOIN_SERVICES_USERS} .= $html->button("$_MAIN", "index=$index&UID=$Dv->{JOIN_SERVICE}");
      }

     my $table = $html->table( { 
	                          width => '100%',
                            rows  => [
                                  ["$_JOIN_SERVICE: ",  $Dv->{JOIN_SERVICES_USERS} ]
                                    ]
                           } );

     print $table->show();

 	   
 	 }


if ($FORM{rows}) {
  $LIST_PARAMS{PAGE_ROWS}=$FORM{rows};
  $conf{list_max_recs}=$FORM{rows};
  $pages_qs .= "&rows=$conf{list_max_recs}";
 }

#online sessions

my $list = $sessions->online( { USER_NAME => $LIST_PARAMS{LOGIN}, 
	                              FIELDS    => [0, 3, 9, 4, 5, 6 ] } );

if ($sessions->{TOTAL} > 0) {
  my $table = $html->table( { caption     => "Online",
	                            width       => '100%',
                              title_plain => ["$_LOGIN", "IP", "CID", "$_DURATION", "$_SEND", "$_RECV"],
                              cols_align  => ['left', 'right', 'right', 'right', 'right', 'right' ],
                              rowcolor    => $_COLORS[1],
                              ID          => 'ONLINE'
                            } );

  foreach my $line (@$list) {
    $table->addrow($line->[0], 
                   int2ip($line->[1]), 
                   $line->[2], 
                   $line->[3], 
                   int2byte($line->[4]), 
                   int2byte($line->[5])
                  );  	
   }
  print $table->show();
}


#PEriods totals
$list = $sessions->periods_totals({ %LIST_PARAMS });
my $table = $html->table( { caption     => "$_PERIOD",
	                          width       => '100%',
                            title_plain => ["$_PERIOD", "$_DURATION", "$_SEND", "$_RECV", "$_SUM"],
                            cols_align  => ['left', 'right', 'right', 'right', 'right'],
                            rowcolor    => $_COLORS[1],
                            ID          => 'DV_STATS_PERIOD'
                          } );

for(my $i = 0; $i < 5; $i++) {
	  $table->addrow($html->button("$PERIODS[$i]", "index=$index&PERIOD=$i$pages_qs"), "$sessions->{'duration_'. $i}",
	  int2byte($sessions->{'sent_'. $i}), int2byte($sessions->{'recv_'. $i}), int2byte($sessions->{'sum_'. $i}));
 }
print $table->show();




$table = $html->table({ width       => '100%',
	                      rowcolor    => $_COLORS[0],
                        rows        => [[ "$_FROM: ", $html->date_fld2('FROM_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'stats', WEEK_DAYS => \@WEEKDAYS } ),
                                          "$_TO: ",   $html->date_fld2('TO_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'stats', WEEK_DAYS => \@WEEKDAYS } ),
                                          $html->form_select('DIMENSION', { SELECTED   => $FORM{DIMENSION},
 	                                                               SEL_HASH   => {'' => 'Auto', 
 	                                                               	              'Kb' => 'Kb', 
 	                                                               	              'Mb' => 'Mb', 
 	                                                               	              'Gb' => 'Gb'
 	                                                               	             },
 	                                                               NO_ID       => 1
                                                                } ),
                                         "$_ROWS: ", $html->form_input('rows', int($conf{list_max_recs}), { SIZE => 4, OUTPUT2RETURN => 1 } ),
                                         $html->form_input('show', $_SHOW, { TYPE => 'submit', OUTPUT2RETURN => 1 })
                                        ]],
                         ID         => 'STATS_PERIODS_SEARCH'
                        } );




#if (! defined($UID)) {
#	$UID=$FORM{UID};
#}

print $html->form_main({ CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
	                       HIDDEN  => { sid   => "$sid",
	                                    index => "$index",
	                                    UID   => "$UID",
	                                    UIDS  => "$FORM{UIDS}",
	                                    },
	                       NAME    => 'stats'
	                     });

#dv_stats_calculation($sessions);

if (defined($FORM{show})) {
  $pages_qs .= "&show=1&FROM_DATE=$FORM{FROM_DATE}&TO_DATE=$FORM{TO_DATE}";
  $LIST_PARAMS{INTERVAL} = "$FORM{FROM_DATE}/$FORM{TO_DATE}";
 }
elsif (defined($FORM{PERIOD})) {
	$LIST_PARAMS{PERIOD} = int($FORM{PERIOD}); 
	$pages_qs .= "&PERIOD=$FORM{PERIOD}";
}

#Show rest of prepaid traffic
if ($sessions->prepaid_rest({ UID => $LIST_PARAMS{UID}, 
	                            UIDS => $LIST_PARAMS{UIDS} 
	                            })) {

	#Prepaid: period, traffic_type
  

  my $list = $sessions->{INFO_LIST};

  my $table = $html->table( { caption     => "$_PREPAID",
	                            width       => '100%',
                              title_plain => ["$_TRAFF $_TYPE", "$_BEGIN", "$_END", "$_START", "$_TOTAL (MB)", "$_REST (MB)", "$_OVERQUOTA (MB)"],
                              cols_align  => ['left', 'right', 'right', 'right', 'right', 'right', 'right'],
                              rowcolor    => $_COLORS[1],
                              ID          => 'DV_STATS_PREPAID'
                           } );
	
	foreach my $line  (@$list) {
	  $table->addrow($line->[0], 
      $line->[1], 
      $line->[2], 
      $line->[3], 
      $line->[4],
      ($line->[4] > 0 && $sessions->{REST}->{$line->[0]} > 0) ? $sessions->{REST}->{$line->[0]} : 0,
      ($line->[4] > 0 && $sessions->{REST}->{$line->[0]} < 0) ? abs($sessions->{REST}->{$line->[0]}) : 0
     );
   }

  print $table->show();	 
}


$pages_qs .= "&DIMENSION=$FORM{DIMENSION}"  if ($FORM{DIMENSION});

#Session List
if (! $FORM{sort}) {
  $LIST_PARAMS{SORT}=2;
  $LIST_PARAMS{DESC}='DESC';	
}

$list = $sessions->list({ %LIST_PARAMS });	

$table = $html->table( {  caption     => "$_SUM",
	                        width       => '100%',
	                        rowcolor    => $_COLORS[1],
                         title_plain => ["$_SESSIONS", "$_DURATION", "$_TRAFFIC $_SENT", "$_TRAFFIC $_RECV",  "$_TRAFFIC $_SUM",
                           "$_TRAFFIC 2 $_SENT", "$_TRAFFIC 2 $_RECV",  "$_TRAFFIC $_SUM", "$_SUM"],

                          cols_align  => ['right', 'right', 'right', 'right'],
                          rows        => [ [ $sessions->{TOTAL}, $sessions->{DURATION}, 
                                            int2byte($sessions->{TRAFFIC_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC_OUT}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC_OUT}+$sessions->{TRAFFIC_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            int2byte($sessions->{TRAFFIC2_IN}, { DIMENSION => $FORM{DIMENSION} }),
                                            int2byte($sessions->{TRAFFIC2_OUT}, { DIMENSION => $FORM{DIMENSION} }),
                                            int2byte($sessions->{TRAFFIC2_OUT}+$sessions->{TRAFFIC2_IN}, { DIMENSION => $FORM{DIMENSION} }), 
                                            $sessions->{SUM} ] ]                               
                             } );
print $table->show();	

dv_sessions($list, $sessions) if ( $sessions->{TOTAL} > 0);


}



#**********************************************************
# dv_session_detail
#**********************************************************
sub dv_session_detail {
	my ($attr) = @_;
  my $user;

 
if (defined($attr->{USER}))	{
	$user = $attr->{USER};
	$LIST_PARAMS{LOGIN}=$user->{LOGIN};
}
elsif (defined($LIST_PARAMS{LOGIN}))	{

}
elsif($FORM{UID}) {
	dv_user();
	return 0;
}	


my %ACCT_TERMINATE_CAUSES = (
                      'Unknown'             =>     0,
                      'User-Request'        =>     1,
                      'Lost-Carrier'        =>     2,
                      'Lost-Service'        =>     3,
                      'Idle-Timeout'        =>     4,
                      'Session-Timeout'     =>     5,
                      'Admin-Reset'         =>     6,
                      'Admin-Reboot'        =>     7,
                      'Port-Error'          =>     8,
                      'NAS-Error'           =>     9,
                      'NAS-Request'         =>     10,
                      'NAS-Reboot'          =>     11,
                      'Port-Unneeded'       =>     12,
                      'Port-Preempted'      =>     13,
                      'Port-Suspended'      =>     14,
                      'Service-Unavailable' =>     15,
                      'Callback'            =>     16,
                      'User-Error'          =>     17,
                      'Host-Request'        =>     18,
                      'Supplicant-Restart'  =>     19,
                      'Reauthentication-Failure' => 20,
                      'Port-Reinit'         =>     21,
                      'Port-Disabled'       =>     22       
                    );

my %ACCT_TERMINATE_CAUSES_VALUE = reverse %ACCT_TERMINATE_CAUSES;

$sessions->session_detail({ %FORM });


$sessions->{ACCT_TERMINATE_CAUSE} = "$sessions->{ACCT_TERMINATE_CAUSE} : ". $ACCT_TERMINATE_CAUSES_VALUE{$sessions->{ACCT_TERMINATE_CAUSE}};

$sessions->{_SENT} = int2byte($sessions->{SENT}); 
$sessions->{_RECV} = int2byte($sessions->{RECV}); 
$sessions->{_SENT2}= int2byte($sessions->{SENT2});
$sessions->{_RECV2}= int2byte($sessions->{RECV2});

$html->tpl_show(_include('dv_session_detail', 'Dv'), $sessions);

my %ORDERS = (hours    => $_HOURS,
              days     => $_DAYS,
              sessions => $_SESSIONS  );


print $html->form_main({ CONTENT => $html->form_select('PERIOD', 
                                          { 
 	                                          SELECTED  => $FORM{PERIOD},
 	                                          SEL_HASH  => \%ORDERS,
 	                                          NO_ID     => 1
 	                                        }) .
 	                                                                                                                                                                                                                                                "SESSION_ID:".
 	                                        
 	                                        $html->form_select('SESSION_ID', 
                                          { 
                                          	SELECTED    => "$FORM{SESSION_ID}",
 	                                          SEL_OPTIONS => { $FORM{SESSION_ID} => "$FORM{SESSION_ID}",
 	                                          	                             '0' => "$_ALL" },
 	                                          NO_ID       => 1
 	                                        })
 	                                        
 	                                        
 	                                        ,
	                       HIDDEN  => { index => "$index",
	                       	            UID   => "$UID"
	                       	           },
	                       SUBMIT  => { SHOW   => "$_SHOW"} 
	                        });

$pages_qs .= "&PERIOD=$FORM{PERIOD}" if (defined($FORM{PERIOD})); 



#Log intervals
my $list = $sessions->list_log_intervals({ ACCT_SESSION_ID =>  $FORM{SESSION_ID} });
if ($sessions->{TOTAL} > 0) {
  my $table = $html->table({ width      => '100%',
                             caption    => "$_INTERVALS",
                             border     => 1,
                             title      => ["$_INTERVAL", "$_TRAFFIC", "$_SENT", "$_RECV", "$_DURATION", "$_SUM"],
                             cols_align => ['right', 'right', 'right', 'right', 'right', 'right'],
                             qs         => $pages_qs,
                             ID         => 'DV_SESSION_DETAIL'
                          } );

  foreach my $line (@$list) {
    $table->addrow($line->[0],  
       $line->[1],
       int2byte($line->[2]), 
       int2byte($line->[3]),  
       $line->[4], 
       $line->[5] 
    );
  }

  print $table->show();

}



#Log detail list

if(! $FORM{sort}) {
  $LIST_PARAMS{SORT}=1;
  $LIST_PARAMS{DESC}='DESC';
}

$list = $sessions->detail_list({ %LIST_PARAMS, %FORM });
my $table = $html->table({ width      => '100%',
                           border     => 1,
                           title      => ["LAST_UPDATE", "$_SESSION_ID", "NAS_ID", "SENT", "RECV", "SENT2", "RECV2"],
                           cols_align => ['right', 'right', 'right', 'right', 'right', 'right', 'right'],
                           pages      => $sessions->{TOTAL},
                           qs         => $pages_qs,
                           ID         => 'DETAIL_LIST'
                           } );

 foreach my $line (@$list) {
    $table->addrow($line->[0],  
    $html->button($line->[1], "index=$index&UID=$UID&SESSION_ID=$line->[1]"), 
    $line->[2], 
    int2byte($line->[3]),  
    int2byte($line->[4]), 
    int2byte($line->[5]), 
    int2byte($line->[6]));
  }
 print $table->show();


$table = $html->table( { width      => '100%',
                         cols_align => ['right', 'right'],
                         rows       => [ ["$_TOTAL:", $html->b($sessions->{TOTAL}) ] ]
                       } );
print $table->show();

}



#**********************************************************
# dv_user_info
#**********************************************************
sub dv_user_chg_tp {
  my ($attr) = @_;
# my $user;
 my $shedule = Shedule->new($db, $admin, \%conf);
 my $period = $FORM{period} || 0;
 
 if (! $conf{DV_USER_CHG_TP}) {
   $html->message('err', "$_CHANGE $_TARIF_PLAN", "$_NOT_ALLOW", { ID => 140 });
   return 0;
  }

 if(defined($LIST_PARAMS{UID})) {
   #$user = $attr->{USER};
   $Dv = $Dv->info($LIST_PARAMS{UID});
   if($Dv->{TOTAL} < 1) {
 	   $html->message('info', $_INFO, "$_NOT_ACTIVE");
 	   return 0;
    }
  }
 else {
 	 $html->message('err', $_ERROR, "$_USER_NOT_EXIST");
 	 return 0;
  }

 #Get TP groups
 $tariffs->tp_group_info($Dv->{TP_GID});
 
 if (! $tariffs->{USER_CHG_TP}) {
 	  $html->message('err', "$_CHANGE $_TARIF_PLAN", "$_NOT_ALLOW", { ID => 140 });
 	  return 0;
  }


if ($FORM{set}) {
	use POSIX;

  if (! $FORM{TP_ID} || $FORM{TP_ID} < 1 ) {
  	$html->message('err', "$_ERROR", "$ERR_WRONG_DATA: $_TARIF_PLAN", { ID => 141 });
   }
  elsif ($conf{DV_USER_CHG_TP_NPERIOD}) {
  	 # Get next month
     my $Y;
     my $M;
     my $D;

     if ($user->{ACTIVATE} eq '0000-00-00') {
       # Get next month
       ($Y, $M, $D)=split(/-/, $DATE, 3);
       $D='01';
      }
     else {
       ($Y, $M, $D)=split(/-/, $user->{ACTIVATE}, 3);
      }

     $M++;
     if ($M == 13) {
         $M = 1;
         $Y++;
       }
     $M = sprintf("%02d", $M);
    
     my $seltime = POSIX::mktime(0, 0, 0, $D, $M, ($Y - 1900));

    if ($seltime > time()) {
      $shedule->add( {UID     => $LIST_PARAMS{UID},
                   TYPE     => 'tp',
                   ACTION   => $FORM{TP_ID},
    	             D        => $D,
                   M        => $M,
                   Y        => $Y,
                   DESCRIBE => "$message<br>
                   $_FROM: '$Y-$M-$D'",
                   MODULE   => 'Dv'
                 } );
     }	
    else {
 	    $FORM{UID}=$LIST_PARAMS{UID};
      $Dv->change({ %FORM });

      if ($user->{errno}) {
        $html->message('err', $_ERROR, "[$Dv->{errno}] $err_strs{$Dv->{errno}}");
       }
      else {
        $html->message('info', $_CHANGED, "$_CHANGED");
        $Dv->info($user->{UID});
       }
     }
   }
  elsif ($period == 1 && $conf{DV_USER_CHG_TP_SHEDULE}) {
    my ($year, $month, $day)=split(/-/, $FORM{DATE}, 3);
    my $seltime = POSIX::mktime(0, 0, 0, $day, ($month-1), ($year - 1900));
    
    if ($seltime <= time()) {
      $html->message('info', $_INFO, "$ERR_WRONG_DATA");
      return 0;
     }

    $FORM{date_M}++;    
    $shedule->add( {UID     => $LIST_PARAMS{UID},
                   TYPE     => 'tp',
                   ACTION   => $FORM{TP_ID},
    	             D        => sprintf("%02d", $day),
                   M        => sprintf("%02d", $month),
                   Y        => $year,
                   DESCRIBE => "$message<br>
                   $_FROM: '$year-$month-$day'",
                   MODULE   => 'Dv'
                 } );

    if ($shedule->{errno}) {
      $html->message('err', $_ERROR, "[$shedule->{errno}] $err_strs{$shedule->{errno}}");	
     }
    else {
      $html->message('info', $_CHANGED, "$_CHANGED");
      $Dv->info($user->{UID});
    }
   }
  else {
    if ($user->{CREDIT} + $user->{DEPOSIT} < 0) {
    	$html->message('err', "$_ERROR", "$ERR_SMALL_DEPOSIT - $_DEPOSIT: $user->{DEPOSIT} $_CREDIT: $user->{CREDIT}");
    	return 0;
     }
    
    $FORM{UID}=$LIST_PARAMS{UID};

    $Dv->{ABON_DATE}=undef;
    if ($Dv->{MONTH_ABON}> 0 && ! $Dv->{STATUS} && ! $users->{DISABLE}) {
      if ($user->{ACTIVATE} ne '0000-00-00') {
        my ($Y, $M, $D)=split(/-/, $user->{ACTIVATE}, 3);
        $M--;
        $Dv->{ABON_DATE} = strftime "%Y-%m-%d", localtime(  (mktime(0, 0, 0, $D, $M, ($Y-1900), 0, 0, 0)  + 31 * 86400 + ( ($conf{START_PERIOD_DAY}) ? $conf{START_PERIOD_DAY} * 86400 : 0 ) ) );

       }
      else {
        my ($Y, $M, $D)=split(/-/, $DATE, 3);
        $M++;
        if ($M == 13) {
          $M = 1;
          $Y++;
         }
 
        if ($conf{START_PERIOD_DAY}) {
          $D=sprintf("%02d", $conf{START_PERIOD_DAY}); 
         }
        else {
          $D='01';
         }

        $M = sprintf("%02d", $M);
        $Dv->{ABON_DATE} = "$Y-$M-$D";
       }
    }


    

    if ($Dv->{ABON_DATE}) {
      
      ($year, $month, $day)=split(/-/, $Dv->{ABON_DATE}, 3);
 	    use POSIX;
    
      my $seltime = POSIX::mktime(0, 0, 0, $day, ($month-1), ($year - 1900));
    
      if ($seltime <= time()) {
        $html->message('info', $_INFO, "$ERR_WRONG_DATA ($year, $month, $day)/". $seltime . "-" . time());
        return 0;
       }
      elsif($FORM{date_D} > ($FORM{date_M}!=2?(($month%2)^($month>7))+30:(!($year%400)||!($year%4)&&($year%25)?29:28))) {
        $html->message('info', $_INFO, "$ERR_WRONG_DATA ($year-$month-$day)");
        return 0;
       }


      $shedule->add( {UID     => $LIST_PARAMS{UID},
                     TYPE     => 'tp',
                     ACTION   => $FORM{TP_ID},
    	               D        => $day,
                     M        => $month,
                     Y        => $day,
                     DESCRIBE => "$message<br>
                     $_FROM: '$year-$month-$day'",
                     MODULE   => 'Dv'
                    });

      if ($shedule->{errno}) {
        $html->message('err', $_ERROR, "[$shedule->{errno}] $err_strs{$shedule->{errno}}");	
       }
      else {
        $html->message('info', $_CHANGED, "$_CHANGED");
       }
     }
    else {
      $Dv->change({ %FORM });

      if ($Dv->{errno}) {
        $html->message('err', $_ERROR, "[$Dv->{errno}] $err_strs{$Dv->{errno}}");	
       }
      else {
        #Take fees
        if ($Dv->{TP_INFO}->{MONTH_FEE} > 0 && ! $Dv->{STATUS}) {
          dv_get_month_fee($Dv);
          $user->change($user->{UID}, { ACTIVATE => "$DATE",
          	                            UID      => $user->{UID} })
         }

    	  $html->message('info', $_CHANGED, "$_CHANGED");
        $Dv->info($Dv->{UID});
       }
     }

    $Dv->info($Dv->{UID});
  }
}
elsif($FORM{del}) {
  $shedule->del( { UID => $LIST_PARAMS{UID},
   	               ID  => $FORM{SHEDULE_ID}  } 
   	            );

  $html->message('info', $_DELETED, "$_DELETED [$FORM{SHEDULE_ID}]");
}



  $shedule->info( {UID      => $user->{UID},
                   TYPE     => 'tp',
                   DESCRIBE => "$message\n$_FROM: '$FORM{date_y}-$FORM{date_m}-$FORM{date_d}'",
                   MODULE   => 'Dv'
                   });



  if ($shedule->{TOTAL} > 0) {
  	$tariffs->info(0, { ID => $shedule->{ACTION} });
  	
  	$table = $html->table( { width      => '100%',
  		                       caption    => "$_SHEDULE",
                             cols_align => ['left', 'left'],
                             rows       => [ [ "$_TARIF_PLAN:", "$shedule->{ACTION} : $tariffs->{NAME}"   ],
                                             [ "$_DATE:",   "$shedule->{Y}-$shedule->{M}-$shedule->{D}" ],
                                             [ "$_ADDED:",  "$shedule->{DATE}"         ],
                                             [ "ID:",       "$shedule->{SHEDULE_ID}"   ]  
                                            ]
                               } );
  	$tariffs->{TARIF_PLAN_SEL} = $table->show({ OUTPUT2RETURN => 1 }). $html->form_input('SHEDULE_ID', "$shedule->{SHEDULE_ID}", { TYPE => 'HIDDEN', OUTPUT2RETURN => 1 });
  	$tariffs->{ACTION}='del';
  	$tariffs->{LNG_ACTION}=$_DEL;
  }
 else {
   $tariffs->{TARIF_PLAN_SEL}=$html->form_select('TP_ID', 
                                          { 
 	                                          SELECTED          => $Dv->{TP_ID},
 	                                          SEL_MULTI_ARRAY   => $tariffs->list({ TP_GID       => $Dv->{TP_GID}, 
 	                                          	                                    CHANGE_PRICE => '<='. ($user->{DEPOSIT} + $user->{CREDIT}), 
 	                                          	                                    MODULE       => 'Dv',
 	                                          	                                    PRIORITY     => $Dv->{TP_PRIORITY} 
 	                                          	                                    }),
 	                                          MULTI_ARRAY_KEY   => 0,
 	                                          MULTI_ARRAY_VALUE => 1,
 	                                        });

   if ($tariffs->{TOTAL} == 0) { 
     $html->message('info', $_INFO, "$ERR_SMALL_DEPOSIT", { ID => 142 });
     return 0;	
    }


   $tariffs->{PARAMS} .= form_period($period) if ($conf{DV_USER_CHG_TP_SHEDULE} && ! $conf{DV_USER_CHG_TP_NPERIOD});	
   $tariffs->{ACTION}='set';
   $tariffs->{LNG_ACTION}=$_CHANGE;
  }

   $tariffs->{UID}=$attr->{USER}->{UID};
   $tariffs->{m}=$m;
   $tariffs->{TP_ID}   = $Dv->{TP_ID};
   $tariffs->{TP_NAME} = "$Dv->{TP_ID}:$Dv->{TP_NAME}";

   $html->tpl_show(templates('form_chg_tp'), $tariffs);
}


#**********************************************************
# dv_user_info
#**********************************************************
sub dv_user_info {
  my $NAS_ID = 0;
  
  my $nas;
  if ($conf{DV_ISG}) {
    #Check deposit and disable STATUS
    my $list = $Dv->list({ LOGIN         => $user->{LOGIN}, 
                           TP_CREDIT     => '>0',
                           PAYMENTS_TYPE => 0 
                           });
   
    if ($Dv->{TOTAL} < 1) {
       
     }
    elsif (($list->[0]->[3] > 0 && ($list->[0]->[2] + $list->[0]->[3] < 0)) || 
           ($list->[0]->[3] == 0 && $list->[0]->[2] + $list->[0]->[6]) < 0 ) {
      $html->tpl_show(templates('form_neg_deposit'), $user);
      #$html->message('err', $_ERROR, "$_NEGATIVE_DEPOSIT. $_DEPOSIT: $list->[0]->[2] $_CREDIT: $list->[0]->[3] ", { ID => 14 });
      return 0;
     }
    elsif ($list->[0]->[5] && $list->[0]->[5] == 1) {
       $html->message('err', $_ERROR, "$_SERVICES '$list->[0]->[4]' $_DISABLE", { ID => 15 });
       return 0;
     }

    #print "Content-Type: text/html\n\n";
  	#Get user NAS server from ip pools
  	$nas = Nas->new($db, \%conf);
    $list = $nas->nas_ip_pools_list();
    
    foreach my $line (@$list) {
    	if ($line->[3] <= ip2int($user->{REMOTE_ADDR}) && ip2int($user->{REMOTE_ADDR}) <= $line->[4]) {
    		$NAS_ID = $line->[0];
    		$nas->info({ NAS_ID => $line->[0] });
    		next;
    	 }
     }

    if (! $nas->{NAS_ID}) {
    	$html->message('err', $_ERROR, "$ERR_UNKNOWN_IP", { ID => 13 });
    	return 0;
     }
 	
  	#get  PBHK identifier (IP or MAC) from NAS and account info
  	#my $result = `/usr/bin/rsh -l snake 77.87.152.66 show arp`;

    my $isg_cmd = "/bin/echo \"User-Name=\\\"$user->{LOGIN}\\\",cisco-avpair=\\\"subscriber:command=account-status-query\\\",Cisco-Account-Info=\\\"S$user->{REMOTE_ADDR}\\\"\" | /usr/local/bin/radclient -x $nas->{NAS_MNG_IP_PORT} coa $nas->{NAS_MNG_PASSWORD}";
    #print "<!-- $isg_cmd -->";
    my $result = `$isg_cmd`;

=comments
redirect service:
        Cisco-Account-Info=N1SERVICE_406_L4R;12;;0;0;0;0,
        Cisco-Account-Info=N1PBHK_SERVICE;12;;0;0;0;0,
        Cisco-Command-Code=0,
        Cisco-Account-Info=S79.124.108.107,
        Cisco-AVPair=sg-version=1.0,
        NAS-Port-Id=33555320,
        NAS-Port-Id=nas-port:0.0.0.0:0/0/2/888,
        Framed-IP-Address=79.124.108.107,

Sending CoA-Request of id 218 to 77.87.152.66 port 1700
        User-Name = "test"
        Cisco-AVPair = "subscriber:command=account-status-query"
        Cisco-Account-Info = "S79.124.98.3"
rad_recv: CoA-ACK packet from host 77.87.152.66:1700, id=218, length=211
        Cisco-Account-Info = "N1SERVICE_406_L4R;224;;0;0;0;0"
        Cisco-Account-Info = "N1PBHK_SERVICE;224;;0;0;0;0"
        Cisco-Account-Info = "$MA0018.f3f8.f85a"
        Cisco-Account-Info = "S79.124.98.3"
        Cisco-Command-Code = "\0040"
        Cisco-AVPair = "sg-version=1.0"
        NAS-Port = 0
        NAS-Port-Id = "nas-port:0.0.0.0:0/0/2/1416"
        Framed-IP-Address = 79.124.98.3
pROFILRE

        Cisco-Account-Info = "N1PBHK_SERVICE;399;chao;0;0;0;0"
        Cisco-Account-Info = "N1TP_214;399;chao;0;46;0;2867"
        User-Name = "chao"
        Cisco-Command-Code = "\0041"
        Cisco-Account-Info = "S79.124.99.40"
        Cisco-Account-Info = "ATP_214"
        Cisco-Account-Info = "NSERVICE_406_BOD1M"
        Cisco-Account-Info = "NBasic_Internet_Service"
        Cisco-Account-Info = "N1PBHK_SERVICE;399;chao;0;0;0;0"
        Idle-Timeout = 1800
        User-Name = "chao"
        Cisco-AVPair = "accounting-list=BH_ACCNT_LIST1"
        Cisco-AVPair = "sg-version=1.0"
        NAS-Port = 33555320
        NAS-Port-Id = "nas-port:0.0.0.0:0/0/2/888"
        Framed-IP-Address = 79.124.99.40

=cut
  	my @arr = split(/\n/, $result);
  	my %RAD_PAIRS = ();
  	foreach my $line (@arr) {
        my($key, $val)=split(/ = /, $line);

        $val =~ s/\"//g;
        $key =~ s/\t//g;
        $key =~ s/ //g;
        
      	$RAD_PAIRS{$key}=$val;
        #Mac as ID
        if ($val =~ /\$MA(\S+)/) {
      	  $Dv->{ISG_CID_CUR}=$1;
      	 }
  	    #IP user ID
  	    elsif ($val =~ /^S(\S+)/) {
  	    	$Dv->{ISG_CID_CUR}=$1;
  	     }
        elsif ($val =~ /^N1TURBO_SPEED(\d+);(\d+)/) {
          $Dv->{TURBO_MODE_RUN}=$2;
         }
  	    elsif ($val =~ /^N1(TP_\d+);(\d+)/) {
  	      $Dv->{CURE_SERVICE}=$1;
  	      $Dv->{ISG_SESSION_DURATION}=$2;
  	     }
  	 }
	

	
	  #$Dv->{ISG_CID_CUR} = '192.168.0.1';
	  #
 	  if ($RAD_PAIRS{'Error-Cause'}) {
 	  	$html->message('err', $_ERROR, "NAS: $NAS_ID, $RAD_PAIRS{'Error-Cause'} / $RAD_PAIRS{'Reply-Message'}", { ID => 100 });
      return 0;
 	   }
    elsif(! $Dv->{ISG_CID_CUR}) {
    	$html->message('err', $_ERROR, "$_NOT_EXIST ID: '$user->{REMOTE_ADDR}' ", { ID =>  11 });
     }
    elsif ($Dv->{ISG_CID_CUR} =~ /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/) {
    	$Dv->{ISG_CID_CUR} = dv_dhcp_get_mac($Dv->{ISG_CID_CUR});
    	if ($Dv->{ISG_CID_CUR} eq '') {
    		$html->message('err', $_ERROR, "IP: '$user->{REMOTE_ADDR}', MAC $_NOT_EXIST. DHCP $_ERROR ", { ID => 12 });
        return 0; 
    	 }
     }


 if ($Dv->{ISG_CID_CUR}) {
   #change speed (active turbo mode)
   if ($FORM{SPEED}) {
        if ($Dv->{CURE_SERVICE} =~ /TP/ || ! $Dv->{TURBO_MODE_RUN} ) {
           my $service_name = 'TURBO_SPEED'. $FORM{SPEED};
           #Deactive cure service (TP Service)
           if ($Dv->{CURE_SERVICE} =~ /TP/) {
             my $isg_cmd = "/bin/echo \"User-Name=\\\"$user->{LOGIN}\\\",cisco-avpair=\\\"subscriber:command=deactivate-service\\\",cisco-avpair+=\\\"subscriber:service-name=$Dv->{CURE_SERVICE}\\\",Cisco-Account-Info=\\\"S$user->{REMOTE_ADDR}\\\",  \" | /usr/local/bin/radclient -x $nas->{NAS_MNG_IP_PORT} coa $nas->{NAS_MNG_PASSWORD}";
             print "<!-- $isg_cmd -->";
             my $result = `$isg_cmd`;
            }

 
           #Active service (TURBO mode)
           $isg_cmd = "/bin/echo \"User-Name=\\\"$user->{LOGIN}\\\",cisco-avpair=\\\"subscriber:command=activate-service\\\",cisco-avpair+=\\\"subscriber:service-name=$service_name\\\",Cisco-Account-Info=\\\"S$user->{REMOTE_ADDR}\\\",  \" | /usr/local/bin/radclient -x $nas->{NAS_MNG_IP_PORT} coa $nas->{NAS_MNG_PASSWORD}";
     
           print "<!-- $isg_cmd -->"; 
           my $result = `$isg_cmd`;
           $result = `/bin/echo \`date \"+ %Y-%m-%d %H:%M:%S\"\` \"$user->{LOGIN} $service_name \" >> /usr/abills/var/log/turbo.log`;

           my @arr = split(/\n/, $result);
  	       my %RAD_PAIRS = ();

  	       foreach my $line (@arr) {
             my($key, $val)=split(/ = /, $line);

             $val =~ s/\"//g;
             $key =~ s/\t//g;
             $key =~ s/ //g;
        
             $RAD_PAIRS{$key}=$val;
             #MAC as ID
             if ($val =~ /\$MA(\S+)/) {
      	        $Dv->{ISG_CID_CUR}=$1;
      	      }
  	         #IP user ID
  	         elsif ($val =~ /S(\S+)/) {
  	    	     $Dv->{ISG_CID_CUR}=$1;
  	          }
  	        }
	  
	     	  if ($RAD_PAIRS{'Error-Cause'}) {
 	        	$html->message('err', $_ERROR, "$RAD_PAIRS{'Error-Cause'} / $RAD_PAIRS{'Reply-Message'}", { ID => 101 });
 	         }
          else {
      	    $html->message('info', $_INFO, "TURBO $_ENABLE");
            return 0;
           }
       }
      elsif ($Dv->{TURBO_MODE_RUN}){
      	$html->message('info', $_INFO, "TURBO $_MODE $_ENABLE");
       }
  	 }
   }
 }
elsif ($conf{DV_IP_DISCOVERY}) {

	$Dv->{DHCP_LEASES_MAC} = dv_dhcp_get_mac($user->{REMOTE_ADDR}, { CHECK_STATIC => 1 });
	
 	if ($Dv->{DHCP_LEASES_MAC} eq '') {
 		$html->message('err', $_ERROR, "IP: '$user->{REMOTE_ADDR}', MAC: $_NOT_EXIST. DHCP $_ERROR ", { ID => 112 });
    return 0; 
 	 }
  elsif ($Dv->{DHCP_LEASES_MAC} =~ /^static/) {
  	my (undef, $mac, $ip)=split(/;/, $Dv->{DHCP_LEASES_MAC});
  	if ($ip ne "$user->{REMOTE_ADDR}") {
  	  $html->message('err', $_ERROR, "IP: '$ip', MAC: $_NOT_EXIST. Address Conflict", { ID => 114 });
  	 }
   }
  else {
  	$html->tpl_show(_include('dv_guest_mode', 'Dv'), $Dv);  
    
#    $table = $html->table({ width       => '500',
#                          rowcolor    => $_COLORS[0],
#                          rows        => [
#                          [$_GUEST_MODE],
#                          [ "MAC: ", $Dv->{DHCP_LEASES_MAC},
#                          $html->form_input('discovery', $_REGISTRATION, { TYPE => 'submit', OUTPUT2RETURN => 1 })
#                                         ]],                                   
#                         });
#      
#    print $html->form_main({ CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
#  	                     HIDDEN  => { index => "$index",
#  	                         	        CID   => "$Dv->{DHCP_LEASES_MAC}",
#  	                         	        sid   => $sid    },
#	                       });

  }
}  

  if ($FORM{activate}) {
     $Dv->change({ UID    => $LIST_PARAMS{UID}, 
     	             STATUS => 0,
     	             CID    => ($Dv->{ISG_CID_CUR})  ? $Dv->{ISG_CID_CUR} : undef 
    	            });

  	  if (! $Dv->{errno}) {
  	  	$html->message('info', $_INFO, "$_ACTIVATE CID: $Dv->{ISG_CID_CUR}");

  	  	dv_get_month_fee($Dv) if (! $Dv->{STATUS});
  	   }
  	  else {
  	  	if ($Dv->{ISG_CID_CUR}) {
  	  	  my $res = `/bin/echo "User-Name=\"$user->{LOGIN}\",cisco-avpair=\"subscriber:commandmy=account-logon\",Cisco-Account-Info=\"S$user->{REMOTE_ADDR}\"" | /usr/local/bin/radclient -x  $nas->{NAS_MNG_IP_PORT} coa $nas->{NAS_MNG_PASSWORD}`;
         }

  	  	$html->message('err', $_ACTIVATE, "$_ERROR CID: $Dv->{ISG_CID_CUR}", { ID => 102 });
  	   }
   }
  elsif ($FORM{logon}) {
  	my $res = `/bin/echo "User-Name=\"$user->{LOGIN}\",cisco-avpair=\"subscriber:commandmy=account-logon\",Cisco-Account-Info=\"S$user->{REMOTE_ADDR}\"" | /usr/local/bin/radclient -x  $nas->{NAS_MNG_IP_PORT} coa $nas->{NAS_MNG_PASSWORD}`;
  	$html->message('info', $_INFO, "$_LOGON");
   }
  elsif ($FORM{discovery}) {  
    if(dv_dhcp_get_mac_add($user->{REMOTE_ADDR}, $Dv->{DHCP_LEASES_MAC})) {
    	$html->message('info', $_INFO, "$_ACTIVATE IP: $Dv->{NEW_IP} CID: $Dv->{DHCP_LEASES_MAC}");
     }
    else {
    	$html->message('err', $_ACTIVATE, "$_ERROR IP: $user->{REMOTE_ADDR} CID: $Dv->{DHCP_LEASES_MAC}", { ID => 113 });
     }
   }
  elsif ($FORM{hangup}) {
  	require "Abills/nas.pl";
    my $ret = hangup($nas, "0", "$user->{LOGIN}", { ACCT_SESSION_ID   => '',
  	                                                FRAMED_IP_ADDRESS => $user->{REMOTE_ADDR},
  	                                                UID               => $user->{UID} });
   }
  
  $Dv->info($LIST_PARAMS{UID});
  
  if ($Dv->{TOTAL} < 1) {
  	$html->message('info', $_INFO, "$_NOT_ACTIVE");
    return 0;	
   }
  
  
  if ($Dv->{STATUS} == 2) {
    $Dv->{STATUS}   = $html->color_mark($service_status[$Dv->{STATUS}], $service_status_colors[$Dv->{STATUS}]). ' ';
    $Dv->{STATUS}  .= ($user->{DISABLE} > 0) ? $html->b("($_ACCOUNT $_DISABLE)") : $html->button($_ACTIVATE, "&index=$index&sid=$sid&activate=1", {   	 ex_params  => ' ID="ACTIVATE"', BUTTON => 1 });
    #   JAVASCRIPT => ' onclick="obj_disable(ACTIVATE, \'Wait...\')"'  	 } );
   }  
  else {
  	$Dv->{STATUS}   = $html->color_mark($service_status[$Dv->{STATUS}], $service_status_colors[$Dv->{STATUS}]); 
   }
  
  if ($conf{DV_USER_CHG_TP}) {
    $Dv->{TP_CHANGE} = $html->button("$_CHANGE", 'index='. ($index+2).'&sid='.$sid, { BUTTON => 1 } );
   }

  # Get next payment period
  if ($Dv->{MONTH_ABON}> 0 &&  ! $Dv->{STATUS} && ! $user->{DISABLE} &&
        ($user->{DEPOSIT}+$user->{CREDIT} > 0 || 
         $Dv->{POSTPAID_ABON} || 
         $Dv->{PAYMENT_TYPE} == 1 )) {
    if ($user->{ACTIVATE} ne '0000-00-00') {
      my ($Y, $M, $D)=split(/-/, $user->{ACTIVATE}, 3);
      $M--;
      $Dv->{ABON_DATE} = strftime "%Y-%m-%d", localtime(  (mktime(0, 0, 0, $D, $M, ($Y-1900), 0, 0, 0)  + 31 * 86400) );
     }
    else {
      my ($Y, $M, $D)=split(/-/, $DATE, 3);
      $M++;
      if ($M == 13) {
        $M = 1;
        $Y++;
       }

      if ($conf{START_PERIOD_DAY}) {
          $D=sprintf("%02d", $conf{START_PERIOD_DAY}); 
        }
      else {
        $D='01';
       }

      $M = sprintf("%02d", $M);
      $Dv->{ABON_DATE} = "$Y-$M-$D";
     }
  }

  
  #Activate Cisco ISG Account
  if ($conf{DV_ISG}) {
    if ($user->{DISABLE}) {
    	$html->message('err', $_ERROR, "$_USER  $_DISABLE", { ID => 16 });
     }
    elsif ($Dv->{CID} ne $Dv->{ISG_CID_CUR} || $Dv->{CID} eq '') {
      $html->message('info', $_INFO, "$_NOT_ACTIVE CID: $Dv->{ISG_CID_CUR} IP: $user->{REMOTE_ADDR} ");
      $html->form_main({ CONTENT => '',
  	                     HIDDEN  => { index => "$index",
  	                         	        CID   => "$Dv->{ISG_CID_CUR}",
  	                         	        sid   => $sid    },
	                       SUBMIT  => { activate => "$_ACTIVATE"  } 
 	                      });
  	
  	  $Dv->{CID} = $Dv->{ISG_CID_CUR};
  	  $Dv->{IP}  = $user->{REMOTE_ADDR};
  	  $Dv->{CID} .= ' '.$html->color_mark($_NOT_ACTIVE, $_COLORS[6]);
  	 }
    #Self hangup
    elsif ($Dv->{CID} eq $Dv->{ISG_CID_CUR}) {
      $table = $html->table({ width       => '500',
	                          rowcolor    => $_COLORS[0],
                            rows        => [[ "$_DURATION: ", $Dv->{ISG_SESSION_DURATION},
                            ($Dv->{CURE_SERVICE} !~ /TP/ && !$Dv->{TURBO_MODE_RUN}) ? $html->form_input('logon', "$_LOGON ", { TYPE => 'submit', OUTPUT2RETURN => 1 }) : '',
                            $html->form_input('hangup', $_HANGUP, { TYPE => 'submit', OUTPUT2RETURN => 1 })
                                         ]],                                   
                         });
      
      print $html->form_main({ CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
  	                     HIDDEN  => { index => "$index",
  	                         	        CID   => "$Dv->{ISG_CID_CUR}",
  	                         	        sid   => $sid    },
	                       });
     }
   }

  #Turbo mode Enable function
  if ($conf{DV_TURBO_MODE} && ! $Dv->{TURBO_MODE}) {
    my (@turbo_mods) = split(/;/, $conf{DV_TURBO_MODE});

    if($Dv->{TURBO_MODE_RUN}) {
       $html->message('info', $_INFO, "TURBO $_ENABLE $Dv->{TURBO_MODE_RUN} sec.");
     } 
    else {
      $Dv->{SPEED_SEL} = $html->form_select('SPEED', 
                                          { 
 	                                          SELECTED     => $FORM{SPEED},
 	                                          SEL_ARRAY    => ['', @turbo_mods],
 	                                          ARRAY_NUM_ID => 1
 	                                        });
      
      $html->tpl_show(_include('dv_user_speed', 'Dv'), $Dv);
     }
   }


  $html->tpl_show(_include('dv_user_info', 'Dv'), $Dv);
  if ($conf{DV_USER_SERVICE_HOLDUP}) {
  	#$_HOLD_UP
  	dv_holdup_service();
   }

}


#**********************************************************
#
#**********************************************************
sub dv_holdup_service {
  my ($hold_up_min_period, $hold_up_max_period)=split(/:/, $conf{DV_USER_SERVICE_HOLDUP});

  my $shedule = Shedule->new($db, $admin, \%conf);
  
  if ($FORM{del}) {
  	$shedule->del({ UID    => $user->{UID},
                    IDS    => $FORM{del},
                   });

  	$html->message('info', $_HOLD_UP, "$_DELETED");
   }


  my $list = $shedule->list({ UID    => $user->{UID},
                              MODULE => 'Dv',
                              TYPE   => 'status' 
                              });

  my %shedule_val = ();
  my $del_ids = '';
  foreach $line ( @$list ) {
  	$shedule_val{$line->[7]}="$line->[3]-$line->[2]-$line->[1]";
  	$del_ids .= "$line->[13],";
   }
  
  chop($del_ids);

  if($shedule->{TOTAL} > 0) {
  	$html->message('info', $_INFO, "$_HOLD_UP $shedule_val{3} -> $shedule_val{0} " . $html->button("$_DEL", "index=$index&del=$del_ids&sid=$sid", { BUTTON => 1 }));
  	return 0;
   }

  if ($FORM{add}) {
  	my ($from_year, $from_month, $from_day)=split(/-/, $FORM{FROM_DATE}, 3);
  	my ($to_year, $to_month, $to_day)=split(/-/, $FORM{TO_DATE}, 3);
  	
    my $from_seltime = POSIX::mktime(0, 0, 0, $from_day, ($from_month-1), ($from_year - 1900));
    my $to_seltime   = POSIX::mktime(0, 0, 0, $to_day, ($to_month-1), ($to_year - 1900));
    
    my $block_days = ($to_seltime - $from_seltime) / 86400;
    
    if ($block_days < $hold_up_min_period) {
    	$html->message('err', "$ERR_WRONG_DATA", "$_MIN $_HOLD_UP   $hold_up_min_period $_DAYS");
     }
    elsif($block_days > $hold_up_max_period) {
    	$html->message('err', "$ERR_WRONG_DATA", "$_MAX $_HOLD_UP   $hold_up_max_period $_DAYS");
     }
    elsif ($from_seltime <= time()) {
      $html->message('info', $_INFO, "$ERR_WRONG_DATA ($_FROM: $FORM{FROM_DATE}");
     }
    elsif ($to_seltime <= time()) {
      $html->message('info', $_INFO, "$ERR_WRONG_DATA ($_TO: $FORM{TO_DATE}");
     }
    else {
      $shedule->add({UID     => $user->{UID},
                   TYPE     => "status",
                   ACTION   => "3",
    	             D        => $from_day,
                   M        => $from_month,
                   Y        => $from_year,
                   DESCRIBE => "$message<br>
                   $_FROM: '$from_year-$from_month-$from_day'",
                   MODULE   => 'Dv'
                    });

      $shedule->add({UID    => $user->{UID},
                   TYPE     => "status",
                   ACTION   => "0",
    	             D        => $to_day,
                   M        => $to_month,
                   Y        => $to_year,
                   DESCRIBE => "$message<br>
                   $_FROM: '$to_year-$to_month-$to_day'",
                   MODULE   => 'Dv'
                    });

      if (! $shedule->{errno}) {
      	$html->message('info', $_INFO, "$_HOLD_UP $_DATE: $FORM{FROM_DATE} -> $FORM{TO_DATE}   $_DAYS: $block_days");
  	    return 0;
       }
     }
   } 


  $Dv->{DATE_FROM}= $html->date_fld2('FROM_DATE', { FORM_NAME => 'holdup',
  	                                                WEEK_DAYS => \@WEEKDAYS,
  	                                                MONTHES   => \@MONTHES,
  	                                                NEXT_DAY  => 1 });
  
  $Dv->{DATE_TO}  = $html->date_fld2('TO_DATE', { FORM_NAME => 'holdup',
	                                                WEEK_DAYS => \@WEEKDAYS,
 	                                                MONTHES   => \@MONTHES, 
 	                                            });

	$html->tpl_show(_include('dv_hold_up', 'Dv'), $Dv);
}

#**********************************************************
# dv_periodic_ppp_clean
# Kill ppp deamons fot down interfaces 
#**********************************************************
sub dv_periodic_ppp_clean {
  #my $a = `count=\`ifconfig -d | grep PID | wc -l\`; if [ \${count} != 0 ]; thenecho \${count}; ifconfig -d | grep PID | awk '{ print \$4 }' | xargs kill -1; fi;`;
}

#**********************************************************
# dv_periodic_logrotate
#**********************************************************
sub dv_periodic_logrotate {
	my ($attr) = @_;
  my $debug = $attr->{DEBUG} || 0;

  # Clean s_detail table
  my ($y, $m, $d)=split(/-/, $ADMIN_REPORT{DATE}, 3);
  $conf{DV_LOG_CLEAN_PERIOD}=180 if (! $conf{DV_LOG_CLEAN_PERIOD});

  if ($d == 1 && $conf{DV_LOG_CLEAN_PERIOD}) {
    $DEBUG .= "Make log rotate\n" if ($debug > 0);

    $sessions->log_rotate({ TYPES  => [ 'SESSION_DETAILS', 'SESSION_INTERVALS'],
  	                        PERIOD => $conf{DV_LOG_CLEAN_PERIOD} });
   }
}

#**********************************************************
# daily_fees
#**********************************************************
sub dv_daily_fees {
  my ($attr) =@_;

	my $debug = $attr->{DEBUG} || 0;
  my $debug_output = '';

  my $DOMAIN_ID = $attr->{DOMAIN_ID} || 0;

 $debug_output .= "DV: Daily periodic payments\n" if ($debug > 1);


 $LIST_PARAMS{TP_ID} = $attr->{TP_ID} if ($attr->{TP_ID});
 $LIST_PARAMS{DOMAIN_ID} = $DOMAIN_ID;
 

 my %DV_LIST_PARAMS = ();
 $DV_LIST_PARAMS{LOGIN}     = $attr->{LOGIN} if ($attr->{LOGIN});
 $DV_LIST_PARAMS{DOMAIN_ID} = $DOMAIN_ID;

 my $list = $tariffs->list({ %LIST_PARAMS });
 $ADMIN_REPORT{DATE}=$DATE if (! $ADMIN_REPORT{DATE});

 foreach my $line (@$list) {
 	 if ($line->[5] > 0) {
 	   #$LIST_PARAMS{TP}=$line->[0];
     my $TP_ID = $line->[0];
   
     my %TP_INFO = ();
     $TP_INFO{POSTPAID_DAILY} = $line->[12];
     $TP_INFO{REDUCTION}      = $line->[11];

 	   $debug_output .= "TP ID: $TP_ID DF: $line->[5] MF: $line->[6] POSTPAID: $TP_INFO{POSTPAID_DAILY} REDUCTION: $TP_INFO{REDUCTION} EXT_BILL: $line->[13] CREDIT: $line->[14]\n" if ($debug > 1);

 	   my $ulist = $Dv->list({
         ACTIVATE  => "<='$ADMIN_REPORT{DATE}'",
         EXPIRE    => ">'$ADMIN_REPORT{DATE}'",
         STATUS    => 0,
         LOGIN_STATUS => 0,
         TP_ID     => $TP_ID,
         SORT      => 1,
         PAGE_ROWS => 1000000,
         TP_CREDIT => '>=0',
         %DV_LIST_PARAMS
 	   	 });


     foreach my $u (@$ulist) {
     	  #Check bill id and deposit 
         my %user = (
            LOGIN      => $u->[0],  
            UID        => $u->[8],
            BILL_ID    => ($line->[14] > 0) ? $u->[16] : $u->[14],
            REDUCTION  => $u->[15],
            ACTIVATE   => $u->[12],
            DEPOSIT    => $u->[2],
            CREDIT     => ($u->[3] > 0) ? $u->[3] : $line->[14]
           );

#print "$user{LOGIN} / $user{BILL_ID} \n";
        if ($user{BILL_ID} > 0 && defined($user{DEPOSIT})) {
          #print "  UID: $u->[0] / $line->[5] / DEPOSIT: $user{DEPOSIT} / $u->[3] / BILL_ID: $user->{BILL_ID}\n"; 	

          #If deposit is above-zero or TARIF PALIN is POST PAID or PERIODIC PAYMENTS is POSTPAID
          if($user{DEPOSIT} + $user{CREDIT} > 0 || $line->[4] == 1 || $TP_INFO{POSTPAID_DAILY} == 1 ) {
             #print "  UID: $u->[0] / $line->[5] / DEPOSIT: $u->[2] / $u->[3] / BILL_ID: $u->[12]\n"; 	
             my $sum = $line->[5];
             # IF TP have PARIODIC PAYMENTS USER reduction
             if ($TP_INFO{REDUCTION} == 1 && $user{REDUCTION} > 0) {
               if ($user{REDUCTION} >= 100) {
               	 $debug_output .= "UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION} next\n" if ($debug > 3);
               	 next;
                }
               $sum = $sum * (100 - $user{REDUCTION}) / 100;
              }

             my %PARAMS = ( 
               DESCRIBE => "$_DAY_FEE ($TP_ID)",
               DATE     => "$ADMIN_REPORT{DATE} $TIME",
               METHOD   => 1 );


             if ($debug > 4) {
                $debug_output .= " UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
              }
             else {
               $fees->take(\%user, $sum, { %PARAMS } );
               if ($fees->{errno}) {
               	 print "Dv Error: [ $user{UID} ] $user{LOGIN} SUM: $sum [$fees->{errno}] $fees->{errstr} ";
               	 if ($fees->{errno} == 14 ) {
               	 	 print "[ $user{UID} ] $user{LOGIN} - Don't have money account";
               	  }
               	 print "\n";
               	}
               elsif($debug > 0) {
               	 $debug_output .= " $user{LOGIN}  UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n" if ($debug > 0);
                 #$debug_output .= " UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
                }
              }
           }
        }
       else {
       	  print "[ $user{UID} ] $user{LOGIN} - Don't have money account\n";
        }

      }
 	  }
  }


#Daily bonus PAYMENTS
#Make traffic recalculation for expration
$list = $tariffs->list({ %LIST_PARAMS });
$debug_output .= "Bonus payments\n";
use Billing;
my $Billing = Billing->new($db, $CONF);

  
  foreach my $tp_line (@$list) {
     
     my $ti_list = $tariffs->ti_list({ TP_ID => $tp_line->[18] });

     next if ($tariffs->{TOTAL} != 1);

     $debug_output .= "TP_ID: $tp_line->[0]\n" if ($debug > 6);
     foreach my $ti (@$ti_list) {

       my $tt_list = $tariffs->tt_list({ TI_ID => $ti->[0] });
       next if ($tariffs->{TOTAL} < 1);
       
       
       my %expr_hash      = ();
       my $traffic_class  = 0;

     	 foreach my $tt ( @$tt_list ) {
     	 	 my $expression = $tt->[8];
     	 	 next if ($expression !~ /BONUS_TRAFFIC_/);
         
         $expression =~ s/BONUS_TRAFFIC/TRAFFIC/g;

         $debug_output .= "TP: $tp_line->[0] TI: $ti->[0] TT: $tt->[0]\n";
         $debug_output .= "  Expr: $expression\n" if ($debug > 3);
         $traffic_class = $tt->[0];

         $expr_hash{$traffic_class} = $expression;
         #last;

     	  
       if (! defined($expr_hash{$traffic_class})) {
       	 next;
        }
       
       #Get users for bonus payments
       #Ipn users for daily payments
   	   $ulist = $Dv->list({ 
           ACTIVATE   => "<='$ADMIN_REPORT{DATE}'",
           EXPIRE     => ">'$ADMIN_REPORT{DATE}'",
           STATUS     => 0,
           LOGIN_STATUS => 0,
           TP_ID      => $tp_line->[0],
           SORT       => 1,
           PAGE_ROWS  => 1000000,
           TP_CREDIT  => '>=0',
           COMPANY_ID => '>=0',
           %DV_LIST_PARAMS
 	     	 });

       my $extfield_count = $Dv->{SEARCH_FIELDS_COUNT};
       foreach my $u (@$ulist) {

         %user = (
            LOGIN      => $u->[0],  
            UID        => $u->[6+ $extfield_count],
            BILL_ID    => ($tp_line->[13] > 0) ? $u->[14 + $extfield_count] : $u->[12 + $extfield_count],

            REDUCTION  => $u->[13 + $extfield_count],
            ACTIVATE   => $u->[10 + $extfield_count],
            DEPOSIT    => $u->[2],
            CREDIT     => ($u->[3] > 0) ? $u->[3] : $line->[14],
            COMPANY_ID => $u->[7 + $extfield_count]
           );

         $Billing->{PERIOD_TRAFFIC}=undef;

         my $RESULT = $Billing->expression($user{UID}, \%expr_hash, 
                                                          { START_PERIOD  => $attr->{YESTERDAY},
                                                          	STOP_PERIOD   => $attr->{DATE}, 
  	                                                        debug         => 0,
  	                                                        IPN           => 1,
  	                                                        TRAFFIC_CLASS => $traffic_class
  	                                                        });

         my $message = '';
         my $sum     = 0;
 
         my %FEES_PARAMS = (
                            DATE     => $ADMIN_REPORT{DATE},
                            METHOD   => 0 );  


         #my $result_sufix = ($traffic_class > 0) ? $traffic_class + 1 : '';

         if ($RESULT->{'TRAFFIC_IN'}) {
         	 $FEES_PARAMS{DESCRIBE} = "$_USED $_TRAFFIC: ".$RESULT->{'TRAFFIC_IN'} ."SUM: $RESULT->{PRICE_IN}";
         	 $sum     = $RESULT->{'TRAFFIC_IN'} * $RESULT->{PRICE_IN}; #(($RESULT->{PRICE_IN}) ? $RESULT->{PRICE_IN} : 0);
          }

         if ($RESULT->{'TRAFFIC_OUT'}) {
         	 $FEES_PARAMS{DESCRIBE} = "$_USED $_TRAFFIC: ". $RESULT->{'TRAFFIC_OUT'} ."SUM: $RESULT->{PRICE_OUT}";
         	 $sum     = $RESULT->{'TRAFFIC_OUT'} * $RESULT->{PRICE_OUT};
          }
         elsif ($RESULT->{'TRAFFIC_SUM'}) {
         	 $FEES_PARAMS{DESCRIBE} = "$_USED $_TRAFFIC: ". $RESULT->{'TRAFFIC_SUM'}." SUM: $RESULT->{PRICE}";
         	 $sum     = $RESULT->{'TRAFFIC_SUM'} * $RESULT->{PRICE};
          }


         if ($sum > 0 && $debug < 5) {
             $payments->add(\%user, 
  	             	            { SUM            => $sum,
  	             	            	METHOD         => 4,
  	                            DESCRIBE       => "$_TRAFFIC_CLASS: $traffic_class $_BONUS",
  	                            } );

          }

         $debug_output .= " Login: $u->[0] ($u->[8])  TP_ID: $u->[11] Payments: $sum REDUCTION: $u->[15] $u->[2] $u->[3] $u->[10] - $user{ACTIVATE}\n" if ($debug > 0); 	
         



        }

}

      }
}


  $DEBUG .= $debug_output;
  return $debug_output;
}



#**********************************************************
# monthly_fees
# Extended parameters  
# TP_ID - Make periodic only for  TP_ID
# LOGIN - Make periodic only for user. You can use wildcard (*)
#**********************************************************
sub dv_monthly_fees {
 my ($attr) = @_;

 my $debug = $attr->{DEBUG} || 0;
 my $debug_output = '';
 $debug_output .= "DV: Monthly periodic payments\n" if ($debug > 1);
 
 use Users;
 
 $LIST_PARAMS{TP_ID} = $attr->{TP_ID} if ($attr->{TP_ID});
 my %DV_LIST_PARAMS = ();
 $DV_LIST_PARAMS{LOGIN} = $attr->{LOGIN} if ($attr->{LOGIN});

 my $users = Users->new($db, $admin, \%conf); 
 my $list = $tariffs->list({ %LIST_PARAMS });


 $ADMIN_REPORT{DATE}=$DATE if (! $ADMIN_REPORT{DATE});
 my ($y, $m, $d)=split(/-/, $ADMIN_REPORT{DATE}, 3);
 my $days_in_month=($m!=2?(($m%2)^($m>7))+30:(!($y%400)||!($y%4)&&($y%25)?29:28));

 $m--;
 my $date_unixtime =  mktime(0, 0, 0, $d, $m, $y - 1900, 0, 0, 0);

 #Get Preview month begin end days
 if ($m == 0) {
   $m = 12;
   $y--;
  }

 $m = sprintf("%02d", $m);
 my $days_in_pre_month=($m!=2?(($m%2)^($m>7))+30:(!($y%400)||!($y%4)&&($y%25)?29:28));

 my $pre_month_begin = "$y-$m-01";
 my $pre_month_end = "$y-$m-$days_in_pre_month";
 $START_PERIOD_DAY = ($conf{START_PERIOD_DAY}) ? $conf{START_PERIOD_DAY} : 1;

 foreach my $line (@$list) {
   my %TP_INFO     = ();
 	 my $TP_ID       = $line->[0];
 	 my $min_use_sum = $line->[16];
 	 my $abon_distrib= $line->[17];
 	 my $postpaid    = $line->[4];
   my $month_fee   = $line->[6];
   my $activate_date = "<='$ADMIN_REPORT{DATE}'";

   $TP_INFO{POSTPAID_MONTHLY} = $line->[13];
   $TP_INFO{REDUCTION}        = $line->[11];

   my %used_traffic = ();
  
   #Monthfee & min use
 	 if ($month_fee > 0 || $min_use_sum > 0) {
 	   $debug_output .= "TP ID: $line->[0] MF: $line->[6] POSTPAID: $TP_INFO{POSTPAID_MONTHLY} REDUCTION: $TP_INFO{REDUCTION} EXT_BILL_ID: $line->[14] CREDIT: $line->[15] MIN_USE: $min_use_sum ABON_DISTR: $abon_distrib\n" if ($debug > 1);

 	   #get used  traffic for min use functions
 	   my %processed_users = ();
     if ($min_use_sum > 0 ) {
       next if ($d != $START_PERIOD_DAY && ! $conf{DV_MIN_USER_FULLPERIOD});
       my $interval = "$pre_month_begin/$pre_month_end";
       
       if ($conf{DV_MIN_USER_FULLPERIOD}) {
       	 $activate_date = strftime "%Y-%m-%d", localtime($date_unixtime - 86400 * 30);
       	 $interval      = "$activate_date/$ADMIN_REPORT{DATE}";
       	 $activate_date = "='$activate_date'";
        }
       
       my $report_list = $sessions->reports({ 
                     INTERVAL   => $interval,
                     TP_ID      => $TP_ID,
	   	              });
	  
	     foreach my $l (@$report_list) {
 	  	   $used_traffic{$l->[7]}=$l->[6];
        }
      }

     if ($abon_distrib) {
     	 $month_fee = $month_fee / $days_in_month;
      }    
     
	   my $ulist = $Dv->list({ 
         ACTIVATE     => $activate_date,
         EXPIRE       => ">'$ADMIN_REPORT{DATE}'",
         STATUS       => 0,
         LOGIN_STATUS => 0,
         TP_ID        => $TP_ID,
         SORT         => 1,
         PAGE_ROWS    => 1000000,
         TP_CREDIT    => '>=0',
         %DV_LIST_PARAMS
 	   	 });
 
     my $extfield_count = $Dv->{SEARCH_FIELDS_COUNT};

     foreach my $u (@$ulist) {
       my %user = (
            LOGIN      => $u->[0],  
            UID        => $u->[6+ $extfield_count],
            BILL_ID    => ($line->[14] > 0) ? $u->[14 + $extfield_count] : $u->[12 + $extfield_count],
            REDUCTION  => $u->[13 + $extfield_count],
            ACTIVATE   => $u->[10 + $extfield_count],
            DEPOSIT    => $u->[2],
            CREDIT     => ($u->[3] > 0) ? $u->[3] : $line->[14],
            COMPANY_ID => $u->[7 + $extfield_count]
           );

       $debug_output .= " Login: $user{LOGIN} ($user{UID}) TP_ID: ". ($u->[9 +$extfield_count ]  ) ." Fees: $line->[6] REDUCTION: $user{REDUCTION} DEPOSIT: $u->[2] CREDIT $user{CREDIT} ACTIVE: $user{ACTIVATE} TP: $u->[11]\n" if ($debug > 3); 	

      
       if (($user{BILL_ID} && $user{BILL_ID} > 0) && defined($user{DEPOSIT})) {
         my %FEES_PARAMS = (
                            DATE     => $ADMIN_REPORT{DATE},
                            METHOD   => 1 );  

       
         my $sum = 0;
         
         #***************************************************************
         #Min use Makes only 1 of month
         if ($min_use_sum > 0) {
           
           next if ($d != $START_PERIOD_DAY && ! $conf{DV_MIN_USER_FULLPERIOD});
           #Check activation dae
           my $min_use = $min_use_sum;

           if ($user{REDUCTION} > 0) {
             $min_use = $min_use * (100 - $user{REDUCTION}) / 100;
            }

           #Min use Alignment
           if (! $conf{DV_MIN_USER_FULLPERIOD} && $user{ACTIVATE} ne '0000-00-00') {
             	 my ($activated_y, $activated_m, $activated_d)=split(/-/, $user{ACTIVATE}, 3);
             	 my $days_in_month=($activated_m!=2?(($activated_m%2)^($activated_m>7))+30:(!($activated_y%400)||!($activated_y%4)&&($activated_y%25)?29:28)); 
     	         $min_use = sprintf("%.2f", $min_use / $days_in_month * ($days_in_month - $activated_d + $START_PERIOD_DAY));
           	}

           my $used = ($used_traffic{$user{UID}}) ? $used_traffic{$user{UID}} : 0;
           $FEES_PARAMS{DESCRIBE}="$_MIN_USE"; 
           #summary for all company users with same tarif plan
           if ($user{COMPANY_ID}>0 && $processed_users{$user{COMPANY_ID}}) {
           	 next;
            }

           if ($user{COMPANY_ID} > 0) {
             my $company_users = $Dv->list({ TP_ID      => $TP_ID,
                                             COMPANY_ID => $user{COMPANY_ID}
         	                                  });
             my @UIDS = ();
             foreach my $c_user ( @$company_users ) {
         	      push @UIDS, $c_user->[0];
         	      $used += $used_traffic{$user{UID}} if ($used_traffic{$user{UID}});
         	      $processed_users{$user{COMPANY_ID}}++;
              }

             $min_use = $min_use * $processed_users{$user{COMPANY_ID}};
             $FEES_PARAMS{DESCRIBE} .= "$_COMPANY $_LOGINS: ". join(', ', @UIDS);
            }

           #Get Fees sum for min_user
           if ($conf{MIN_USE_FEES_CONSIDE})	{
       	     $fees->list({ UID     => $user{UID},
       	     	             DATE    => ($user{ACTIVATE} ne '0000-00-00') ? ">=$user{ACTIVATE}" : $DATE,
       	     	             METHODS => "$conf{MIN_USE_FEES_CONSIDE}" 
       	     	             });
       	     $used += $fees->{SUM} if ($fees->{SUM});
            }

           $debug_output .=  "  USED: $used\n" if ($debug > 3);
           #Make payments
           next if ($used >= $min_use);

           $sum = $min_use - $used;
           if ($TP_INFO{REDUCTION} == 1 && $user{REDUCTION} > 0) {
             if ($user{REDUCTION} >= 100) {
             	 $debug_output .= "UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION} next\n" if ($debug > 3);
             	 next;
              }
             $sum = $sum * (100 - $user{REDUCTION}) / 100;
            }
           
           
           if($postpaid == 1 || $user{DEPOSIT} + $user{CREDIT} > 0 || $TP_INFO{POSTPAID_MONTHLY} == 1) {
              
              if ($d == $START_PERIOD_DAY) {
                if ($debug > 4) {
                  $debug_output .= " UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
                 }
                else {
                  $fees->take(\%user, $sum, { %FEES_PARAMS } );  

                  $debug_output .= " $user{LOGIN}  UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n" if ($debug > 0);
                  if ( $user{ACTIVATE} ne '0000-00-00') {
                    $users->change($user{UID}, { 
         	                        UID      => $user{UID},
        	                        ACTIVATE => '0000-00-00' });
        	          }
                 }
               }
             }
           
                  
 
          }
         #***************************************************************
         #Month Fee
         else {
           #Make sum 
           $sum = $month_fee;
    
           if ($TP_INFO{REDUCTION} == 1 && $user{REDUCTION} > 0) {
             $sum = $sum * (100 - $user{REDUCTION}) / 100;
            }


           #If deposit is above-zero or TARIF PALIN is POST PAID or PERIODIC PAYMENTS is POSTPAID
           
           if($postpaid == 1 || $user{DEPOSIT} + $user{CREDIT} > 0 || $TP_INFO{POSTPAID_MONTHLY} == 1){

              #take fees in first day of month
              $FEES_PARAMS{DESCRIBE}="$_MONTH_FEE ($TP_ID)";  
              
              $FEES_PARAMS{DESCRIBE} .= " - $_ABON_DISTRIBUTION" if ($abon_distrib);

             # If activation set to monthly fees taken throught 30 days
              if($user{ACTIVATE} ne '0000-00-00') {
   	            my ($activate_y, $activate_m, $activate_d)=split(/-/, $user{ACTIVATE}, 3);
                $activate_m--;
                my $active_unixtime =  mktime(0, 0, 0, $activate_d, $activate_m, $activate_y - 1900, 0, 0, 0);
                if ($date_unixtime - $active_unixtime > 30 * 86400) {
                  if ($debug > 4) {
                    $debug_output .= " $user{LOGIN} UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
                   }
                  else {
                    $fees->take(\%user, $sum, { %FEES_PARAMS } );
                    $debug_output .= " $user{LOGIN} UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION} CHANGE ACTIVATE\n" if ($debug > 0);
                    if ($fees->{errno}) {
                    	print "Dv Error: [ $user{UID} ] $user{LOGIN} SUM: $sum [$fees->{errno}] $fees->{errstr} ";
                     	if ($fees->{errno} == 14 ) {
                 	 	    print "UID: $user{UID} LOGIN: $user{LOGIN} - Don't have money account";
               	       }
               	      print "\n";
               	     }
                    else {
                      $users->change($user{UID}, { 
                	                        UID      => $user{UID},
                	                        ACTIVATE => $ADMIN_REPORT{DATE} } 
                 	             );
                     }
                   }
                 }
                elsif ($abon_distrib) {
                	$fees->take(\%user, $sum, { %FEES_PARAMS } );
                  $debug_output .= " $user{LOGIN} UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION} CHANGE ACTIVATE\n" if ($debug > 0);
                 }
                 #print "   $user{LOGIN} $line->[6] $user{DEPOSIT} $USER{CREDIT} $u->[10] - $u->[11]\n"; 	
               }
              elsif (($user{ACTIVATE} eq '0000-00-00' and $d == $START_PERIOD_DAY) || $abon_distrib) {

                if ($debug > 4) {
                  $debug_output .= " UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n";
                 }
                else {
                  $fees->take(\%user, $sum, { %FEES_PARAMS } );  
                  $debug_output .= " $user{LOGIN}  UID: $user{UID} SUM: $sum REDUCTION: $user{REDUCTION}\n" if ($debug > 0);
                 }
               }

             }
         
          }
        }
       else {
       	 my $ext = ($line->[14] > 0) ? 'Ext bill' : '';
      	 print "UID: $user{UID} LOGIN: $user{LOGIN} Don't have $ext money account\n";
        }
 	  }
  }
}


#=====================================

#Make traffic recalculation for expration
if ($d == 1) {
  $list = $tariffs->list({ %LIST_PARAMS });
  $debug_output .= "Total month price\n";
  use Billing;
  my $Billing = Billing->new($db, $CONF);

  #my %$processed_users = ();
  
  foreach my $tp_line (@$list) {
     my $ti_list = $tariffs->ti_list({ TP_ID => $tp_line->[18] });
     next if ($tariffs->{TOTAL} != 1);

     foreach my $ti (@$ti_list) {

       my $tt_list = $tariffs->tt_list({ TI_ID => $ti->[0] });
       next if ($tariffs->{TOTAL} != 1);
       
       my %expr_hash = ();
     	 foreach my $tt ( @$tt_list ) {
     	 	 my $expression = $tt->[8];
     	 	 next if ($expression !~ /MONTH_TRAFFIC_/);
         
         $expression =~ s/MONTH_TRAFFIC/TRAFFIC/g;

         $debug_output .= "TP: $tp_line->[0] TI: $ti->[0] TT: $tt->[0]\n";
         $debug_output .= "  Expr: $expression\n" if ($debug > 3);
         
         $expr_hash{$tt->[0]} = $expression;
         

     	  }

       next if (! defined($expr_hash{0}));

   	   $ulist = $Dv->list({ 
           ACTIVATE   => "<='$ADMIN_REPORT{DATE}'",
           EXPIRE     => ">'$ADMIN_REPORT{DATE}'",
           STATUS     => 0,
           LOGIN_STATUS => 0,
           TP_ID      => $tp_line->[0],
           SORT       => 1,
           PAGE_ROWS  => 1000000,
           TP_CREDIT  => '>=0',
           COMPANY_ID => '>=0',
 	     	 });

       my $extfield_count = $Dv->{SEARCH_FIELDS_COUNT};
       foreach my $u (@$ulist) {

         %user = (
            LOGIN      => $u->[0],  
            UID        => $u->[6+ $extfield_count],
            BILL_ID    => ($tp_line->[13] > 0) ? $u->[14 + $extfield_count] : $u->[12 + $extfield_count],

            REDUCTION  => $u->[13 + $extfield_count],
            ACTIVATE   => $u->[10 + $extfield_count],
            DEPOSIT    => $u->[2],
            CREDIT     => ($u->[3] > 0) ? $u->[3] : $line->[14],
            COMPANY_ID => $u->[7 + $extfield_count]
           );

         $debug_output .= " Login: $u->[0] ($u->[8])  TP_ID: $u->[11] Fees: - REDUCTION: $u->[15] $u->[2] $u->[3] $u->[10] - $user{ACTIVATE}\n" if ($debug > 3); 	

#Summary for company users
#         my @UIDS  = ();
#         if ($$processed_users{$user{COMPANY_ID}}) {
#         	 next;
#          }
#
#         if ($user{COMPANY_ID}) {
#           my $company_users = $ulist = $Dv->list({ TP_ID      => $tp_line->[0],
#                                                    COMPANY_ID => $user{COMPANY_ID}
#         	                                        });
#           $$processed_users{$user{COMPANY_ID}}=1;
#         
#           foreach my $c_user ( @$company_users ) {
#         	    push @UIDS, $c_user->[7];
#            }
#
#           print "$user{LOGIN} hello $user{COMPANY_ID} // ";
#           print @UIDS ,"\n";
#          }

         $Billing->{PERIOD_TRAFFIC}=undef;
         my $RESULT = $Billing->expression($user{UID}, \%expr_hash, 
                                                          { START_PERIOD => $user{ACTIVATE},
  	                                                        debug        => 0,
  	                                                        #UIDS         => ($#UIDS > -1) ? join(',', @UIDS) : '',
  	                                                        #ACCOUNTS_SUMMARY => $#UIDS+1
  	                                                        });
  	                                                        
         my $message = '';
         my $sum     = 0;
 
         my %FEES_PARAMS = (
                            DATE     => $ADMIN_REPORT{DATE},
                            METHOD   => 0 );  

         if ($RESULT->{TRAFFIC_IN}) {
         	 $FEES_PARAMS{DESCRIBE} = "$_USED $_TRAFFIC: $RESULT->{TRAFFIC_IN} SUM: $RESULT->{PRICE_IN}";
         	 $sum     = $RESULT->{TRAFFIC_IN} * $RESULT->{PRICE_IN};
          }

         if ($RESULT->{TRAFFIC_OUT}) {
         	 $FEES_PARAMS{DESCRIBE} = "$_USED $_TRAFFIC: $RESULT->{TRAFFIC_OUT} SUM: $RESULT->{PRICE_OUT}";
         	 $sum     = $RESULT->{TRAFFIC_OUT} * $RESULT->{PRICE_OUT};
          }
         elsif ($RESULT->{TRAFFIC_SUM}) {
         	 $FEES_PARAMS{DESCRIBE} = "$_USED $_TRAFFIC: $RESULT->{TRAFFIC_SUM} SUM: $RESULT->{PRICE}";
         	 $sum     = $RESULT->{TRAFFIC_SUM} * $RESULT->{PRICE};
          }

         $fees->take(\%user, $sum, { %FEES_PARAMS } );  
        }


      }
   } 	
  	
 }

  $DEBUG .= $debug_output;
  return $debug_output;
}

#**********************************************************
# user_warnings
# 
#**********************************************************
sub dv_users_warning_messages {


 $ADMIN_REPORT{USERS_WARNINGS} = sprintf("%-14s| %4s|%-20s| %9s| %8s|\n", $_LOGIN, 'TP', $_TARIF_PLAN, $_DEPOSIT, $_CREDIT).
   "---------------------------------------------------------------\n";
 if (defined($ADMIN_REPORT{NO_USERS_WARNINGS})) {
   return 0;
  }

my %LIST_PARAMS = (USERS_WARNINGS => 1 ) ;
my $list = $Dv->list( { %LIST_PARAMS } );

return 0 if ($Dv->{TOTAL} < 1);
my %USER_INFO = ();


foreach my $line (@$list) {
  #u.id, u.email, u.tp_id, u.credit, u.deposit, tp.name, tp.uplimit

  $USER_INFO{LOGIN}  = $line->[0];
  $USER_INFO{TP_NAME}= $line->[5];
  $USER_INFO{TP_ID}  = $line->[2];
  $USER_INFO{DEPOSIT}= $line->[4];
  $USER_INFO{CREDIT} = $line->[3];
  
  my $email = ((! defined($line->[1])) || $line->[1] eq '') ? "$line->[0]\@$conf{USERS_MAIL_DOMAIN}" : "$line->[1]";
  
 
  $ADMIN_REPORT{USERS_WARNINGS} .= sprintf ("%-14s| %4d|%-20s| %9.4f| %8.2f|\n", 
    $USER_INFO{LOGIN}, 
    $USER_INFO{TP_ID}, 
    $USER_INFO{TP_NAME},  
    $USER_INFO{DEPOSIT}, 
    $USER_INFO{CREDIT});
  
  my $message = $html->tpl_show(_include('dv_users_warning_messages', 'Dv'), \%USER_INFO, { notprint => 1 });

  sendmail("$conf{ADMIN_MAIL}", 
           "$email", 
           "$_BILL_INFO", 
           "$message", 
           "$conf{MAIL_CHARSET}", 
           "2 (High)");
}

$ADMIN_REPORT{USERS_WARNINGS} .= "---------------------------------------------------------------
$_TOTAL: $Dv->{TOTAL}\n";


}



#**********************************************************
# form_traf_tarifs()
#**********************************************************
sub dv_traf_tarifs {
  my ($attr) = @_;
  my $tarif_plan;

  
if (defined($FORM{tt})) {
  $tarif_plan = $attr->{TP};
  $tarif_plan->tt_defaults();
  $tarif_plan->{TI_ID} = $FORM{tt};



  if($FORM{add}) {
    $tarif_plan->tt_add({ %FORM });
    if(! $tarif_plan->{errno}) {
      $html->message('info', $_INFO, "$_ADDED");
     }
   }
  elsif($FORM{change}) {
    $FORM{TI_ID}=$FORM{tt};
    $tarif_plan->tt_change({ %FORM });
    
    if(! $tarif_plan->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED"); 
     }
   }
 	elsif(defined($FORM{chg})) {
    $tarif_plan->tt_info({ TI_ID => $FORM{tt}, TT_ID => $FORM{chg} });
    if(! $tarif_plan->{errno}) {
      $html->message('info', $_INFO, "$_CHANGING");  	
     }
    $tarif_plan->{ACTION}='change';
    $tarif_plan->{LNG_ACTION}=$_CHANGE;
   }
  elsif(defined($FORM{del}) && defined($FORM{is_js_confirmed}) ) {
    $tarif_plan->tt_del({ TI_ID => $FORM{tt}, TT_ID => $FORM{del} });
    if(! $tarif_plan->{errno}) {
    	$html->message('info', $_INFO, "$_DELETED"); 
     }
  }


  if ($tarif_plan->{errno}) {
    my $messages = "($tarif_plan->{errstr})" if($tarif_plan->{errstr});
    $html->message('err', $_ERROR, "[$tarif_plan->{errno}] $err_strs{$tarif_plan->{errno}} $messages");	
   }


  my $list = $tarif_plan->tt_list({ TI_ID => $FORM{tt}, form => 1 });
  $tarif_plan->{TT_ID}=$tarif_plan->{TOTAL} if (! defined($FORM{chg}));
  
 
   
 }
elsif($attr->{TP}) {
  $tarif_plan = $attr->{TP};
  $tarif_plan->tt_defaults();

  if ($FORM{change}) {

    
    $tarif_plan->tt_change( { 
    	TT_DESCRIBE_0  => $FORM{TT_DESCRIBE_0},
      TT_PRICE_IN_0  => $FORM{TT_PRICE_IN_0},
      TT_PRICE_OUT_0 => $FORM{TT_PRICE_OUT_0},
      TT_NET_ID_0    => $FORM{TT_NETS_0},
      TT_PREPAID_0   => $FORM{TT_PREPAID_0},
      TT_SPEED_0     => $FORM{TT_SPEED_0},

      TT_DESCRIBE_1  => $FORM{'TT_DESCRIBE_1'},
      TT_PRICE_IN_1  => $FORM{TT_PRICE_IN_1},
      TT_PRICE_OUT_1 => $FORM{TT_PRICE_OUT_1},
      TT_NETS_1      => $FORM{TT_NETS_1},
      TT_PREPAID_1   => $FORM{TT_PREPAID_1},
      TT_SPEED_1     => $FORM{TT_SPEED_1},

      TT_DESCRIBE_2 => $FORM{TT_DESCRIBE_2},
      TT_NETS_2     => $FORM{TT_NETS_2},
      TT_SPEED_2    => $FORM{TT_SPEED_2},

      EX_FILE_PATH  => "$conf{DV_EXPPP_NETFILES}"
    });


    if ($tarif_plan->{errno}) {
      my $messages = "($tarif_plan->{errstr})" if($tarif_plan->{errstr});
      $html->message('err', $_ERROR, "[$tarif_plan->{errno}] $err_strs{$tarif_plan->{errno}} $messages");	
     }
    else {
      $html->message('info', $_INFO, "$_INTERVALS");
     }
   }

   my $list = $tarif_plan->tt_list($FORM{ti});
 }
  


}



#***********************************************************
# dv_sheduler
#***********************************************************
sub dv_sheduler {
	my ($type, $action, $uid)=@_;

  my $user = $Dv->info($uid);  	
  if ($type eq 'tp') {
    $Dv->change({ UID   => $uid, 
    	            TP_ID => $action 
    	          });

    if ($Dv->{errno} && $Dv->{errno} == 15) {
    	return $Dv->{errno};
     }
   }
  elsif ($type eq 'status') {
    $Dv->change({ UID    => $uid, 
    	            STATUS => $action 
    	          });

    if ($Dv->{errno} && $Dv->{errno} == 15) {
    	return $Dv->{errno};
     }
   }

  return 0;
}


#***********************************************************
# dv_report
#***********************************************************
sub dv_report {
	my ($type, $attr)=@_;
  my $REPORT = "Module: DV\n";
  
  %LIST_PARAMS = %{$attr->{LIST_PARAMS}} if (defined($attr->{LIST_PARAMS}));

  
if ($type eq 'daily') {
	$REPORT .= sprintf ("%-14s| %5s| %9s| %9s| %10s| %9s|\n", $_LOGIN, $_SESSIONS, 
    $_TRAFFIC, "$_TRAFFIC 2", $_DURATION, $_SUM);
  $REPORT .= "---------------------------------------------------------\n";

  $list = $sessions->reports( { %LIST_PARAMS } );
  foreach my $line (@$list) {
   $REPORT .= sprintf ("%-14s| %5d| %9s| %9s| %8s| %9.4f|\n", 
     $line->[1], 
     $line->[2], 
     int2byte($line->[3]), 
     int2byte($line->[4]), 
     $line->[5], 
     $line->[6]);
   }

  $REPORT .= "---------------------------------------------------------\n";
  $REPORT .= sprintf("%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n", 
   $_USERS,       $sessions->{USERS}, 
   $_SESSIONS,    $sessions->{SESSIONS}, 
   $_TRAFFIC,     int2byte($sessions->{TRAFFIC}), 
   "$_TRAFFIC 2", int2byte($sessions->{TRAFFIC_2}), 
   $_DURATION,    $sessions->{DURATION}, 
   $_SUM,         $sessions->{SUM});

 }
elsif ($type eq 'monthly') {
  $REPORT .= sprintf (" %12s| %5s| %5s| %10s| %10s| %12s| %9s|\n", $_DATE, $_USERS, $_SESSIONS, 
    $_TRAFFIC, "$_TRAFFIC 2", $_DURATION, $_SUM);
  $REPORT .= "---------------------------------------------------------\n";
 
  my $list = $sessions->reports( { %LIST_PARAMS } );

  foreach my $line (@$list) {
#   u.id, count(l.id), sum(l.sent + l.recv), sum(l.sent2 + l.recv2), sec_to_time(sum(l.duration)), sum(l.sum), l.id
    $REPORT .= sprintf (" %12s| %5s| %5s| %10s| %10s| %12s| %9.4f|\n", 
     $line->[0], 
     $line->[1], 
     $line->[2], 
     int2byte($line->[3]), 
     int2byte($line->[4]), 
     $line->[5], 
     $line->[6]);
   }

  $REPORT .= "---------------------------------------------------------\n";
  $REPORT .= sprintf("%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n", 
    $_USERS,       $sessions->{USERS}, 
    $_SESSIONS,    $sessions->{SESSIONS}, 
    $_TRAFFIC,     int2byte($sessions->{TRAFFIC}), 
    "$_TRAFFIC 2", int2byte($sessions->{TRAFFIC_2}), 
    $_DURATION,    $sessions->{DURATION}, 
    $_SUM,         $sessions->{SUM});
}

 
  return $REPORT;
}










#*******************************************************************
# Make cards
#*******************************************************************
sub dv_cards {
	require "Abills/modules/Cards/webinterface";

  my $dv_tpl = dv_wizard_user({ OUTPUT2RETURN => 1,
  	                            NO_EXTRADATA  => 1,
  	                            TPLS          => { '2:' => '',
                                                   '3:' => '' } 
                              });

	my $return = cards_users_add({ EXTRA_TPL => $dv_tpl  });
  

  $FORM{add}=1;

  if (scalar keys %FORM_BASE < 1) {
  	%FORM_BASE=%FORM;
   }

  my $CREATED = '';
  my $added_count = 0;


  my $table = $html->table({ width      => '100%',
                             border     => 1,
                             title      => ["$_LOGIN", "ID", "$_INFO"],
                             cols_align => ['left', 'right', 'right'],
                            });



  if (ref($return) eq 'ARRAY') {
  	 foreach my $line (@$return) {
        %FORM = ();
     	  %FORM = %FORM_BASE;

  	 	  while(my($k, $v)= each %$line) {
  	 	  	 $FORM{$k}=clearquotes($v);
  	 	    }

  	 	  $FORM{'1.LOGIN'}      = $line->{LOGIN};
  	 	  $FORM{'1.PASSWORD'}   = $line->{PASSWORD};
  	 	  $FORM{'1.CREATE_BILL'}= 1;
        
        $line->{UID} = dv_wizard_user({ SHORT_REPORT => 1 });
       
  	 	  if ( $line->{UID} < 1) {
  	 	  	 $html->message('err', "$_ERROR", "$_LOGIN: '$line->{LOGIN}'");
  	 	  	 
  	 	  	 last if (! $line->{SKIP_ERRORS} );
  	 	   }
  	 	  else {
  	 	    #Confim card creation
  	 	    $added_count++;
  	 	    $table->addrow("$FORM{'1.LOGIN'}", "$UID", "$FORM{ex_message}");
  	 	  	if(cards_users_gen_confim({ %$line, SUM => ($FORM{'5.SUM'}) ? $FORM{'5.SUM'} : 0  }) == 0) {
  	 	  		 return 0;
  	 	  		}
  	 	   }
  	  }

   }
  

if ($added_count > 0) {
  $html->message('info', $_INFO, "$_ADDED:  $added_count");
  print $table->show();
}

}


#*******************************************************************
#
#*******************************************************************
sub dv_wizard_user {
	my ($attr) = @_;

  my $fees     = Finance->fees($db, $admin, \%conf);
  my $payments = Finance->payments($db, $admin, \%conf);
  my $users    = Users->new($db, $admin, \%conf); 



  if ($FORM{print}) {
    require "Abills/modules/Docs/webinterface";
    if ($FORM{PRINT_CONTRACT}) {
      docs_contract({ %$Dv });
    } 
   else {
     docs_account();
    }
   return 0;
  }

  my %add_values = ();

  if ($FORM{add}) {

  	foreach my $k ( sort %FORM) {
      if ($k =~ m/^[0-9]+\.[_a-zA-Z0-9]+$/) { #  && $k !~ /__|[a-z]/) {
        $k =~ s/%22//g;
        my ($id, $main_key)=split(/\./, $k, 2);
        $add_values{$id}{$main_key}=$FORM{$k};
       }
  	 }

    #print $table->show();
    # Password
    $add_values{1}{GID} = $admin->{GID} if ($admin->{GID});
    my $user=$users->add({ %{$add_values{1}} });
    my $message = '';
    if (! $user->{errno}) {
   	  $UID = $user->{UID};
   	  $user = $user->info($UID);
      
      #2 
      if (defined($FORM{'2.newpassword'}) && $FORM{'2.newpassword'} ne '') {
        if (length($FORM{'2.newpassword'}) < $conf{PASSWD_LENGTH}) {
          $html->message('err', "$_PASSWD : $_ERROR", "$err_strs{6}");
         }
        elsif ($FORM{'2.newpassword'} eq $FORM{'2.confirm'}) {
          $add_values{2}{PASSWORD}=$FORM{'2.newpassword'};
          $add_values{2}{UID}=$UID;
          $add_values{2}{DISABLE}=$FORM{'1.DISABLE'};
         }
        elsif($FORM{'2.newpassword'} ne $FORM{'2.confirm'}) {
          $html->message('err', "$_PASSWD : $_ERROR", "$err_strs{5}");
         }

        $user->change($UID, { %{$add_values{2}} });
        
        if ($conf{external_useradd}) {
          if (! _external($conf{external_useradd}, { LOGIN => $add_values{1}{LOGIN}, %{$add_values{2}} }) ) {
       	    return 0;
           }
         }
       }
      
      #3 personal info
      $user->pi_add({ UID => "$UID", %{ $add_values{3} } });

      #5 Payments section
      if ($FORM{'5.SUM'}) {
        if($FORM{'5.SUM'} + 0 > 0) {
          my $er = ($FORM{'5.ER'}) ? $payments->exchange_info($FORM{'5.ER'}) : { ER_RATE => 1 } ;  
          $payments->add($user, { %{$add_values{5}}, ER => $er->{ER_RATE} } );  

          if ($payments->{errno}) {
            $html->message('err', "$_PAYMENTS : $_ERROR", "[$payments->{errno}] $err_strs{$payments->{errno}}");	
            return 0;
           }
          else {
            $message = "$_SUM: $FORM{'5.SUM'} $er->{ER_SHORT_NAME}";
           }
         }
        elsif($FORM{'5.SUM'} + 0 < 0) {
          my $er = ($FORM{'5.ER'}) ? $payments->exchange_info($FORM{'5.ER'}) : { ER_RATE => 1 } ;  
          
          
          $fees->take($user, abs($FORM{'5.SUM'}), { DESCRIBE => 'MIGRATION',  ER => $er->{ER_RATE} } );  

          if ($fees->{errno}) {
            $html->message('err', "$_ERROR : $_FEES", "[$fees->{errno}] $err_strs{$fees->{errno}}");	
            return 0;
           }
          else {
            $message = "$_SUM: $FORM{'5.SUM'} $er->{ER_SHORT_NAME}";
           }
         }
       }

      #4 Dv
      
      if ( $add_values{4}{IP} =~ /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/ &&  $add_values{4}{IP} ne '0.0.0.0') {
      	my $list = $Dv->list({ IP => $add_values{4}{IP} });
      	if ($Dv->{TOTAL} > 0 && $list->[0][6+$Dv->{SEARCH_FIELDS_COUNT}] != $FORM{UID}) {
      	  $html->message('err', $_ERROR, "IP: $FORM{IP} $_EXIST. $_LOGIN: ". $html->button("$list->[0][0]", "index=15&UID=". $list->[0][6+$Dv->{SEARCH_FIELDS_COUNT}]));
        	return 0;
    	   }
       }

      
   	  $Dv->add({ UID => $UID, %{$add_values{4}} });
      if ($Dv->{errno}) {
        $html->message('err', "Dv:$_ERROR", "Dv Modules [$Dv->{errno}] $err_strs{$Dv->{errno}}");	
        return 0;
       }
      elsif (! $FORM{SERIAL}) {
        if (! $add_values{4}{STATUS} && $Dv->{TP_INFO}->{MONTH_FEE} > 0) {
          $Dv->{UID}=$UID;
          $Dv->{ACTIVATE}=$add_values{1}{ACTIVATE};
          dv_get_month_fee($Dv);
         }
       }


      # Add E-Mail account
      my $Mail;
      if (in_array('Mail', \@MODULES) && $FORM{'6.USERNAME'}) {
        require "Abills/modules/Mail/webinterface";
        $Mail = Mail->new($db, $admin, \%conf);
        
        $FORM{'6.newpassword'} = $FORM{'6.PASSWORD'} if ($FORM{'6.PASSWORD'});

        $Mail->mbox_add({ UID => "$UID", 
        	                %{ $add_values{6} }, 
        	                PASSWORD => $FORM{'6.newpassword'},
        	             });
        $Mail->{PASSWORD}=$FORM{'6.newpassword'};

        if ($Mail->{errno}) {
          $html->message('err', "E-MAIL : $_ERROR", "[$Mail->{errno}] $err_strs{$Mail->{errno}}");	
          return 0;
         }
        elsif ($FORM{'6.SEND_MAIL'}) {
      	  my $message =  $html->tpl_show(_include('mail_test_msg', 'Mail'), $Mail, { OUTPUT2RETURN => 1 });
      	  sendmail("$conf{ADMIN_MAIL}", 
      	   "$Mail->{USER_EMAIL}", 
      	   "Test mail", 
      	   "$message", 
      	   "$conf{MAIL_CHARSET}", 
      	   "");
        
         }

        $Mail = $Mail->mbox_info({ MBOX_ID => $Mail->{MBOX_ID} });
       	$Mail->{EMAIL_ADDR} = $Mail->{USERNAME} . '@' . $Mail->{DOMAIN};
       }
      
      # Info
      my $dv = $Dv->info($UID);
      my $pi = $user->pi({ UID => $UID });
      $user  = $user->info($UID, { SHOW_PASSWORD => 1 });
      
     
      
      if (! $attr->{SHORT_REPORT}) {
        $FORM{ex_message}=$message;
        $html->message('info', $_ADDED, "LOGIN: $add_values{1}{LOGIN} UID: $UID  $message");
        $html->tpl_show(templates('form_user_info'), { %$user, %$pi, DATE => $DATE, TIME => $TIME } );
        $dv->{STATUS}=$service_status[$dv->{STATUS}];
        $html->tpl_show(_include('dv_user_info', 'Dv'), $dv);
        $html->tpl_show(_include('mail_user_info', 'Mail'), $Mail) if ($Mail);

        if (in_array('Docs', \@MODULES) ) {
          $html->message('info', $_INFO, "$_PRINT ". $html->button("$_CONTRACT", "qindex=$index&UID=$UID&PRINT_CONTRACT=$UID&print=1". (($conf{DOCS_PDF_PRINT}) ? '&pdf=1' : '' ), {ex_params => 'target=_new', BUTTON => 1  }) );
         }
        
        #If docs module enable make account
        if (in_array('Docs', \@MODULES)) {
          $tariffs->info($dv->{TP_ID});
          $LIST_PARAMS{UID} = $UID;

          if ($tariffs->{MONTH_FEE} + $tariffs->{ACTIV_PRICE} > 0) {
            require "Abills/modules/Docs/lng_$html->{language}.pl";
            require "Abills/modules/Docs/webinterface";

            $FORM{DATE}      = $DATE;
            $FORM{CUSTOMER}  = $pi->{FIO} || '-';
            $FORM{PHONE}     = $pi->{PHONE};
            $FORM{UID}       = $UID;

            $FORM{'IDS'}     = '1, 2';
            $FORM{'ORDER_1'}= "$_DV";
            $FORM{'COUNT_1'}= 1;
            $FORM{'UNIT_1'}  = 0;
            $FORM{'SUM_1'}   = $tariffs->{MONTH_FEE};

            if ($tariffs->{ACTIV_PRICE}) {
              $FORM{'ORDER_2'}= "$_ACTIVATE";
              $FORM{'COUNT_2'}= 1;  
              $FORM{'UNIT_2'}  = 0;
              $FORM{'SUM_2'}   = $tariffs->{ACTIV_PRICE};
             }

            $FORM{'create'}  = 1;
        	  docs_account();
        	}
        }
       }

      return $UID;
    }
   else {
     $html->message('err', "[$users->{errno}] $err_strs{$users->{errno}}", "$_LOGIN: '$add_values{1}{LOGIN}'");	
     return 0 if ($attr->{SHORT_REPORT});
    }
   
  } 


  my $users_defaults = $users->defaults();
  $users_defaults->{DISABLE}=($users_defaults->{DISABLE} == 1) ? ' checked' : '';
  $users_defaults->{GID} = sel_groups();
  #Info fields
  
  
  if (! $attr->{NO_EXTRADATA}) {
    $users_defaults->{EXDATA}  =  $user_info->{EXDATA} .=  $html->tpl_show(templates('form_user_exdata_add'), { CREATE_BILL => ' checked' }, { OUTPUT2RETURN => 1 });
    $users_defaults->{EXDATA} .=  $html->tpl_show(templates('form_ext_bill_add'), { CREATE_EXT_BILL => ' checked' }, { OUTPUT2RETURN => 1 }) if ($conf{EXT_BILL_ACCOUNT});
    
#    $html->tpl_show(templates('form_user_exdata'), 
#       { CREATE_BILL  => ' checked' }, 
#       { notprint => 1 });
   }
  
  my $dv_defaults = $Dv->defaults();
  $dv_defaults->{STATUS_SEL}=$html->form_select('STATUS', 
                                          { 
 	                                          SELECTED     => $FORM{STATUS} || undef,
 	                                          SEL_ARRAY    => \@service_status,
 	                                          STYLE        => \@service_status_colors,
 	                                          ARRAY_NUM_ID => 1
 	                                        });

  $payments->{SEL_METHOD} =  $html->form_select('METHOD', 
                                { SELECTED      => $FORM{METHOD} || undef,
 	                                SEL_ARRAY     => \@PAYMENT_METHODS,
 	                                ARRAY_NUM_ID  => 1
 	                               });
  $payments->{SUM} = '0.00';

  my $er = $payments->exchange_list();
  $payments->{SEL_ER} = "<select name=ER>\n";
  $payments->{SEL_ER} .= "<option value=''>\n";
  foreach my $line (@$er) {
    $payments->{SEL_ER} .= "<option value=$line->[4]";
    $payments->{SEL_ER} .= ">$line->[1] : $line->[2]\n";
   }
  $payments->{SEL_ER} .= "</select>\n";

  $dv_defaults->{TP_ID} = $html->form_select('TP_ID', 
                                         { 
 	                                         SELECTED  => $user->{TP_ID},
 	                                         SEL_MULTI_ARRAY   => $tariffs->list(),
 	                                         MULTI_ARRAY_KEY   => 0,
 	                                         MULTI_ARRAY_VALUE => 1,
 	                                        });
  $dv_defaults->{CALLBACK} = '';
 	             
 my $password_form;                           
 $password_form->{GEN_PASSWORD}=mk_unique_value(8);
 
 #Info fields
  my %pi_form = ();
   
  my $i=0; 
  
  my $list = $users->config_list({ PARAM => 'ifu*', SORT => 2});

  foreach my $line (@$list) {
    my $field_id   = '';
    if ($line->[0] =~ /ifu(\S+)/) {
    	$field_id = "3.".$1;
      my($position, $type, $name)=split(/:/, $line->[1]);

      my $input = '';
      if ($type == 2) {
        $input = $html->form_select("$field_id", 
                                { SELECTED          => $FORM{$field_id},
 	                                SEL_MULTI_ARRAY   => $users->info_lists_list( { LIST_TABLE => $field_id.'_list' }), 
 	                                MULTI_ARRAY_KEY   => 0,
 	                                MULTI_ARRAY_VALUE => 1,
 	                                SEL_OPTIONS       => { 0 => '-N/S-'},
 	                                NO_ID             => 1
 	                               });
    	
       }
      elsif ($type == 4) {
      	$input = $html->form_input($field_id, 1, { TYPE  => 'checkbox', STATE => ($FORM{$field_id}) ? 1 : undef  });
       }
      else {
    	  $input = $html->form_input($field_id, "", { SIZE => 40 });
       }
    
  	  $pi_form{INFO_FIELDS}.= "<tr><td>$name:</td><td>$input</td></tr>\n";
      $i++;
     }
   }

    if ($conf{DOCS_CONTRACT_TYPES}) {
    	#PREFIX:SUFIX:NAME;

    	$conf{DOCS_CONTRACT_TYPES} =~ s/\n//g;
      my (@contract_types_list)=split(/;/, $conf{DOCS_CONTRACT_TYPES});

      my %CONTRACTS_LIST_HASH = ();
      foreach my $line (@contract_types_list) {
      	my ($prefix, $sufix, $name, $tpl_name)=split(/:/, $line);
      	$prefix =~ s/ //g;
      	$CONTRACTS_LIST_HASH{"$prefix|$sufix"}=$name;
       }

      $pi_form{CONTRACT_TYPE}=" $_TYPE: ".$html->form_select('CONTRACT_TYPE', 
                                { SELECTED   => '',
 	                                SEL_HASH   => {'' => '', %CONTRACTS_LIST_HASH },
 	                                NO_ID      => 1
 	                               });
     }

 
 $pi_form{ADDRESS_TPL} = $html->tpl_show(templates('form_address'), undef, { OUTPUT2RETURN => 1 });
 
 $dv_defaults->{JOIN_SERVICE}='';
 my %tpls = (
	            "1:$_LOGIN::"    => $html->tpl_show(templates('form_user'), $users_defaults,    { OUTPUT2RETURN => 1, ID => 'FORM_USER'     }),  
	            "2:$_PASSWD::"   => $html->tpl_show(templates('form_password'), $password_form, { OUTPUT2RETURN => 1, ID => 'FORM_PASSWORD' }),
	            "3:$_INFO::"     => $html->tpl_show(templates('form_pi'), \%pi_form,            { OUTPUT2RETURN => 1, ID => 'FORM_PI'       }), 
	            "4:Internet::"   => $html->tpl_show(_include('dv_user', 'Dv'), $dv_defaults,    { OUTPUT2RETURN => 1, ID => 'DV_USER'       }),
 	            "5:$_PAYMENTS::" => $html->tpl_show(templates('form_payments'), $payments,      { OUTPUT2RETURN => 1, ID => 'FORM_PAYMENTS' }),
             );
 
 #If mail module added
 if (in_array('Mail', \@MODULES)) {
   require "Abills/modules/Mail/webinterface";
   my $Mail = Mail->new($db, $admin, \%conf);

   $Mail->{PASSWORD} = qq{  
	<tr><td>$_PASSWD:</td><td><input type="password" id="text_pma_pw_mail" name="newpassword" title="$_PASSWD" onchange="pred_password.value = 'userdefined';" /></td></tr>
  <tr><td>$_CONFIRM_PASSWD:</td><td><input type="password" name="confirm" id="text_pma_pw2_mail" title="$_CONFIRM" onchange="pred_password.value = 'userdefined';" /></td></tr>
  <tr><td>  <input type="button" id="button_generate_password_mail" value="$_GET $_USER $_PASSWD" onclick="CopyInputField('text_pma_pw', 'generated_pw_mail');" />
          <input type="button" id="button_copy_password_mail" value="Copy" onclick="CopyInputField('generated_pw_mail', 'text_pma_pw_mail'); CopyInputField('generated_pw_mail', 'text_pma_pw2_mail')" />
    </td><td><input type="text" name="generated_pw" id="generated_pw_mail" /></td></tr>
     };

   $Mail->{SEND_MAIL}='checked';

   $Mail->{DOMAINS_SEL}=$html->form_select('DOMAIN_ID', 
                                { 
 	                                SELECTED          => $Mail->{DOMAIN_ID},
 	                                SEL_MULTI_ARRAY   => $Mail->domain_list(),
 	                                MULTI_ARRAY_KEY   => 8,
 	                                MULTI_ARRAY_VALUE => 0,
 	                                SEL_OPTIONS       => { 0 => '-N/S-'},
 	                                NO_ID             => 1
 	                               });


    $tpls{"6:E-Mail::"}=$html->tpl_show(_include('mail_box', 'Mail'), $Mail,  { OUTPUT2RETURN => 1, ID => 'MAIL_BOX' });
  } 
 
 if ($attr->{TPLS}) {
   while(my($k, $v)=each %{ $attr->{TPLS} } ) {
   	  $tpls{$k}=$v;
   	  #print "$k, $v<br>";   	
     }
  }

	my $wizard;
	
  my $template='';
  my @sorted_templates = sort keys %tpls;;
 
 foreach my $key (@sorted_templates) {
     my($n, $descr, $pre, $post)=split(/:/, $key, 4);

     $template .= "<tr bgcolor=\"$_COLORS[0]\"><th>$descr</th></tr>\n";
     #$wizard = $pre;
     my $sub_tpl .= $html->tpl_show($tpls{"$key"}, $wizard, { OUTPUT2RETURN => 1, ID => "$descr" });
     $sub_tpl =~ s/(<input .*?UID.*?>)//gi;
     $sub_tpl =~ s/(<input .*?index.*?>)//gi;
     $sub_tpl =~ s/name=([A-Z_]+)/name=$n.$1/gi;
     $sub_tpl =~ s/name="([A-Z_]+)"/name=$n.$1/gi;
     $sub_tpl =~ s/name='([A-Z_]+)'/name=$n.$1/gi;

     $template .= "<tr><th align=\"center\">". $sub_tpl . "</th></tr>\n";
   }



  $template =~ s/(<form .*?>)//gi;
  $template =~ s/<\/form>//ig;
  $template =~ s/(<input .*?type=submit.*?>)//gi;
  $template =~ s/<hr>//gi;
  
#  print "<textarea cols=120 rows=3>$1 / $2 / $3</textarea><br>\n";



  $template = "<table width=\"100%\">$template</table>";
  if ($attr->{OUTPUT2RETURN}) {
    return $template;	
   }

  print $html->form_main({ CONTENT => $template,
  	                       HIDDEN  => { index => "$index" },
	                         SUBMIT  => { add   => "$_ADD"  },
	                         NAME    => 'user_form'
	                         
	                        });
	
}


#**********************************************************
#
#**********************************************************
sub dv_registration  {
	my ($attr) = @_;
	if ($FORM{registration}) {
		
		
	 }
	else {
		$html->message('info', $_INFO, "$_REGISTRATION");
	 }
	
  $html->tpl_show(_include('dv_registration', 'Dv'), 
      $Dv, 
      { ID => 'DV_REGISTRATION' });

	return 0;
}


#**********************************************************
#
#Make month feee
#**********************************************************
sub dv_get_month_fee {
  my ($Dv, $attr) = @_;

  #Get active price
  if ($Dv->{TP_INFO}->{ACTIV_PRICE}) {
    my $users = Users->new($db, $admin, \%conf); 
    my $user  = $users->info($Dv->{UID});
    my $date  = ($user->{ACTIVATE} ne '0000-00-00') ? $user->{ACTIVATE} : $DATE;
    my $time  = ($user->{ACTIVATE} ne '0000-00-00') ? '00:00:00' : $TIME;


    if (! $Dv->{OLD_STATUS} || $Dv->{OLD_STATUS} == 2) {
      $fees->take($user, $Dv->{TP_INFO}->{ACTIV_PRICE}, 
                              { DESCRIBE  => "$_ACTIVATE $_TARIF_PLAN", 
   	                            DATE      => "$date $time"
  	                           });  
  	  $html->message('info', $_INFO, "$_ACTIVATE $_TARIF_PLAN");	
     }
   }

  #Get month fee
  if ($Dv->{TP_INFO}->{MONTH_FEE} > 0) {

     my $sum   = $Dv->{TP_INFO}->{MONTH_FEE};

     my $users = Users->new($db, $admin, \%conf); 
     my $user  = $users->info($Dv->{UID});

     if ($Dv->{TP_INFO}->{EXT_BILL_ACCOUNT})  {
     	 $user->{BILL_ID}=$user->{EXT_BILL_ID} if ($user->{EXT_BILL_ID});
      }



     my $message = ''; 
     #Current Month
     my ($y, $m, $d)=split(/-/, $DATE, 3);

     my ($active_y, $active_m, $active_d)=split(/-/, $Dv->{ACTIVATE}, 3);	 
     if (int("$y$m$d") < int("$active_y$active_m$active_d")) {
     	  return ;
      }

        if ($Dv->{TP_INFO}->{PERIOD_ALIGNMENT} && ! $Dv->{TP_INFO}->{ABON_DISTRIBUTION}) {
        	$message = "$_MONTH_ALIGNMENT, ";
          my $days_in_month=($m!=2?(($m%2)^($m>7))+30:(!($y%400)||!($y%4)&&($y%25)?29:28));

          if ($Dv->{ACTIVATE} && $Dv->{ACTIVATE} ne '0000-00-00') {
            $days_in_month=($active_m!=2?(($active_m%2)^($active_m>7))+30:(!($active_y%400)||!($active_y%4)&&($active_y%25)?29:28)); 
            $d = $active_d;
           }

          $conf{START_PERIOD_DAY} = 1 if (! $conf{START_PERIOD_DAY});
          $sum = sprintf("%.2f", ($sum / $days_in_month) * ($days_in_month - $d + $conf{START_PERIOD_DAY}));
          
          my $ddd  = $days_in_month * ($days_in_month - $d + $conf{START_PERIOD_DAY});
         }
       
        return 0 if ($sum == 0);
        
        my $periods = 0;
        if ($active_m > 0 && $active_m < $m) {
        	$periods = $m - $active_m;
         }
        elsif ($active_m > 0 && ( $active_m >= $m  && $active_y < $y)) {
        	$periods = 12 - $active_m + $m; 
         }
        
        #Make reduction
        if ($users->{REDUCTION} > 0 && $Dv->{TP_INFO}->{REDUCTION_FEE}) {
         	$sum = $sum * (100 - $users->{REDUCTION}) / 100;
         }          

        $message .= "$_MONTH_FEE: $sum ($Dv->{TP_INFO}->{TP_ID})";
        
        if ($Dv->{TP_INFO}->{ABON_DISTRIBUTION}) {
        	$sum = $sum / ( ($m!=2?(($m%2)^($m>7))+30:(!($y%400)||!($y%4)&&($y%25)?29:28)) );
        	$message .= " - $_ABON_DISTRIBUTION";
         }
        
        
        $m = $active_m if ($active_m > 0);
        for (my $i=0; $i<=$periods; $i++) {
          if ($m > 12) {
          	$m=1;
          	$active_y=$active_y+1;
           }
          
          $m = sprintf("%.2d", $m);

          if ( $i > 0 ) {
  	        $sum     = $Dv->{TP_INFO}->{MONTH_FEE};
            $message = "$_MONTH_FEE: $sum ($Dv->{TP_INFO}->{TP_ID})";
            $DATE    = "$active_y-$m-01";
            $TIME    = "00:00:00";
           }
          elsif ($Dv->{ACTIVATE} && $Dv->{ACTIVATE} ne '0000-00-00'){
            $DATE    = "$active_y-$m-$active_d";
            $TIME    = "00:00:00";
            
            if ($Dv->{TP_INFO}->{PERIOD_ALIGNMENT}) {
              $users->change($Dv->{UID}, { ACTIVATE => '0000-00-00',
              	                           UID      => $Dv->{UID} });
             }
           }
          
         
          $fees->take($users, $sum, { DESCRIBE  => $message, 
        	                            METHOD    => 1, 
        	                            DATE      => "$DATE $TIME"
        	                           });  
        
          if ($fees->{errno}) {
        	  $html->message('err', $_ERROR, "[$fees->{errno}] $fees->{errstr}");	
           }
          else {
            $html->message('info', $_INFO, $message);	
           }

          $m++;
         }


      }


}

#**********************************************************
# Add discovery mac to Dhcphosts
#**********************************************************
sub dv_dhcp_get_mac_add {
	my ($ip, $mac, $attr)=@_;
  
  use Dhcphosts;
  my $Dhcphosts = Dhcphosts->new($db, $admin, \%conf);

  my @dhcp_nets = split(/;/, $conf{DV_IP_DISCOVERY});
  

  foreach my $nets (@dhcp_nets) {
  	my ($id, $net)=split(/:/, $nets);

  	my $start_ip ='0.0.0.0';
  	my $bit_mask =0;

  	($start_ip, $bit_mask)=split(/\//, $net) if ($net);

  	my $mask = 0b0000000000000000000000000000001;
  	my $address_count = sprintf("%d", $mask << (32  - $bit_mask) );
  	#print "Content-Type: text/html\n\n";

  	if (ip2int($ip) >= ip2int($start_ip) && ip2int($ip) <= ip2int($start_ip) + $address_count) {
      my $list = $Dhcphosts->hosts_list({ 
      	                                  NETWORK   => $id, 
      	                                  SORT      => 3,
      	                                  DESC      => 'DESC',
      	                                  PAGE_ROWS => 1
      	                                    });
      	
      #make Discovery	                                  
      my $new_ip;
      if ($Dhcphosts->{errno}) {
      	$html->message('err', $_ACTIVATE, "$_ERROR DHCP get ip error", { ID => 116 });
        return 0;
       }
      elsif ($Dhcphosts->{TOTAL} < 1) {
      	$Dhcphosts->network_info($id);
      	if($Dhcphosts->{TOTAL} < 0) {
          $html->message('err', $_ACTIVATE, "$_ERROR Can't find your network '$id' ", { ID => 117 });
          return 0;
      	 }

      	$new_ip = int2ip(ip2int($Dhcphosts->{NETWORK}) + 1);
       }
      else {
      	$new_ip = int2ip($list->[0]->[2]+1);
       }

      

    	$Dhcphosts->host_add({ NETWORK  => $id,
    		                     HOSTNAME => "$user->{LOGIN}_$id",
     		                     MAC      => $mac,
     		                     IP       => $new_ip,
     		                     UID      => $user->{UID},
     		                     });

      if ($Dhcphosts->{errno}) {
        if ($Dhcphosts->{errno} == 7) {
        	$html->message('err', $_ACTIVATE, "$_ERROR: MAC: '$mac' IP: '$new_ip' $_EXIST", { ID => 118 });
         }
        else {
        	$html->message('err', $_ACTIVATE, "$_ERROR: DHCP add hosts error", { ID => 119 });
         }
       }
      else {
      	require "Abills/modules/Dhcphosts/webinterface";
      	dhcphosts_config({ NETWORKS => $id, 
      	                   reconfig => 1,
      	                   SILENT   => 1
      	                  });
      	$Dv->{NEW_IP}=$new_ip;
      	return 1;
       }
      
      return 0;
  	 }
   }
  
 
  $html->message('err', $_ACTIVATE, "$_ERROR: Can't find assign network IP: '$ip' ", { ID => 120 }); 
  return 0;
}



#**********************************************************
# Get MAC from hcl leaseds
#**********************************************************
sub dv_dhcp_get_mac {
	my ($ip, $attr) = @_;

 use Dhcphosts;
 my $Dhcphosts = Dhcphosts->new($db, $admin, \%conf);
 $Dhcphosts->host_info(0, { IP => $ip });
 my $MAC = '';
 
 if ($Dhcphosts->{TOTAL} > 0) {
   if ($attr->{CHECK_STATIC}) {
   	 return "static;$Dhcphosts->{MAC};$Dhcphosts->{IP}";
    }
   else {
  	 return $Dhcphosts->{MAC};
    }
  }

 if ($conf{DHCPHOSTS_LEASES} eq 'db') {
   my $list = $Dhcphosts->leases_list({ IP => $ip, STATE => 2 });
 
   if ($Dhcphosts->{TOTAL} > 0) {
  	 return $list->[0]->[3];
    }
   return '';
  }
 else {
   my $logfile = $conf{DHCPHOSTS_LEASES} || '/var/db/dhcpd/dhcpd.leases';
   my %list = ();
   my $l_ip = '';

   open (FILE, $logfile) or $html->message('err', $_ERROR, "Can't read file '$logfile' $!");

     while (<FILE>) {
       next if /^#|^$/;

       if (/^lease (\d+\.\d+\.\d+\.\d+)/) {
         $l_ip = $1; 
         $list{$ip}{ip}=sprintf("%-17s", $ip);
        }
       elsif (/^\s*hardware ethernet (.*);/) {
      	 my $mac = $1;
      	 if ($ip eq $l_ip) {
      	   $list{$ip}{hardware}=sprintf("%s", $mac); 
      	   return $list{$ip}{hardware} if ($list{$ip}{active}); 
      	  }
        }
       elsif (/^\s+binding state active/) {
         $list{$ip}{active}=1;
        }
     }
   close FILE;
 }
	
	 return ($list{$ip}{hardware}) ?  $list{$ip}{hardware} : '';
}


#**********************************************************
#
#**********************************************************
sub dv_compensation () {


if ($FORM{add}) {
	my ($Y, $M, $D) = split(/-/,  $FORM{FROM_DATE}, 3);
	my $from_date = mktime(0, 0, 0, $D, ($M-1), ($Y-1900), 0, 0, 0);

	($Y, $M, $D) = split(/-/,  $FORM{TO_DATE}, 3);
	my $to_date = mktime(0, 0, 0, $D, ($M-1), ($Y-1900), 0, 0, 0);
	
	my $days = ($to_date - $from_date) / 86400 + 1;
  $Dv->info($FORM{UID});
  my $sum = sprintf("%.2f", $days * $Dv->{DAY_ABON} + $days * ($Dv->{MONTH_ABON} / 31));
  
  my $payments     = Payments->new($db, $admin, \%conf);
  $payments->add({  BILL_ID => $users->{BILL_ID},
  	                UID     => $users->{UID}
  	                }, 
  	             	  
  	             	            { SUM            => $sum,
  	             	            	METHOD         => 4,
  	                            DESCRIBE       => "$_COMPENSATION. $days $_DAYS. ".$FORM{DESCRIBE},
  	                            INNER_DESCRIBE => $FORM{INNER_DESCRIBE}
  	                            } );
   
  
  if ($fees->{errno}) {
    $html->message('err', $_ERROR, "$_ERROR: [$fees->{errno}] $fees->{errstr} "); 
   }
  else {
    $html->message('info', $_INFO, "$_FROM: $FORM{FROM_DATE} $_TO: $FORM{TO_DATE} / $_DAYS: $days / $_SUM $sum");
   }
}



$Dv->{FROM_DATE}=$html->date_fld2('FROM_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'compensation', WEEK_DAYS => \@WEEKDAYS });
$Dv->{TO_DATE}=$html->date_fld2('TO_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'compensation', WEEK_DAYS => \@WEEKDAYS });

$html->tpl_show(_include('dv_compensation', 'Dv'), $Dv);
}


#**********************************************************
#
#**********************************************************
sub dv_form_shedule () {

  my $shedule = Shedule->new($db, $admin, \%conf);
  

if ($FORM{add}) {
    my ($Y, $M, $D) = split(/-/,  $FORM{DATE}, 3);

    $shedule->add( {UID     => $FORM{UID},
                   TYPE     => "$FORM{shedule}",
                   ACTION   => $FORM{ACTION},
    	             D        => $D,
                   M        => $M,
                   Y        => $Y,
                   DESCRIBE => "$message<br>
                   $_FROM: '$FORM{DATE}'",
                   MODULE   => 'Dv'
                    });

    if ($shedule->{errno}) {
      $html->message('err', $_ERROR, "[$shedule->{errno}] $err_strs{$shedule->{errno}}");	
     }
    else {
      $html->message('info', $_CHANGED, "$_SHEDULE $_ADDED");
    }
 }
elsif ($FORM{shedule}) {
	if ($FORM{shedule} eq 'status') {
    my $table = $html->table( { width       => '100%',
	                       rowcolor    => $_COLORS[0],
                         rows        => [[ "$_FROM: ",  $html->date_fld2('DATE', { MONTHES => \@MONTHES, FORM_NAME => 'compensation', WEEK_DAYS => \@WEEKDAYS }),
                                          "$_STATUS: ", $html->form_select('ACTION', 
                                          { 
 	                                          SELECTED     => $FORM{ACTION},
 	                                          SEL_HASH     => { 
 	                                          	                0  => $service_status[0],
 	                                          	                1  => $service_status[1],
 	                                          	                2  => $service_status[2],
 	                                          	                3  => $service_status[3]
 	                                          	                },
                                            NO_ID       => 1
 	                                        }),
 	                                        $html->form_input('add', $_ADD, { TYPE => 'submit' })
                                           
                                         ]],                                   
                      });



    print $html->form_main({ CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
	                       HIDDEN  => { sid     => "$sid",
	                                    index   => "$index",
	                                    shedule => "status",
	                                    UID     => "$FORM{UID}",
	                                     }});		
	 }
	
}
elsif ($FORM{del} && $FORM{is_js_confirmed}) {
  $shedule->del({ ID => $FORM{del} });
  if ($shedule->{errno}) {
    $html->message('err', $_ERROR, "[$shedule->{errno}] $err_strs{$shedule->{errno}}");
   }
  else {
    $html->message('info', $_DELETED, "$_DELETED [$FORM{del}]");
   }
}



  my $list = $shedule->list( {UID      => $FORM{UID},
                   MODULE   => 'Dv'
                   });

  my $table = $html->table( { width      => '100%',
                            border     => 1,
                            title      => ["$_HOURS", "$_DAY", "$_MONTH", "$_YEAR", "$_COUNT", "$_USER", "$_TYPE", "$_VALUE", "$_MODULES", "$_ADMINS", "$_CREATED", "-"],
                            cols_align => ['right', 'right', 'right', 'right', 'right', 'left', 'right', 'right', 'right', 'left', 'right', 'center'],
                            qs         => $pages_qs,
                            pages      => $shedule->{TOTAL},
                            ID         => 'DV_SHEDULE'
                          });

foreach my $line (@$list) {
  my $delete = ($permissions{4}{3}) ?  $html->button($_DEL, "index=$index&del=$line->[13]&UID=$line->[12]", { MESSAGE =>  "$_DEL [$line->[13]]?" }) : '-'; 


  $table->addrow($html->b($line->[0]), $line->[1], $line->[2], 
    $line->[3],  $line->[4],  
    $html->button($line->[5], "index=15&UID=$line->[12]"), 
    "$line->[6]", 
    ($line->[6] eq 'status') ? $html->color_mark($service_status[$line->[7]], $service_status_colors[ $line->[7]]) : $line->[7], 
    "$line->[8]", 
    "$line->[9]", 
    "$line->[10]", $delete);
}

print $table->show();

$table = $html->table({ width      => '100%',
                        cols_align => ['right', 'right', 'right', 'right'],
                        rows       => [ [ "$_TOTAL:", $html->b($shedule->{TOTAL}) ] ]
                       });
print $table->show();
}



#**********************************************************
#
#**********************************************************
sub dv_traffic_classes {
 	my ($attr) = @_;

  $tariffs->{ACTION}='add';
  $tariffs->{LNG_ACTION}=$_ADD;
 	

  
  if ($FORM{add}) {
    $tariffs->traffic_class_add({ %FORM });
    if (! $tariffs->{errno}) {
      $html->message('info', $_INFO, "$_ADDED");	
     }
   }
	elsif($FORM{change}) {
    $tariffs->traffic_class_change({ %FORM });

    if (! $tariffs->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED");	
     }
   }
	elsif($FORM{chg}) {
    $tariffs->traffic_class_info($FORM{chg});
  
  
 	  $tariffs->{ACTION}='change';
	  $tariffs->{LNG_ACTION}=$_CHANGE;


    if (! $tariffs->{errno}) {
      $html->message('info', $_INFO, "$_CHANGED");	
     }
   }
	elsif($FORM{del} && $FORM{is_js_confirmed} ) {
    $tariffs->traffic_class_del({ ID => $FORM{del} });
    if (! $tariffs->{errno}) {
      $html->message('info', $_INFO, "$_DELETED");	
     }
	 }

  if ($tariffs->{errno}) {
    $html->message('err', $_ERROR, "[$tariffs->{errno}] $err_strs{$tariffs->{errno}}");
   }

  $html->tpl_show(_include('dv_traffic_class', 'Dv'), $tariffs);



my $list = $tariffs->traffic_class_list( { %LIST_PARAMS } );


my $table = $html->table( { width      => '100%',
                            caption    => "$_TRAFFIC_CLASS",
                            border     => 1,
                            title      => ['#', "$_NAME", 'NETS',  "$_COMMENTS", '-', '-'],
                            cols_align => ['right', 'left', 'left', 'center:noprint', 'center:noprint'],
                            qs         => $pages_qs,
                            pages      => $Dv->{TOTAL},
                            ID         => 'DV_TRAFFIC_CLASSES'
                           });

foreach my $line (@$list) {
  $line->[2] =~ s/\n/<br>/g;
  $table->addrow(
    "$line->[0]",
    "$line->[1]", 
    "$line->[2]", 
    "$line->[3]",  
    $html->button("$_CHANGE", "index=$index&chg=$line->[0]" ),
    $html->button("$_DEL", "index=$index&del=$line->[0]",  { MESSAGE => "$_DEL $line->[0]?" })
   );
}
print $table->show();

#$table = $html->table( { width      => '100%',
#                         cols_align => ['right', 'right'],
#                         rows       => [ [ "$_TOTAL:", $html->b($Dv->{TOTAL}) ] ]
#                        } );
#print $table->show();

  
return 0; 	
}


1


