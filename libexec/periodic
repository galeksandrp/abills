#!/usr/bin/perl -w
#Periodic process

use vars  qw(%RAD %conf @MODULES $db $DATE $GZIP $MYSQLDUMP);
#use strict;
use FindBin '$Bin';

require $Bin . '/config.pl';
unshift(@INC, $Bin . '/../', $Bin . "/../Abills/$conf{dbtype}");

require "Abills/defs.conf";
require "Abills/templates.pl";

require Abills::Base;
Abills::Base->import();
require Abills::SQL;
Abills::SQL->import();
require Users;
Users->import();
require Admins;
Admins->import();
require Abills::HTML;
Abills::HTML->import();
my $html = Abills::HTML->new();

my $sql = Abills::SQL->connect($conf{dbtype}, $conf{dbhost}, $conf{dbname}, $conf{dbuser}, $conf{dbpasswd});
my $db = $sql->{db};
my $admin = Admins->new($db, \%conf);
$admin->info($conf{SYSTEM_ADMIN_ID}, { IP => '127.0.0.1' });



if ($admin->{errno}) {
	print  $admin->{errno};
	exit 0;
}

my $users = Users->new($db, $admin, \%conf); 

require "../language/$conf{default_language}.pl";
use POSIX qw(mktime strftime);
my $YESTERDAY = (strftime "%Y-%m-%d", localtime(time - 86400));

my %ADMIN_REPORT = (DATE => $DATE);
my $args = parse_arguments(\@ARGV);

#print $DATE;

my($y, $m, $d)=split(/-/, $ADMIN_REPORT{DATE}, 3);

my @daily_functions=('sheduler',
                     'admin_report_daily',
                     'dv_users_warning_messages');

my @monthly_functions = ('admin_report_monthly',
                         'backup',
                         'logrotate');



  foreach my $m (@MODULES) {
  	require "Abills/modules/$m/config";

    my $i=0;
    while(my($k, $v)= each %PERIODIC) {
      push @daily_functions, $PERIODIC{$k} if ($k eq 'daily');
      push @monthly_functions, $PERIODIC{$k} if ($k eq 'monthly');
      $i++;
     }

 	 require "Abills/modules/$m/webinterface" if($i > 0);
   undef %PERIODIC;
  }


  if(defined($args->{DATE})) {
     my($Y, $M, $D)=split(/-/, $args->{DATE}, 3);
     $YESTERDAY = (strftime "%Y-%m-%d", localtime(POSIX::mktime( 0, 10, 1, $D, ($M-1), $Y-1900)- 86400));
   	 $YESTERDAY=$args->{DATE};
   	 $ADMIN_REPORT{DATE} = $args->{DATE};
   }
 
if (defined($args->{monthly})) {
 	 $DATE = $args->{DATE};
   for(my $i=$#monthly_functions; $i>-1; $i--) {
  	my $f = $monthly_functions[$i];
  	#print $f . "\n";
  	$f->();
   }

   my $message = Abills::HTML->tpl_show(templates('admin_report_month'), \%ADMIN_REPORT, { notprint => 'yes' });
   sendmail("$conf{ADMIN_MAIL}", "$conf{ADMIN_MAIL}", "Monthly billing report", 
              "$message", "$conf{MAIL_CHARSET}", "2 (High)");
 }
elsif (defined($args->{daily})) {
  foreach my $f (@daily_functions) {
  	#print $f . "\n";
  	$f->();
   }

  my $message = Abills::HTML->tpl_show(templates('admin_report_day'), \%ADMIN_REPORT, { notprint => 'yes' });
  sendmail("$conf{ADMIN_MAIL}", "$conf{ADMIN_MAIL}", "Daily billing report ($YESTERDAY)", 
             "$message", "$conf{MAIL_CHARSET}", "2 (High)");
} 
elsif (defined($args->{backup})) {
  backup();	
 }
else {
 print "Arguments (daily|monthly|backup)
   Optional arguments
   DATE=2005-10-01\n";

 exit;
}


#**********************************************************
# sheduler()
#**********************************************************
sub sheduler {
	
	
my %shedule_type = ('tp' => $_VARIANT, 
                 'fees' => $_FEES,
                 'message' => $_MESSAGES
 );

#Change variant
 require Shedule;
 Shedule->import();
 my $shedule = Shedule->new($db, $admin);

 require Fees;
 Fees->import();
 my $fees = Fees->new($db, $admin);


 my $list = $shedule->list({ Y => $y,
 	                           M => $m,
 	                           D => $d});

 $ADMIN_REPORT{SHEDULE}=sprintf("%-14s| %-8s| %-14s|\n", $_LOGIN, $_TYPE, $_VALUE);  
 $ADMIN_REPORT{SHEDULE}.= "---------------------------------------------------------\n";
 foreach my $line (@$list) {
    #s.h, s.d, s.m, s.y, s.counts, u.id, s.type, s.action, a.id, s.date, a.aid, s.uid, s.id  
	  #print "$line->[5] $line->[6] $line->[7]\n";
	  if($line->[6] eq 'tp') {
       $users->change($line->[11], { TARIF_PLAN => $line->[7] } );
       $shedule->del($line->[12]);
     }
    elsif ($line->[6] eq 'fees') {
    	 my $user = $users->info( $line->[11] );
    	 my ($sum, $descr) = split(/:/, $line->[7], 2);
    	 #my $module = $line->[8];
    	 $fees->take($user, $sum, { DESCRIBE => "$_SHEDULE: $descr" } );  
    	 $shedule->del($line->[12]);
     }

	  $ADMIN_REPORT{SHEDULE}.=sprintf("%-14s| %-8s| %-14s|\n", $line->[5], $line->[6], $line->[7]);  
  } 

}








#**********************************************************
# admin_report_daily
#**********************************************************
sub admin_report_daily {


##closed users account
#$ADMIN_REPORT{CLOSED} = sprintf ("%-14s| %4s|%-20s| %9s| %8s| %19s|\n", $_LOGIN, 'V', 
#     $_NAME, $_DEPOSIT, $_CREDIT, $_LAST_LOGIN);
#$ADMIN_REPORT{CLOSED}.= "---------------------------------------------------------\n";
#my %LIST_PARAMS = ( DISABLE => 'y' ) ;
#$LIST_PARAMS{PAGE_ROWS}=10000;
#
#my $list = $users->list( { %LIST_PARAMS } );
#foreach my $line (@$list) {
#   $ADMIN_REPORT{CLOSED} .= sprintf ("%-14s| %4d|%-20s| %9.4f| %8.2f| %19s|\n", 
#     $line->[0], 
#     $line->[9], 
#     $line->[4], 
#     $line->[2], 
#     $line->[3], 
#     $line->[10]);
#}
#$ADMIN_REPORT{CLOSED} .= "---------------------------------------------------------\n$_TOTAL: $users->{TOTAL}\n";


#Payments
require Finance;
Finance->import();
my $payments = Finance->payments($db, $admin, \%conf); 

$ADMIN_REPORT{PAYMENTS}  =  sprintf("%-14s| %8s| %20s| %12s| %15s| %19s|\n", $_LOGIN, $_SUM, 
    $_DESCRIBE, 'Admins.', 'IP', $_DATE);
$ADMIN_REPORT{PAYMENTS} .= "---------------------------------------------------------\n";

$LIST_PARAMS{DATE}=$YESTERDAY;
$LIST_PARAMS{SORT}=2;
$LIST_PARAMS{DESC}='DESC';

$list = $payments->list( { %LIST_PARAMS } );

foreach my $line (@$list) {
   $ADMIN_REPORT{PAYMENTS} .= sprintf ("%-14s| %8.4f| %20s| %12s| %15s| %19s|\n", 
    "$line->[1]", 
    "$line->[3]", 
    "$line->[4]", 
    "$line->[5]", 
    "$line->[6]", 
    "$line->[2]");
}

$ADMIN_REPORT{PAYMENTS} .= "---------------------------------------------------------\n";
$ADMIN_REPORT{PAYMENTS} .= sprintf("%-14s| %8s|\n%-14s| %8s|\n", 
  $_TOTAL, $payments->{TOTAL},
  $_SUM,   $payments->{SUM});



#Fees
my $fees = Finance->fees($db, $admin, \%conf);


# Daily fees
$ADMIN_REPORT{FEES} .= sprintf ("%-14s| %8s| %20s| %12s| %15s| %8s\n", $_LOGIN, $_SUM, $_DESCRIBE, $_ADMINS, 'IP', $_DEPOSIT);
$ADMIN_REPORT{FEES} .= "---------------------------------------------------------\n";

$LIST_PARAMS{PAGE_ROWS}=10000;
$list = $fees->list( { %LIST_PARAMS } );
foreach my $line (@$list) {
#SELECT f.id, u.id, f.date, f.sum, f.dsc, a.name, INET_NTOA(f.ip), f.last_deposit, f.uid 
  $ADMIN_REPORT{FEES} .= sprintf ("%-14s| %8.4f| %20s| %12s| %15s| %8.4f\n", 
    $line->[1], 
    $line->[3], 
    $line->[4], 
    $line->[5], 
    $line->[6],
    $line->[7]);
    
}

$ADMIN_REPORT{FEES} .= "---------------------------------------------------------\n";
$ADMIN_REPORT{FEES} .= sprintf("%-14s| %8s|\n%-14s| %8s|\n", 
    $_TOTAL, $fees->{TOTAL}, 
    $_SUM,   $fees->{SUM});


#USED traffic nd time
require Dv_Sessions;
Dv_Sessions->import();
my $sessions = Dv_Sessions->new($db, $admin, \%conf); 

$ADMIN_REPORT{SESSIONS} .= sprintf ("%-14s| %5s| %9s| %9s| %10s| %9s|\n", $_LOGIN, $_SESSIONS, 
    $_TRAFFIC, "$_TRAFFIC 2", $_DURATION, $_SUM);
$ADMIN_REPORT{SESSIONS} .= "---------------------------------------------------------\n";

$list = $sessions->reports( { %LIST_PARAMS } );
foreach my $line (@$list) {
  
#   u.id, count(l.id), sum(l.sent + l.recv), sum(l.sent2 + l.recv2), sec_to_time(sum(l.duration)), sum(l.sum), l.id

 
   $ADMIN_REPORT{SESSIONS} .= sprintf ("%-14s| %5d| %9s| %9s| %8s| %9.4f|\n", 
    $line->[1], 
    $line->[2], 
    int2byte($line->[3]), 
    int2byte($line->[4]), 
    $line->[5], 
    $line->[6]);
}


$ADMIN_REPORT{SESSIONS} .= "---------------------------------------------------------\n";
$ADMIN_REPORT{SESSIONS} .= sprintf("%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n", 
   $_USERS,       $sessions->{USERS}, 
   $_SESSIONS,    $sessions->{SESSIONS}, 
   $_TRAFFIC,     int2byte($sessions->{TRAFFIC}), 
   "$_TRAFFIC 2", int2byte($sessions->{TRAFFIC_2}), 
   $_DURATION,    $sessions->{DURATION}, 
   $_SUM,         $sessions->{SUM});



#my $total_sum = 0;
#my $total_dur_sec = 0;
#my $total_trafic = 0;
#my $total_sessions = 0;
#my $unique_users= 0;
#while(my($login, $sessions, $trafic, $duration, $sum, $dur_sec) = $q -> fetchrow_array()) {
#  $total_sum += $sum;
#  $total_dur_sec += $dur_sec;
#  $total_trafic += $trafic;
#  $total_sessions += $sessions;
#  $unique_users++;
#  $message .= sprintf ("%-14s| %4d| %12s| %10s| %8s\n", $login, $sessions, 
#    int2byte($trafic), $duration, $sum);
#}
#
#
##print $stats;
#my ($s,$m,$h,$days) = sec2time($total_dur_sec);
#
#$message .= "=========================================================\n";
#$message .= sprintf ("%s:%4d/%4d| %9s| %s+%02.d:%02.d:%02.d| %-8.2f\n", $_TOTAL, 
#    $unique_users, $total_sessions,  int2byte($total_trafic), $days, $h,$m,$s,  $total_sum);









}


#**********************************************************
# admin_report_monthly
#**********************************************************
sub admin_report_monthly {
 
#Payments
require Finance;
Finance->import();
my $payments = Finance->payments($db, $admin, \%conf); 

$ADMIN_REPORT{PAYMENTS}  =  sprintf("%-14s| %8s| %20s| %12s| %15s| %19s|\n", 
    $_LOGIN, $_SUM, $_DESCRIBE, 'Admins.', 'IP', $_DATE);
$ADMIN_REPORT{PAYMENTS} .= "---------------------------------------------------------\n";

$LIST_PARAMS{DATE}=$YESTERDAY;
$LIST_PARAMS{SORT}=2;
$LIST_PARAMS{DESC}='DESC';

$list = $payments->list( { %LIST_PARAMS } );

foreach my $line (@$list) {
   $ADMIN_REPORT{PAYMENTS} .= sprintf ("%-14s| %8.4f| %20s| %12s| %15s| %19s|\n", 
    "$line->[1]", 
    "$line->[3]", 
    "$line->[4]", 
    "$line->[5]", 
    "$line->[6]", 
    "$line->[2]");
}

$ADMIN_REPORT{PAYMENTS} .= "---------------------------------------------------------\n";
$ADMIN_REPORT{PAYMENTS} .= sprintf("%-14s| %8s|\n%-14s| %8s|\n", 
  $_TOTAL, $payments->{TOTAL},
  $_SUM,   $payments->{SUM});



#Fees
my $fees = Finance->fees($db, $admin, \%conf);


# Daily fees
# Login Count Sum  
$ADMIN_REPORT{FEES} .= sprintf ("%-14s| %8s| %20s| %12s| %15s| %8s\n", 
   $_LOGIN, $_SUM, $_DESCRIBE, $_ADMINS, 'IP', $_DEPOSIT);
$ADMIN_REPORT{FEES} .= "---------------------------------------------------------\n";

$LIST_PARAMS{PAGE_ROWS}=10000;
$list = $fees->list( { %LIST_PARAMS } );
foreach my $line (@$list) {
#SELECT f.id, u.id, f.date, f.sum, f.dsc, a.name, INET_NTOA(f.ip), f.last_deposit, f.uid 
  $ADMIN_REPORT{FEES} .= sprintf ("%-14s| %8.4f| %20s| %12s| %15s| %8.4f\n", 
    $line->[1], 
    $line->[3], 
    $line->[4], 
    $line->[5], 
    $line->[6],
    $line->[7]);
    
}

$ADMIN_REPORT{FEES} .= "---------------------------------------------------------\n";
$ADMIN_REPORT{FEES} .= sprintf("%-14s| %8s|\n%-14s| %8s|\n", 
    $_TOTAL, $fees->{TOTAL}, 
    $_SUM,   $fees->{SUM});


#USED traffic nd time
#Date  Users  Sessions  Traffic  Traffic 2  Duration  Sum  
require Dv_Sessions;
Dv_Sessions->import();
my $sessions = Dv_Sessions->new($db, $admin, \%conf); 

$ADMIN_REPORT{SESSIONS} .= sprintf ("%-14s| %5s| %9s| %9s| %10s| %9s|\n", $_LOGIN, $_SESSIONS, 
    $_TRAFFIC, "$_TRAFFIC 2", $_DURATION, $_SUM);
$ADMIN_REPORT{SESSIONS} .= "---------------------------------------------------------\n";

$list = $sessions->reports( { %LIST_PARAMS } );
foreach my $line (@$list) {
  
#   u.id, count(l.id), sum(l.sent + l.recv), sum(l.sent2 + l.recv2), sec_to_time(sum(l.duration)), sum(l.sum), l.id

 
   $ADMIN_REPORT{SESSIONS} .= sprintf ("%-14s| %5d| %9s| %9s| %8s| %9.4f|\n", 
    $line->[1], 
    $line->[2], 
    int2byte($line->[3]), 
    int2byte($line->[4]), 
    $line->[5], 
    $line->[6]);
}


$ADMIN_REPORT{SESSIONS} .= "---------------------------------------------------------\n";
$ADMIN_REPORT{SESSIONS} .= sprintf("%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n%-14s| %20s|\n", 
   $_USERS,       $sessions->{USERS}, 
   $_SESSIONS,    $sessions->{SESSIONS}, 
   $_TRAFFIC,     int2byte($sessions->{TRAFFIC}), 
   "$_TRAFFIC 2", int2byte($sessions->{TRAFFIC_2}), 
   $_DURATION,    $sessions->{DURATION}, 
   $_SUM,         $sessions->{SUM});









  

}



#*******************************************************************
# Log rotate
#*******************************************************************
sub logrotate {
	
	
}


#*******************************************************************
# Make backup
# backup()
#*******************************************************************
sub backup {
 #print "$MYSQLDUMP --host=$conf{dbhost} --user=\"$conf{dbuser}\" --password=\"$conf{dbpasswd}\" $conf{dbname} | $GZIP > $conf{BACKUP_DIR}/stats-$DATE.sql.gz";
 my $res = `$MYSQLDUMP -v --host=$conf{dbhost} --user="$conf{dbuser}" --password="$conf{dbpasswd}" $conf{dbname} | $GZIP > $conf{BACKUP_DIR}/stats-$DATE.sql.gz`;
 #print $res;
 #my $message .= "Backup created: $res ($conf{BACKUP_DIR}/stats-$DATE.sql.gz)";
}